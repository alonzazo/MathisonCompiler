package LexicalAnalizer;
/* The following code was generated by JFlex 1.6.1 */

/*
Mathison

Instrucciones para correr el analizador léxico:
1. Compilar el archivo lexer1.jflex con Jflex
2. Se generará el archivo Lexer.java y se corre con algún IDE con soporte para Java
3. Se ingresan las palabras, cadenas, numeros o símbolos por medio de línea de
comando o en un archivo de texto
4. Las reglas son las siguientes:
	- Las variables deben empezar con una letra y pueden tener solamente letras,
	números y guiones bajos
	- Los números pueden ser negativos o positivos y pueden tener o no decimales
	separados por un punto
	- Las palabras reservadas se pueden escribir en mayúsculas, minúsculas o
	con un combinación de ambas, estas se listan más abajo
	- Los comentarios se escriben con dos slash, para comentarios de una
	línea o con slash-asterisco asterisco-slash, para comentarios multilínea
	y ambos aceptan cualquier caracter
	- Los literales de cadena se escriben entre comillas y aceptan cualquier
	carecter que no sean comillas a menos que esten precedidas por un backslash
	- Se pueden escribir expresiones separadas o no por espacios que serán
	identificadas por el analizador, esto no aplica para comentarios o literales
	de cadena donde identifica toda la expresión como una sola
*/


import SyntacticalAnalizer.sym;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Oscar Azofeifa/IdeaProjects/MathisonCompiler/src/main/resources/LexerSources/lexer1.jflex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\41\1\36\1\0\1\41\1\36\22\0\1\41\1\47\1\42"+
    "\5\0\1\54\1\55\1\40\1\46\1\57\1\45\1\33\1\37\12\32"+
    "\1\56\1\0\1\27\1\30\1\31\2\0\1\4\1\22\1\15\1\6"+
    "\1\7\1\23\1\34\1\11\1\17\1\26\1\34\1\20\1\16\1\14"+
    "\1\2\1\3\1\34\1\5\1\10\1\12\1\21\1\13\1\34\1\25"+
    "\1\1\1\24\1\50\1\43\1\51\1\44\1\35\1\0\1\4\1\22"+
    "\1\15\1\6\1\7\1\23\1\34\1\11\1\17\1\26\1\34\1\20"+
    "\1\16\1\14\1\2\1\3\1\34\1\5\1\10\1\12\1\21\1\13"+
    "\1\34\1\25\1\1\1\24\1\52\1\0\1\53\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\21\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\1\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\7\4\1\30\2\4\1\31\20\4\1\32\1\33"+
    "\1\34\1\0\1\35\2\0\1\36\1\0\7\4\1\37"+
    "\12\4\1\40\1\41\1\4\1\42\2\4\1\43\10\4"+
    "\1\44\1\10\1\35\4\0\1\45\1\46\12\4\1\47"+
    "\6\4\1\50\1\51\7\4\1\52\1\53\2\4\1\0"+
    "\5\4\1\54\4\4\1\55\1\56\4\4\1\57\6\4"+
    "\1\60\4\4\1\61\16\4\1\62\1\4\1\63\1\64"+
    "\1\65\1\66\1\4\1\67\1\70\5\4\1\71\5\4"+
    "\1\72\1\73\1\74\3\4\1\75\1\76\1\77\1\100"+
    "\1\4\1\101\1\102\1\103\1\4\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\140\0\220\0\300\0\360\0\u0120"+
    "\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\140\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0"+
    "\0\u0420\0\60\0\u0450\0\60\0\u0480\0\60\0\60\0\60"+
    "\0\60\0\60\0\60\0\60\0\60\0\60\0\60\0\60"+
    "\0\60\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0"+
    "\0\140\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720"+
    "\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0"+
    "\0\u08d0\0\u0900\0\u0930\0\u0960\0\60\0\60\0\60\0\u0990"+
    "\0\u09c0\0\u09f0\0\u0a20\0\60\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0"+
    "\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\140\0\u0bd0\0\u0c00\0\u0c30"+
    "\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\140"+
    "\0\u0db0\0\u0de0\0\140\0\u0e10\0\u0e40\0\140\0\u0e70\0\u0ea0"+
    "\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u0990"+
    "\0\60\0\u1020\0\u1050\0\u0480\0\u1080\0\140\0\140\0\u10b0"+
    "\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230"+
    "\0\u1260\0\140\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380"+
    "\0\140\0\140\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0"+
    "\0\u14d0\0\140\0\140\0\u1500\0\u1530\0\u1560\0\u1590\0\u15c0"+
    "\0\u15f0\0\u1620\0\u1650\0\140\0\u1680\0\u16b0\0\u16e0\0\u1710"+
    "\0\140\0\140\0\u1740\0\u1770\0\u17a0\0\u17d0\0\140\0\u1800"+
    "\0\u1830\0\u1860\0\u1890\0\u18c0\0\u18f0\0\140\0\u1920\0\u1950"+
    "\0\u1980\0\u19b0\0\140\0\u19e0\0\u1a10\0\u1a40\0\u1a70\0\u1aa0"+
    "\0\u1ad0\0\u1b00\0\u1b30\0\u1b60\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20"+
    "\0\u1c50\0\140\0\u1c80\0\140\0\140\0\140\0\140\0\u1cb0"+
    "\0\140\0\140\0\u1ce0\0\u1d10\0\u1d40\0\u1d70\0\u1da0\0\140"+
    "\0\u1dd0\0\u1e00\0\u1e30\0\u1e60\0\u1e90\0\140\0\140\0\140"+
    "\0\u1ec0\0\u1ef0\0\u1f20\0\140\0\140\0\140\0\140\0\u1f50"+
    "\0\140\0\140\0\140\0\u1f80\0\140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\3\23\1\26\1\27\1\30"+
    "\1\31\1\2\1\23\1\2\1\32\1\33\1\34\1\32"+
    "\1\35\1\2\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\61\0\26\23"+
    "\3\0\1\23\1\0\2\23\23\0\3\23\1\52\1\53"+
    "\13\23\1\54\5\23\3\0\1\23\1\0\2\23\23\0"+
    "\11\23\1\55\1\56\13\23\3\0\1\23\1\0\2\23"+
    "\23\0\6\23\1\57\17\23\3\0\1\23\1\0\2\23"+
    "\23\0\6\23\1\60\17\23\3\0\1\23\1\0\2\23"+
    "\23\0\13\23\1\61\10\23\1\62\1\63\3\0\1\23"+
    "\1\0\2\23\23\0\16\23\1\64\7\23\3\0\1\23"+
    "\1\0\2\23\23\0\3\23\1\65\22\23\3\0\1\23"+
    "\1\0\2\23\23\0\6\23\1\66\17\23\3\0\1\23"+
    "\1\0\2\23\23\0\6\23\1\67\17\23\3\0\1\23"+
    "\1\0\2\23\23\0\20\23\1\70\5\23\3\0\1\23"+
    "\1\0\2\23\23\0\1\23\1\71\1\23\1\72\13\23"+
    "\1\73\6\23\3\0\1\23\1\0\2\23\23\0\1\23"+
    "\1\74\14\23\1\75\7\23\3\0\1\23\1\0\2\23"+
    "\23\0\13\23\1\76\1\23\1\77\10\23\3\0\1\23"+
    "\1\0\2\23\23\0\3\23\1\100\2\23\1\101\17\23"+
    "\3\0\1\23\1\0\2\23\23\0\1\23\1\102\24\23"+
    "\3\0\1\23\1\0\2\23\23\0\3\23\1\103\12\23"+
    "\1\104\7\23\3\0\1\23\1\0\2\23\52\0\1\105"+
    "\57\0\1\106\57\0\1\107\61\0\1\31\1\110\63\0"+
    "\1\111\1\112\17\0\42\113\1\114\1\115\14\113\1\0"+
    "\4\23\1\116\21\23\3\0\1\23\1\0\2\23\23\0"+
    "\1\23\1\117\14\23\1\120\7\23\3\0\1\23\1\0"+
    "\2\23\23\0\21\23\1\121\4\23\3\0\1\23\1\0"+
    "\2\23\23\0\4\23\1\122\21\23\3\0\1\23\1\0"+
    "\2\23\23\0\3\23\1\123\22\23\3\0\1\23\1\0"+
    "\2\23\23\0\12\23\1\124\1\23\1\125\11\23\3\0"+
    "\1\23\1\0\2\23\23\0\7\23\1\126\2\23\1\127"+
    "\7\23\1\130\3\23\3\0\1\23\1\0\2\23\23\0"+
    "\14\23\1\131\11\23\3\0\1\23\1\0\2\23\23\0"+
    "\6\23\1\132\17\23\3\0\1\23\1\0\2\23\23\0"+
    "\13\23\1\133\12\23\3\0\1\23\1\0\2\23\23\0"+
    "\7\23\1\134\4\23\1\135\11\23\3\0\1\23\1\0"+
    "\2\23\23\0\4\23\1\136\21\23\3\0\1\23\1\0"+
    "\2\23\23\0\4\23\1\137\21\23\3\0\1\23\1\0"+
    "\2\23\23\0\15\23\1\140\10\23\3\0\1\23\1\0"+
    "\2\23\23\0\13\23\1\141\1\23\1\142\10\23\3\0"+
    "\1\23\1\0\2\23\23\0\5\23\1\143\1\23\1\144"+
    "\16\23\3\0\1\23\1\0\2\23\23\0\3\23\1\145"+
    "\22\23\3\0\1\23\1\0\2\23\23\0\5\23\1\146"+
    "\1\23\1\147\16\23\3\0\1\23\1\0\2\23\23\0"+
    "\6\23\1\150\17\23\3\0\1\23\1\0\2\23\23\0"+
    "\11\23\1\151\14\23\3\0\1\23\1\0\2\23\23\0"+
    "\2\23\1\152\23\23\3\0\1\23\1\0\2\23\23\0"+
    "\13\23\1\153\12\23\3\0\1\23\1\0\2\23\23\0"+
    "\6\23\1\154\17\23\3\0\1\23\1\0\2\23\23\0"+
    "\1\23\1\155\24\23\3\0\1\23\1\0\2\23\23\0"+
    "\17\23\1\156\6\23\3\0\1\23\1\0\2\23\23\0"+
    "\13\23\1\157\12\23\3\0\1\23\1\0\2\23\54\0"+
    "\1\160\25\0\36\111\1\161\21\111\40\162\1\163\17\162"+
    "\42\164\1\114\1\165\57\164\1\165\14\164\1\0\3\23"+
    "\1\166\22\23\3\0\1\23\1\0\2\23\23\0\14\23"+
    "\1\167\11\23\3\0\1\23\1\0\2\23\23\0\12\23"+
    "\1\170\13\23\3\0\1\23\1\0\2\23\23\0\17\23"+
    "\1\171\6\23\3\0\1\23\1\0\2\23\23\0\3\23"+
    "\1\172\22\23\3\0\1\23\1\0\2\23\23\0\13\23"+
    "\1\173\12\23\3\0\1\23\1\0\2\23\23\0\16\23"+
    "\1\174\7\23\3\0\1\23\1\0\2\23\23\0\5\23"+
    "\1\175\20\23\3\0\1\23\1\0\2\23\23\0\1\23"+
    "\1\176\24\23\3\0\1\23\1\0\2\23\23\0\6\23"+
    "\1\177\17\23\3\0\1\23\1\0\2\23\23\0\6\23"+
    "\1\200\17\23\3\0\1\23\1\0\2\23\23\0\14\23"+
    "\1\201\11\23\3\0\1\23\1\0\2\23\23\0\1\23"+
    "\1\202\24\23\3\0\1\23\1\0\2\23\23\0\11\23"+
    "\1\203\14\23\3\0\1\23\1\0\2\23\23\0\6\23"+
    "\1\204\17\23\3\0\1\23\1\0\2\23\23\0\15\23"+
    "\1\205\10\23\3\0\1\23\1\0\2\23\23\0\5\23"+
    "\1\206\20\23\3\0\1\23\1\0\2\23\23\0\7\23"+
    "\1\207\1\23\1\210\14\23\3\0\1\23\1\0\2\23"+
    "\23\0\1\23\1\211\24\23\3\0\1\23\1\0\2\23"+
    "\23\0\1\23\1\212\24\23\3\0\1\23\1\0\2\23"+
    "\23\0\7\23\1\213\16\23\3\0\1\23\1\0\2\23"+
    "\23\0\11\23\1\214\14\23\3\0\1\23\1\0\2\23"+
    "\23\0\13\23\1\215\12\23\3\0\1\23\1\0\2\23"+
    "\23\0\6\23\1\216\17\23\3\0\1\23\1\0\2\23"+
    "\23\0\1\23\1\217\2\23\1\220\21\23\3\0\1\23"+
    "\1\0\2\23\23\0\23\23\1\221\2\23\3\0\1\23"+
    "\1\0\2\23\23\0\4\23\1\222\21\23\3\0\1\23"+
    "\1\0\2\23\23\0\17\23\1\223\6\23\3\0\1\23"+
    "\1\0\2\23\23\0\7\23\1\224\16\23\3\0\1\23"+
    "\1\0\2\23\23\0\3\23\1\225\22\23\3\0\1\23"+
    "\1\0\2\23\22\0\40\162\1\226\17\162\37\0\1\161"+
    "\1\163\17\0\42\113\1\0\1\115\14\113\1\0\3\23"+
    "\1\227\22\23\3\0\1\23\1\0\2\23\23\0\16\23"+
    "\1\230\7\23\3\0\1\23\1\0\2\23\23\0\2\23"+
    "\1\231\23\23\3\0\1\23\1\0\2\23\23\0\14\23"+
    "\1\232\11\23\3\0\1\23\1\0\2\23\23\0\7\23"+
    "\1\233\16\23\3\0\1\23\1\0\2\23\23\0\6\23"+
    "\1\234\17\23\3\0\1\23\1\0\2\23\23\0\17\23"+
    "\1\235\6\23\3\0\1\23\1\0\2\23\23\0\14\23"+
    "\1\236\11\23\3\0\1\23\1\0\2\23\23\0\2\23"+
    "\1\237\23\23\3\0\1\23\1\0\2\23\23\0\20\23"+
    "\1\240\5\23\3\0\1\23\1\0\2\23\23\0\3\23"+
    "\1\241\22\23\3\0\1\23\1\0\2\23\23\0\4\23"+
    "\1\242\21\23\3\0\1\23\1\0\2\23\23\0\16\23"+
    "\1\243\7\23\3\0\1\23\1\0\2\23\23\0\3\23"+
    "\1\244\22\23\3\0\1\23\1\0\2\23\23\0\11\23"+
    "\1\245\14\23\3\0\1\23\1\0\2\23\23\0\16\23"+
    "\1\246\7\23\3\0\1\23\1\0\2\23\23\0\6\23"+
    "\1\247\17\23\3\0\1\23\1\0\2\23\23\0\4\23"+
    "\1\250\21\23\3\0\1\23\1\0\2\23\23\0\11\23"+
    "\1\251\14\23\3\0\1\23\1\0\2\23\23\0\13\23"+
    "\1\252\12\23\3\0\1\23\1\0\2\23\23\0\4\23"+
    "\1\253\21\23\3\0\1\23\1\0\2\23\23\0\16\23"+
    "\1\254\7\23\3\0\1\23\1\0\2\23\23\0\3\23"+
    "\1\255\22\23\3\0\1\23\1\0\2\23\23\0\1\23"+
    "\1\256\24\23\3\0\1\23\1\0\2\23\23\0\17\23"+
    "\1\257\6\23\3\0\1\23\1\0\2\23\22\0\37\162"+
    "\1\161\1\226\17\162\1\0\5\23\1\260\20\23\3\0"+
    "\1\23\1\0\2\23\23\0\14\23\1\261\11\23\3\0"+
    "\1\23\1\0\2\23\23\0\3\23\1\262\22\23\3\0"+
    "\1\23\1\0\2\23\23\0\6\23\1\263\17\23\3\0"+
    "\1\23\1\0\2\23\23\0\3\23\1\264\22\23\3\0"+
    "\1\23\1\0\2\23\23\0\12\23\1\265\13\23\3\0"+
    "\1\23\1\0\2\23\23\0\11\23\1\266\14\23\3\0"+
    "\1\23\1\0\2\23\23\0\11\23\1\267\14\23\3\0"+
    "\1\23\1\0\2\23\23\0\11\23\1\270\14\23\3\0"+
    "\1\23\1\0\2\23\23\0\13\23\1\271\12\23\3\0"+
    "\1\23\1\0\2\23\23\0\5\23\1\272\20\23\3\0"+
    "\1\23\1\0\2\23\23\0\3\23\1\273\22\23\3\0"+
    "\1\23\1\0\2\23\23\0\13\23\1\274\12\23\3\0"+
    "\1\23\1\0\2\23\23\0\3\23\1\275\22\23\3\0"+
    "\1\23\1\0\2\23\23\0\4\23\1\276\21\23\3\0"+
    "\1\23\1\0\2\23\23\0\11\23\1\277\14\23\3\0"+
    "\1\23\1\0\2\23\23\0\11\23\1\300\14\23\3\0"+
    "\1\23\1\0\2\23\23\0\15\23\1\301\10\23\3\0"+
    "\1\23\1\0\2\23\23\0\4\23\1\302\21\23\3\0"+
    "\1\23\1\0\2\23\23\0\15\23\1\303\10\23\3\0"+
    "\1\23\1\0\2\23\23\0\1\23\1\304\24\23\3\0"+
    "\1\23\1\0\2\23\23\0\1\23\1\305\24\23\3\0"+
    "\1\23\1\0\2\23\23\0\4\23\1\306\21\23\3\0"+
    "\1\23\1\0\2\23\23\0\4\23\1\307\21\23\3\0"+
    "\1\23\1\0\2\23\23\0\6\23\1\310\17\23\3\0"+
    "\1\23\1\0\2\23\23\0\1\23\1\311\24\23\3\0"+
    "\1\23\1\0\2\23\23\0\1\23\1\312\24\23\3\0"+
    "\1\23\1\0\2\23\23\0\3\23\1\313\22\23\3\0"+
    "\1\23\1\0\2\23\23\0\3\23\1\314\22\23\3\0"+
    "\1\23\1\0\2\23\23\0\6\23\1\315\17\23\3\0"+
    "\1\23\1\0\2\23\23\0\13\23\1\316\12\23\3\0"+
    "\1\23\1\0\2\23\23\0\20\23\1\317\5\23\3\0"+
    "\1\23\1\0\2\23\23\0\4\23\1\320\21\23\3\0"+
    "\1\23\1\0\2\23\23\0\3\23\1\321\22\23\3\0"+
    "\1\23\1\0\2\23\23\0\3\23\1\322\22\23\3\0"+
    "\1\23\1\0\2\23\23\0\3\23\1\323\22\23\3\0"+
    "\1\23\1\0\2\23\23\0\16\23\1\324\7\23\3\0"+
    "\1\23\1\0\2\23\23\0\6\23\1\325\17\23\3\0"+
    "\1\23\1\0\2\23\23\0\4\23\1\326\21\23\3\0"+
    "\1\23\1\0\2\23\23\0\4\23\1\327\21\23\3\0"+
    "\1\23\1\0\2\23\23\0\4\23\1\330\21\23\3\0"+
    "\1\23\1\0\2\23\23\0\4\23\1\331\21\23\3\0"+
    "\1\23\1\0\2\23\23\0\11\23\1\332\14\23\3\0"+
    "\1\23\1\0\2\23\23\0\3\23\1\333\22\23\3\0"+
    "\1\23\1\0\2\23\23\0\7\23\1\334\16\23\3\0"+
    "\1\23\1\0\2\23\23\0\4\23\1\335\21\23\3\0"+
    "\1\23\1\0\2\23\23\0\4\23\1\336\21\23\3\0"+
    "\1\23\1\0\2\23\23\0\4\23\1\337\21\23\3\0"+
    "\1\23\1\0\2\23\23\0\13\23\1\340\12\23\3\0"+
    "\1\23\1\0\2\23\23\0\1\23\1\341\24\23\3\0"+
    "\1\23\1\0\2\23\23\0\6\23\1\342\17\23\3\0"+
    "\1\23\1\0\2\23\23\0\4\23\1\343\21\23\3\0"+
    "\1\23\1\0\2\23\23\0\11\23\1\344\14\23\3\0"+
    "\1\23\1\0\2\23\23\0\6\23\1\345\17\23\3\0"+
    "\1\23\1\0\2\23\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8112];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\27\1\1\11\1\1\1\11\1\1\14\11"+
    "\33\1\3\11\1\0\1\1\2\0\1\11\1\0\43\1"+
    "\1\11\4\0\40\1\1\0\117\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    /*  Generamos un java_cup.Symbol para guardar el tipo de token
        encontrado */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    /* Generamos un Symbol para el tipo de token encontrado
       junto con su valor */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
  yybegin(YYINITIAL);
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 208) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character <" + yytext()+">");
            }
          case 69: break;
          case 2: 
            { return symbol(sym.Y);
            }
          case 70: break;
          case 3: 
            { return symbol(sym.O);
            }
          case 71: break;
          case 4: 
            { return symbol(sym.VAR, new String(yytext()));
            }
          case 72: break;
          case 5: 
            { return symbol(sym.MENORQUE);
            }
          case 73: break;
          case 6: 
            { return symbol(sym.ASIGNACION);
            }
          case 74: break;
          case 7: 
            { return symbol(sym.MAYORQUE);
            }
          case 75: break;
          case 8: 
            { return symbol(sym.NUMERO, new Double(yytext()));
            }
          case 76: break;
          case 9: 
            { /* no hacer nada */
            }
          case 77: break;
          case 10: 
            { return symbol(sym.DIVISION);
            }
          case 78: break;
          case 11: 
            { return symbol(sym.MULTIPLICACION);
            }
          case 79: break;
          case 12: break;
          case 80: break;
          case 13: 
            { return symbol(sym.RESTA);
            }
          case 81: break;
          case 14: 
            { return symbol(sym.SUMA);
            }
          case 82: break;
          case 15: 
            { return symbol(sym.DISTINTO);
            }
          case 83: break;
          case 16: 
            { return symbol(sym.CORCHETEABIERTO);
            }
          case 84: break;
          case 17: 
            { return symbol(sym.CORCHETECERRADO);
            }
          case 85: break;
          case 18: 
            { return symbol(sym.LLAVEABIERTO);
            }
          case 86: break;
          case 19: 
            { return symbol(sym.LLAVECERRADO);
            }
          case 87: break;
          case 20: 
            { return symbol(sym.PARENTESISABIERTO);
            }
          case 88: break;
          case 21: 
            { return symbol(sym.PARENTESISCERRADO);
            }
          case 89: break;
          case 22: 
            { return symbol(sym.DOSPUNTOS);
            }
          case 90: break;
          case 23: 
            { return symbol(sym.COMA);
            }
          case 91: break;
          case 24: break;
          case 92: break;
          case 25: 
            { return symbol(sym.SI);
            }
          case 93: break;
          case 26: 
            { return symbol(sym.MENOROIGUAL);
            }
          case 94: break;
          case 27: 
            { return symbol(sym.IGUAL);
            }
          case 95: break;
          case 28: 
            { return symbol(sym.MAYOROIGUAL);
            }
          case 96: break;
          case 29: 
            { /* no haceer nada*/
            }
          case 97: break;
          case 30: 
            { return symbol(sym.CADENA,new String(yytext()));
            }
          case 98: break;
          case 31: break;
          case 99: break;
          case 32: 
            { return symbol(sym.NUM);
            }
          case 100: break;
          case 33: break;
          case 101: break;
          case 34: 
            { return symbol(sym.CAD);
            }
          case 102: break;
          case 35: break;
          case 103: break;
          case 36: break;
          case 104: break;
          case 37: 
            { return symbol(sym.PARA);
            }
          case 105: break;
          case 38: 
            { return symbol(sym.PROC);
            }
          case 106: break;
          case 39: 
            { return symbol(sym.SINO);
            }
          case 107: break;
          case 40: break;
          case 108: break;
          case 41: 
            { return symbol(sym.CASO);
            }
          case 109: break;
          case 42: 
            { return symbol(sym.LEER);
            }
          case 110: break;
          case 43: 
            { return symbol(sym.BOOL);
            }
          case 111: break;
          case 44: 
            { return symbol(sym.DESDE);
            }
          case 112: break;
          case 45: 
            { return symbol(sym.HASTA);
            }
          case 113: break;
          case 46: 
            { return symbol(sym.HACER);
            }
          case 114: break;
          case 47: 
            { return symbol(sym.CLASE);
            }
          case 115: break;
          case 48: 
            { return symbol(sym.FALSO);
            }
          case 116: break;
          case 49: 
            { return symbol(sym.AVANCE);
            }
          case 117: break;
          case 50: break;
          case 118: break;
          case 51: 
            { return symbol(sym.PRIVADO);
            }
          case 119: break;
          case 52: 
            { return symbol(sym.PUBLICO);
            }
          case 120: break;
          case 53: break;
          case 121: break;
          case 54: 
            { return symbol(sym.REVISAR);
            }
          case 122: break;
          case 55: 
            { return symbol(sym.DEFECTO);
            }
          case 123: break;
          case 56: break;
          case 124: break;
          case 57: break;
          case 125: break;
          case 58: 
            { return symbol(sym.DEVOLVER);
            }
          case 126: break;
          case 59: break;
          case 127: break;
          case 60: break;
          case 128: break;
          case 61: 
            { return symbol(sym.MIENTRAS);
            }
          case 129: break;
          case 62: break;
          case 130: break;
          case 63: break;
          case 131: break;
          case 64: 
            { return symbol(sym.IMPRIMIR);
            }
          case 132: break;
          case 65: 
            { return symbol(sym.VERDADERO);
            }
          case 133: break;
          case 66: break;
          case 134: break;
          case 67: break;
          case 135: break;
          case 68: break;
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
