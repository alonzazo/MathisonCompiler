/* The following code was generated by JFlex 1.6.1 */

import java.util.Scanner;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>F:/Mis documentos/Estudio/Universidad de Costa Rica/VII semestre/Aut√≥matas y compiladores/Proyecto/Etapa 2/lexer1.jflex</tt>
 */
class Lexer {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     *                  at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\42\1\37\1\0\1\42\1\37\22\0\1\42\1\52\1\43"+
                    "\2\0\1\47\1\47\1\0\1\45\1\45\1\41\1\46\1\0\1\32"+
                    "\1\34\1\40\12\33\1\51\1\0\1\27\1\30\1\31\2\0\1\4"+
                    "\1\22\1\15\1\6\1\7\1\23\1\35\1\11\1\17\1\26\1\35"+
                    "\1\20\1\16\1\14\1\2\1\3\1\35\1\5\1\10\1\12\1\21"+
                    "\1\13\1\35\1\25\1\1\1\24\1\45\1\44\1\45\1\50\1\36"+
                    "\1\0\1\4\1\22\1\15\1\6\1\7\1\23\1\35\1\11\1\17"+
                    "\1\26\1\35\1\20\1\16\1\14\1\2\1\3\1\35\1\5\1\10"+
                    "\1\12\1\21\1\13\1\35\1\25\1\1\1\24\1\45\1\47\1\45"+
                    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

    /**
     * Translates characters to character classes
     */
    private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int [] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\1\3\20\4\1\5\1\6\1\7"+
                    "\1\10\1\11\1\12\1\13\1\14\1\1\1\15\1\16"+
                    "\1\1\1\17\1\15\1\20\7\4\1\21\2\4\1\22"+
                    "\16\4\1\0\1\23\1\24\1\25\1\0\1\26\2\0"+
                    "\1\27\1\0\7\4\1\30\11\4\1\31\1\21\1\4"+
                    "\1\32\10\4\1\33\1\11\1\26\4\0\1\34\1\35"+
                    "\12\4\1\36\14\4\1\37\1\40\1\4\1\0\3\4"+
                    "\1\41\3\4\1\42\1\43\3\4\1\44\6\4\1\45"+
                    "\6\4\1\46\1\47\4\4\1\50\1\4\1\51\1\52";

    private static int [] zzUnpackAction() {
        int [] result = new int[171];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\53\0\126\0\126\0\201\0\254\0\327\0\u0102"+
                    "\0\u012d\0\u0158\0\u0183\0\u01ae\0\126\0\u01d9\0\u0204\0\u022f"+
                    "\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387"+
                    "\0\u03b2\0\53\0\u03dd\0\u0408\0\u0433\0\53\0\u045e\0\u045e"+
                    "\0\u045e\0\u0489\0\53\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560"+
                    "\0\u058b\0\u05b6\0\126\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d"+
                    "\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5"+
                    "\0\u0810\0\u083b\0\u0866\0\u0891\0\u045e\0\53\0\53\0\53"+
                    "\0\u08bc\0\u08e7\0\u0912\0\u093d\0\53\0\u0968\0\u0993\0\u09be"+
                    "\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\126\0\u0ac0\0\u0aeb"+
                    "\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\126"+
                    "\0\u0c43\0\u0c6e\0\126\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45"+
                    "\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u08bc\0\53\0\u0e1c\0\u0e47"+
                    "\0\u0433\0\u0e72\0\126\0\126\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e"+
                    "\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\126\0\u104b"+
                    "\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d\0\u1178\0\u11a3"+
                    "\0\u11ce\0\u11f9\0\u1224\0\126\0\126\0\u124f\0\u127a\0\u12a5"+
                    "\0\u12d0\0\u12fb\0\126\0\u1326\0\u1351\0\u137c\0\126\0\126"+
                    "\0\u13a7\0\u13d2\0\u13fd\0\126\0\u1428\0\u1453\0\u147e\0\u14a9"+
                    "\0\u14d4\0\u14ff\0\126\0\u152a\0\u1555\0\u1580\0\u15ab\0\u15d6"+
                    "\0\u1601\0\126\0\126\0\u162c\0\u1657\0\u1682\0\u16ad\0\126"+
                    "\0\u16d8\0\126\0\126";

    private static int [] zzUnpackRowMap() {
        int [] result = new int[171];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int [] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int [] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
                    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
                    "\1\22\1\15\1\23\1\24\3\15\1\25\1\26\1\27"+
                    "\1\30\1\31\1\2\1\15\1\2\1\32\1\33\1\34"+
                    "\1\32\1\35\1\2\1\36\1\37\1\40\1\41\1\42"+
                    "\1\43\54\0\26\15\4\0\1\15\1\0\2\15\15\0"+
                    "\3\15\1\44\1\45\13\15\1\46\5\15\4\0\1\15"+
                    "\1\0\2\15\15\0\11\15\1\47\1\50\13\15\4\0"+
                    "\1\15\1\0\2\15\15\0\6\15\1\51\17\15\4\0"+
                    "\1\15\1\0\2\15\15\0\6\15\1\52\17\15\4\0"+
                    "\1\15\1\0\2\15\15\0\13\15\1\53\10\15\1\54"+
                    "\1\55\4\0\1\15\1\0\2\15\15\0\16\15\1\56"+
                    "\7\15\4\0\1\15\1\0\2\15\15\0\3\15\1\57"+
                    "\22\15\4\0\1\15\1\0\2\15\15\0\6\15\1\60"+
                    "\17\15\4\0\1\15\1\0\2\15\15\0\20\15\1\61"+
                    "\5\15\4\0\1\15\1\0\2\15\15\0\1\15\1\62"+
                    "\1\15\1\63\13\15\1\64\6\15\4\0\1\15\1\0"+
                    "\2\15\15\0\1\15\1\65\14\15\1\66\7\15\4\0"+
                    "\1\15\1\0\2\15\15\0\13\15\1\67\1\15\1\70"+
                    "\10\15\4\0\1\15\1\0\2\15\15\0\3\15\1\71"+
                    "\2\15\1\72\17\15\4\0\1\15\1\0\2\15\15\0"+
                    "\1\15\1\73\24\15\4\0\1\15\1\0\2\15\15\0"+
                    "\16\15\1\74\7\15\4\0\1\15\1\0\2\15\43\0"+
                    "\1\75\1\76\52\0\1\77\52\0\1\100\1\75\51\0"+
                    "\1\36\2\0\1\31\52\0\1\31\1\101\46\0\1\36"+
                    "\7\0\1\102\1\103\41\0\1\36\10\0\1\75\11\0"+
                    "\43\104\1\105\1\106\6\104\30\0\1\36\73\0\1\36"+
                    "\2\0\4\15\1\107\21\15\4\0\1\15\1\0\2\15"+
                    "\15\0\1\15\1\110\14\15\1\111\7\15\4\0\1\15"+
                    "\1\0\2\15\15\0\21\15\1\112\4\15\4\0\1\15"+
                    "\1\0\2\15\15\0\4\15\1\113\21\15\4\0\1\15"+
                    "\1\0\2\15\15\0\3\15\1\114\22\15\4\0\1\15"+
                    "\1\0\2\15\15\0\12\15\1\115\1\15\1\116\11\15"+
                    "\4\0\1\15\1\0\2\15\15\0\7\15\1\117\2\15"+
                    "\1\120\7\15\1\121\3\15\4\0\1\15\1\0\2\15"+
                    "\15\0\14\15\1\122\11\15\4\0\1\15\1\0\2\15"+
                    "\15\0\6\15\1\123\17\15\4\0\1\15\1\0\2\15"+
                    "\15\0\13\15\1\124\12\15\4\0\1\15\1\0\2\15"+
                    "\15\0\7\15\1\125\4\15\1\126\11\15\4\0\1\15"+
                    "\1\0\2\15\15\0\4\15\1\127\21\15\4\0\1\15"+
                    "\1\0\2\15\15\0\15\15\1\130\10\15\4\0\1\15"+
                    "\1\0\2\15\15\0\13\15\1\131\1\15\1\132\10\15"+
                    "\4\0\1\15\1\0\2\15\15\0\5\15\1\133\1\15"+
                    "\1\132\16\15\4\0\1\15\1\0\2\15\15\0\3\15"+
                    "\1\134\22\15\4\0\1\15\1\0\2\15\15\0\5\15"+
                    "\1\53\1\15\1\135\16\15\4\0\1\15\1\0\2\15"+
                    "\15\0\6\15\1\136\17\15\4\0\1\15\1\0\2\15"+
                    "\15\0\11\15\1\137\14\15\4\0\1\15\1\0\2\15"+
                    "\15\0\2\15\1\140\23\15\4\0\1\15\1\0\2\15"+
                    "\15\0\13\15\1\141\12\15\4\0\1\15\1\0\2\15"+
                    "\15\0\6\15\1\142\17\15\4\0\1\15\1\0\2\15"+
                    "\15\0\1\15\1\143\24\15\4\0\1\15\1\0\2\15"+
                    "\15\0\13\15\1\144\12\15\4\0\1\15\1\0\2\15"+
                    "\47\0\1\145\17\0\37\102\1\146\13\102\41\147\1\150"+
                    "\11\147\43\151\1\105\1\152\52\151\1\152\6\151\1\0"+
                    "\3\15\1\153\22\15\4\0\1\15\1\0\2\15\15\0"+
                    "\14\15\1\154\11\15\4\0\1\15\1\0\2\15\15\0"+
                    "\12\15\1\155\13\15\4\0\1\15\1\0\2\15\15\0"+
                    "\17\15\1\156\6\15\4\0\1\15\1\0\2\15\15\0"+
                    "\3\15\1\157\22\15\4\0\1\15\1\0\2\15\15\0"+
                    "\13\15\1\160\12\15\4\0\1\15\1\0\2\15\15\0"+
                    "\16\15\1\161\7\15\4\0\1\15\1\0\2\15\15\0"+
                    "\5\15\1\162\20\15\4\0\1\15\1\0\2\15\15\0"+
                    "\1\15\1\163\24\15\4\0\1\15\1\0\2\15\15\0"+
                    "\6\15\1\164\17\15\4\0\1\15\1\0\2\15\15\0"+
                    "\6\15\1\165\17\15\4\0\1\15\1\0\2\15\15\0"+
                    "\14\15\1\166\11\15\4\0\1\15\1\0\2\15\15\0"+
                    "\1\15\1\167\24\15\4\0\1\15\1\0\2\15\15\0"+
                    "\11\15\1\170\14\15\4\0\1\15\1\0\2\15\15\0"+
                    "\6\15\1\171\17\15\4\0\1\15\1\0\2\15\15\0"+
                    "\15\15\1\172\10\15\4\0\1\15\1\0\2\15\15\0"+
                    "\7\15\1\173\1\15\1\174\14\15\4\0\1\15\1\0"+
                    "\2\15\15\0\1\15\1\53\24\15\4\0\1\15\1\0"+
                    "\2\15\15\0\7\15\1\175\16\15\4\0\1\15\1\0"+
                    "\2\15\15\0\11\15\1\176\14\15\4\0\1\15\1\0"+
                    "\2\15\15\0\13\15\1\177\12\15\4\0\1\15\1\0"+
                    "\2\15\15\0\6\15\1\200\17\15\4\0\1\15\1\0"+
                    "\2\15\15\0\1\15\1\201\2\15\1\202\21\15\4\0"+
                    "\1\15\1\0\2\15\15\0\23\15\1\203\2\15\4\0"+
                    "\1\15\1\0\2\15\15\0\4\15\1\204\21\15\4\0"+
                    "\1\15\1\0\2\15\15\0\17\15\1\205\6\15\4\0"+
                    "\1\15\1\0\2\15\15\0\3\15\1\206\22\15\4\0"+
                    "\1\15\1\0\2\15\14\0\41\147\1\207\11\147\40\0"+
                    "\1\146\1\150\11\0\43\104\1\0\1\106\6\104\1\0"+
                    "\3\15\1\210\22\15\4\0\1\15\1\0\2\15\15\0"+
                    "\16\15\1\211\7\15\4\0\1\15\1\0\2\15\15\0"+
                    "\2\15\1\203\23\15\4\0\1\15\1\0\2\15\15\0"+
                    "\14\15\1\212\11\15\4\0\1\15\1\0\2\15\15\0"+
                    "\7\15\1\203\16\15\4\0\1\15\1\0\2\15\15\0"+
                    "\6\15\1\213\17\15\4\0\1\15\1\0\2\15\15\0"+
                    "\17\15\1\214\6\15\4\0\1\15\1\0\2\15\15\0"+
                    "\14\15\1\215\11\15\4\0\1\15\1\0\2\15\15\0"+
                    "\2\15\1\215\23\15\4\0\1\15\1\0\2\15\15\0"+
                    "\20\15\1\216\5\15\4\0\1\15\1\0\2\15\15\0"+
                    "\3\15\1\217\22\15\4\0\1\15\1\0\2\15\15\0"+
                    "\4\15\1\220\21\15\4\0\1\15\1\0\2\15\15\0"+
                    "\16\15\1\221\7\15\4\0\1\15\1\0\2\15\15\0"+
                    "\11\15\1\222\14\15\4\0\1\15\1\0\2\15\15\0"+
                    "\16\15\1\223\7\15\4\0\1\15\1\0\2\15\15\0"+
                    "\6\15\1\224\17\15\4\0\1\15\1\0\2\15\15\0"+
                    "\4\15\1\203\21\15\4\0\1\15\1\0\2\15\15\0"+
                    "\11\15\1\225\14\15\4\0\1\15\1\0\2\15\15\0"+
                    "\13\15\1\216\12\15\4\0\1\15\1\0\2\15\15\0"+
                    "\4\15\1\216\21\15\4\0\1\15\1\0\2\15\15\0"+
                    "\16\15\1\226\7\15\4\0\1\15\1\0\2\15\15\0"+
                    "\3\15\1\227\22\15\4\0\1\15\1\0\2\15\15\0"+
                    "\17\15\1\230\6\15\4\0\1\15\1\0\2\15\14\0"+
                    "\40\147\1\146\1\207\11\147\1\0\5\15\1\231\20\15"+
                    "\4\0\1\15\1\0\2\15\15\0\14\15\1\232\11\15"+
                    "\4\0\1\15\1\0\2\15\15\0\6\15\1\233\17\15"+
                    "\4\0\1\15\1\0\2\15\15\0\12\15\1\234\13\15"+
                    "\4\0\1\15\1\0\2\15\15\0\11\15\1\132\14\15"+
                    "\4\0\1\15\1\0\2\15\15\0\11\15\1\203\14\15"+
                    "\4\0\1\15\1\0\2\15\15\0\13\15\1\203\12\15"+
                    "\4\0\1\15\1\0\2\15\15\0\3\15\1\235\22\15"+
                    "\4\0\1\15\1\0\2\15\15\0\13\15\1\236\12\15"+
                    "\4\0\1\15\1\0\2\15\15\0\4\15\1\237\21\15"+
                    "\4\0\1\15\1\0\2\15\15\0\15\15\1\240\10\15"+
                    "\4\0\1\15\1\0\2\15\15\0\4\15\1\53\21\15"+
                    "\4\0\1\15\1\0\2\15\15\0\15\15\1\241\10\15"+
                    "\4\0\1\15\1\0\2\15\15\0\1\15\1\242\24\15"+
                    "\4\0\1\15\1\0\2\15\15\0\1\15\1\243\24\15"+
                    "\4\0\1\15\1\0\2\15\15\0\6\15\1\244\17\15"+
                    "\4\0\1\15\1\0\2\15\15\0\13\15\1\245\12\15"+
                    "\4\0\1\15\1\0\2\15\15\0\20\15\1\203\5\15"+
                    "\4\0\1\15\1\0\2\15\15\0\3\15\1\246\22\15"+
                    "\4\0\1\15\1\0\2\15\15\0\16\15\1\247\7\15"+
                    "\4\0\1\15\1\0\2\15\15\0\6\15\1\235\17\15"+
                    "\4\0\1\15\1\0\2\15\15\0\4\15\1\250\21\15"+
                    "\4\0\1\15\1\0\2\15\15\0\11\15\1\251\14\15"+
                    "\4\0\1\15\1\0\2\15\15\0\7\15\1\252\16\15"+
                    "\4\0\1\15\1\0\2\15\15\0\4\15\1\253\21\15"+
                    "\4\0\1\15\1\0\2\15\15\0\6\15\1\53\17\15"+
                    "\4\0\1\15\1\0\2\15\14\0";

    private static int [] zzUnpackTrans() {
        int [] result = new int[5891];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\27\1\1\11\3\1\1\11\4\1\1\11"+
                    "\31\1\1\0\3\11\1\0\1\1\2\0\1\11\1\0"+
                    "\37\1\1\11\4\0\34\1\1\0\44\1";

    private static int [] zzUnpackAttribute() {
        int [] result = new int[171];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** number of newlines encountered up to the start of the matched text */
    private int yyline;

    /** the number of characters up to the start of the matched text */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** denotes if the user-EOF-code has already been executed */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;


    /**
     * Creates a new scanner
     *
     * @param   in  the java.io.Reader to read input from.
     */
    Lexer(java.io.Reader in) {
        yybegin(YYINITIAL);
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed   the packed character translation table
     * @return         the unpacked character translation table
     */
    private static char [] zzUnpackCMap(String packed) {
        char [] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 214) {
            int  count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead-zzStartRead);

      /* translate stored positions */
            zzEndRead-= zzStartRead;
            zzCurrentPos-= zzStartRead;
            zzMarkedPos-= zzStartRead;
            zzStartRead = 0;
        }

    /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length*2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

    /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
      /* potentially more input available */
            return false;
        }

    /* numRead < 0 ==> end of stream */
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     *
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader   the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL  = true;
        zzAtEOF  = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead+pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos-zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param   errorCode  the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        }
        catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number)  {
        if ( number > yylength() )
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return      the next token
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    public int yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char [] zzBufferL = zzBuffer;
        char [] zzCMapL = ZZ_CMAP;

        int [] zzTransL = ZZ_TRANS;
        int [] zzRowMapL = ZZ_ROWMAP;
        int [] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead  ;
                 zzCurrentPosL < zzMarkedPosL ;
                 zzCurrentPosL += zzCharCount ) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ( (zzAttributes & 1) == 1 ) {
                zzAction = zzState;
            }


            zzForAction: {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    }
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    }
                    else {
                        // store back cached positions
                        zzCurrentPos  = zzCurrentPosL;
                        zzMarkedPos   = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL  = zzCurrentPos;
                        zzMarkedPosL   = zzMarkedPos;
                        zzBufferL      = zzBuffer;
                        zzEndReadL     = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        }
                        else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ( (zzAttributes & 1) == 1 ) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ( (zzAttributes & 8) == 8 ) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return YYEOF;
            }
            else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1:
                    { throw new Error("Illegal character <"
                            + yytext()+">");
                    }
                    case 43: break;
                    case 2:
                    { System.out.println(yytext() + "\t es el operador logico and");
                    }
                    case 44: break;
                    case 3:
                    { System.out.println(yytext() + "\t es el operador logico or");
                    }
                    case 45: break;
                    case 4:
                    { System.out.println(yytext() + "\t - nombre de variable");
                    }
                    case 46: break;
                    case 5:
                    { System.out.println(yytext() + "\t es el operador 'menor que'");
                    }
                    case 47: break;
                    case 6:
                    { System.out.println(yytext() + "\t es el operador de igualdad");
                    }
                    case 48: break;
                    case 7:
                    { System.out.println(yytext() + "\t es el operador 'mayor que'");
                    }
                    case 49: break;
                    case 8:
                    { System.out.println(yytext() + "\t es el operador de resta");
                    }
                    case 50: break;
                    case 9:
                    { System.out.println(yytext() + "\t - es un numero");
                    }
                    case 51: break;
                    case 10:
                    { /* no hacer nada */
                    }
                    case 52: break;
                    case 11:
                    { System.out.println(yytext() + "\t - operador de division");
                    }
                    case 53: break;
                    case 12:
                    { System.out.println(yytext() + "\t es el operador de multiplicacion");
                    }
                    case 54: break;
                    case 13:
                    { System.out.println(yytext() + "\t - es un delimitador");
                    }
                    case 55: break;
                    case 14:
                    { System.out.println(yytext() + "\t - operador de suma");
                    }
                    case 56: break;
                    case 15:
                    { System.out.println(yytext() + "\t es el operador de potencia");
                    }
                    case 57: break;
                    case 16:
                    { System.out.println(yytext() + "\t - operador distinto");
                    }
                    case 58: break;
                    case 17:
                    { System.out.println(yytext() + "\t - palabra reservada");
                    }
                    case 59: break;
                    case 18:
                    { System.out.println(yytext() + "\t es la condicional if");
                    }
                    case 60: break;
                    case 19:
                    { System.out.println(yytext() + "\t - operador menor o igual");
                    }
                    case 61: break;
                    case 20:
                    { System.out.println(yytext() + "\t - operador de comparacion de igualdad");
                    }
                    case 62: break;
                    case 21:
                    { System.out.println(yytext() + "\t - operador mayor o igual");
                    }
                    case 63: break;
                    case 22:
                    { System.out.println(yytext() + "\t - es un comentario");
                    }
                    case 64: break;
                    case 23:
                    { System.out.println(yytext() + "\t - es un literal de cadena");
                    }
                    case 65: break;
                    case 24:
                    { System.out.println(yytext() + "\t es la palabra reservada para indicar una recursi√≥n");
                    }
                    case 66: break;
                    case 25:
                    { System.out.println(yytext() + "\t es el tipo de dato generico numerico");
                    }
                    case 67: break;
                    case 26:
                    { System.out.println(yytext() + "\t es el tipo de dato generico para cadenas de caracteres");
                    }
                    case 68: break;
                    case 27:
                    { System.out.println("El programa va a terminar");
                        return 0;
                    }
                    case 69: break;
                    case 28:
                    { System.out.println(yytext() + "\t es el ciclo for");
                    }
                    case 70: break;
                    case 29:
                    { System.out.println(yytext() + "\t es una funcion que no devuelve o void");
                    }
                    case 71: break;
                    case 30:
                    { System.out.println(yytext() + "\t es el acompa√±ante del if llamado else");
                    }
                    case 72: break;
                    case 31:
                    { System.out.println(yytext() + "\t es para leer lo que ponga el usuario en consola");
                    }
                    case 73: break;
                    case 32:
                    { System.out.println(yytext() + "\t es el tipo de dato booleano");
                    }
                    case 74: break;
                    case 33:
                    { System.out.println(yytext() + "\t es un acompa√±ante para el ciclo for que inicializa la variable iteradora");
                    }
                    case 75: break;
                    case 34:
                    { System.out.println(yytext() + "\t es un acompa√±ante para el ciclo for que establece la condicion de salida");
                    }
                    case 76: break;
                    case 35:
                    { System.out.println(yytext() + "\t es el acompa√±ante do del ciclo while");
                    }
                    case 77: break;
                    case 36:
                    { System.out.println(yytext() + "\t es una clase");
                    }
                    case 78: break;
                    case 37:
                    { System.out.println(yytext() + "\t es un acompa√±ante para el ciclo for que indica cuanto cambia el iterador");
                    }
                    case 79: break;
                    case 38:
                    { System.out.println(yytext() + "\t es seguridad privada");
                    }
                    case 80: break;
                    case 39:
                    { System.out.println(yytext() + "\t es seguridad publica");
                    }
                    case 81: break;
                    case 40:
                    { System.out.println(yytext() + "\t es el return");
                    }
                    case 82: break;
                    case 41:
                    { System.out.println(yytext() + "\t es el ciclo while");
                    }
                    case 83: break;
                    case 42:
                    { System.out.println(yytext() + "\t es para imprimir en consola");
                    }
                    case 84: break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    //--------------------------------------------------------INICIO DE INTERVENCI√ìN
    //Intervenci√≥n para no tomar como entrada los par√°metros del programa
    System.out.println("Escriba la direcci√≥n del archivo que desea analizar:");
    Scanner scan = new Scanner(System.in);
    argv = scan.nextLine().split(" ");
    //--------------------------------------------------------FIN DE INTERVENCI√ìN

    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid?
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {

          //String path = Lexer.class.getResource(argv[i]).getPath();
          //java.io.FileInputStream stream = new java.io.FileInputStream(path);

          //Se utiliza getResource para como root la carpeta Resources como Root
          java.io.Reader reader = new java.io.InputStreamReader(Lexer.class.getResourceAsStream(argv[i]), encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"" + e.getMessage());
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
