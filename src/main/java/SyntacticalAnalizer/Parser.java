
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package SyntacticalAnalizer;

import java_cup.runtime.*;
import java.io.FileReader;
import LexicalAnalizer.Lexer;
import java.util.Scanner;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\165\000\002\002\004\000\002\002\003\000\002\026" +
    "\004\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\030\004\000\002\030\004\000" +
    "\002\030\004\000\002\030\002\000\002\031\006\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\003\000\002\032\003\000\002\032\005" +
    "\000\002\033\006\000\002\034\005\000\002\034\003\000" +
    "\002\034\003\000\002\034\005\000\002\035\006\000\002" +
    "\036\005\000\002\036\005\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\005\000\002\036\007\000\002\036\007\000" +
    "\002\036\005\000\002\036\005\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\004\010" +
    "\000\002\011\013\000\002\011\012\000\002\024\003\000" +
    "\002\024\003\000\002\024\002\000\002\014\006\000\002" +
    "\014\004\000\002\016\003\000\002\016\005\000\002\025" +
    "\003\000\002\025\003\000\002\005\004\000\002\005\004" +
    "\000\002\005\002\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\002\000\002" +
    "\012\004\000\002\012\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\012\002\ufff7\022\006\023\010\051\005\001" +
    "\002\000\012\002\ufff7\022\006\023\010\051\005\001\002" +
    "\000\004\106\120\001\002\000\004\106\106\001\002\000" +
    "\004\002\105\001\002\000\004\106\016\001\002\000\012" +
    "\002\ufff7\022\006\023\010\051\005\001\002\000\012\002" +
    "\ufff7\022\006\023\010\051\005\001\002\000\004\002\000" +
    "\001\002\000\004\002\ufffa\001\002\000\004\002\ufff8\001" +
    "\002\000\004\066\017\001\002\000\016\023\020\031\027" +
    "\032\022\100\021\105\026\106\025\001\002\000\020\002" +
    "\uffe6\004\uffe6\005\uffe6\022\uffe6\023\uffe6\051\uffe6\101\uffe6" +
    "\001\002\000\016\023\020\031\071\032\065\100\021\105" +
    "\026\106\070\001\002\000\020\002\uffe2\004\uffe2\005\uffe2" +
    "\022\uffe2\023\uffe2\051\uffe2\101\uffe2\001\002\000\016\002" +
    "\uffe9\004\062\005\061\022\uffe9\023\uffe9\051\uffe9\001\002" +
    "\000\026\060\034\061\036\062\031\063\032\064\041\065" +
    "\037\067\033\070\042\071\035\072\040\001\002\000\044" +
    "\002\uffe5\004\uffe5\005\uffe5\022\uffe5\023\uffe5\051\uffe5\060" +
    "\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\067\ufff0" +
    "\070\ufff0\071\ufff0\072\ufff0\101\uffe5\001\002\000\044\002" +
    "\ufff1\004\ufff1\005\ufff1\022\ufff1\023\ufff1\051\ufff1\060\ufff1" +
    "\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\067\ufff1\070" +
    "\ufff1\071\ufff1\072\ufff1\101\ufff1\001\002\000\020\002\uffe3" +
    "\004\uffe3\005\uffe3\022\uffe3\023\uffe3\051\uffe3\101\uffe3\001" +
    "\002\000\020\002\uffe4\004\uffe4\005\uffe4\022\uffe4\023\uffe4" +
    "\051\uffe4\101\uffe4\001\002\000\010\100\045\105\026\106" +
    "\043\001\002\000\010\100\045\105\026\106\043\001\002" +
    "\000\010\100\045\105\026\106\043\001\002\000\010\100" +
    "\045\105\026\106\043\001\002\000\010\100\045\105\026" +
    "\106\043\001\002\000\010\100\045\105\026\106\043\001" +
    "\002\000\010\100\045\105\026\106\043\001\002\000\010" +
    "\100\045\105\026\106\043\001\002\000\010\100\045\105" +
    "\026\106\043\001\002\000\010\100\045\105\026\106\043" +
    "\001\002\000\044\002\ufff0\004\ufff0\005\ufff0\022\ufff0\023" +
    "\ufff0\051\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0" +
    "\065\ufff0\067\ufff0\070\ufff0\071\ufff0\072\ufff0\101\ufff0\001" +
    "\002\000\044\002\ufff4\004\ufff4\005\ufff4\022\ufff4\023\ufff4" +
    "\051\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065" +
    "\ufff4\067\ufff4\070\ufff4\071\035\072\040\101\ufff4\001\002" +
    "\000\010\100\045\105\026\106\043\001\002\000\014\067" +
    "\033\070\042\071\035\072\040\101\047\001\002\000\044" +
    "\002\uffef\004\uffef\005\uffef\022\uffef\023\uffef\051\uffef\060" +
    "\uffef\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef\067\uffef" +
    "\070\uffef\071\uffef\072\uffef\101\uffef\001\002\000\030\002" +
    "\uffd8\004\uffd8\005\uffd8\022\uffd8\023\uffd8\051\uffd8\067\033" +
    "\070\042\071\035\072\040\101\uffd8\001\002\000\044\002" +
    "\ufff2\004\ufff2\005\ufff2\022\ufff2\023\ufff2\051\ufff2\060\ufff2" +
    "\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\067\ufff2\070" +
    "\ufff2\071\ufff2\072\ufff2\101\ufff2\001\002\000\030\002\uffd7" +
    "\004\uffd7\005\uffd7\022\uffd7\023\uffd7\051\uffd7\067\033\070" +
    "\042\071\035\072\040\101\uffd7\001\002\000\030\002\uffdc" +
    "\004\uffdc\005\uffdc\022\uffdc\023\uffdc\051\uffdc\067\033\070" +
    "\042\071\035\072\040\101\uffdc\001\002\000\044\002\ufff3" +
    "\004\ufff3\005\ufff3\022\ufff3\023\ufff3\051\ufff3\060\ufff3\061" +
    "\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\067\ufff3\070\ufff3" +
    "\071\ufff3\072\ufff3\101\ufff3\001\002\000\030\002\uffda\004" +
    "\uffda\005\uffda\022\uffda\023\uffda\051\uffda\067\033\070\042" +
    "\071\035\072\040\101\uffda\001\002\000\044\002\ufff5\004" +
    "\ufff5\005\ufff5\022\ufff5\023\ufff5\051\ufff5\060\ufff5\061\ufff5" +
    "\062\ufff5\063\ufff5\064\ufff5\065\ufff5\067\ufff5\070\ufff5\071" +
    "\035\072\040\101\ufff5\001\002\000\030\002\uffdb\004\uffdb" +
    "\005\uffdb\022\uffdb\023\uffdb\051\uffdb\067\033\070\042\071" +
    "\035\072\040\101\uffdb\001\002\000\030\002\uffd9\004\uffd9" +
    "\005\uffd9\022\uffd9\023\uffd9\051\uffd9\067\033\070\042\071" +
    "\035\072\040\101\uffd9\001\002\000\016\023\020\031\027" +
    "\032\022\100\021\105\026\106\025\001\002\000\016\023" +
    "\020\031\027\032\022\100\021\105\026\106\025\001\002" +
    "\000\020\002\uffe8\004\uffe8\005\uffe8\022\uffe8\023\uffe8\051" +
    "\uffe8\101\uffe8\001\002\000\020\002\uffe7\004\uffe7\005\uffe7" +
    "\022\uffe7\023\uffe7\051\uffe7\101\uffe7\001\002\000\010\004" +
    "\uffe2\005\uffe2\101\104\001\002\000\006\004\077\005\076" +
    "\001\002\000\030\060\034\061\036\062\031\063\032\064" +
    "\041\065\037\067\033\070\042\071\035\072\040\101\047" +
    "\001\002\000\034\004\uffe5\005\uffe5\060\ufff0\061\ufff0\062" +
    "\ufff0\063\ufff0\064\ufff0\065\ufff0\067\ufff0\070\ufff0\071\ufff0" +
    "\072\ufff0\101\075\001\002\000\010\004\uffe3\005\uffe3\101" +
    "\074\001\002\000\010\004\uffe4\005\uffe4\101\073\001\002" +
    "\000\020\002\uffd6\004\uffd6\005\uffd6\022\uffd6\023\uffd6\051" +
    "\uffd6\101\uffd6\001\002\000\020\002\uffde\004\uffde\005\uffde" +
    "\022\uffde\023\uffde\051\uffde\101\uffde\001\002\000\020\002" +
    "\uffe1\004\uffe1\005\uffe1\022\uffe1\023\uffe1\051\uffe1\101\uffe1" +
    "\001\002\000\016\023\020\031\027\032\022\100\021\105" +
    "\026\106\025\001\002\000\016\023\020\031\027\032\022" +
    "\100\021\105\026\106\025\001\002\000\010\004\uffe8\005" +
    "\uffe8\101\101\001\002\000\020\002\uffe0\004\uffe0\005\uffe0" +
    "\022\uffe0\023\uffe0\051\uffe0\101\uffe0\001\002\000\010\004" +
    "\uffe7\005\uffe7\101\103\001\002\000\020\002\uffdf\004\uffdf" +
    "\005\uffdf\022\uffdf\023\uffdf\051\uffdf\101\uffdf\001\002\000" +
    "\020\002\uffdd\004\uffdd\005\uffdd\022\uffdd\023\uffdd\051\uffdd" +
    "\101\uffdd\001\002\000\004\002\001\001\002\000\004\066" +
    "\107\001\002\000\010\100\112\106\110\110\113\001\002" +
    "\000\016\002\uffeb\022\uffeb\023\uffeb\051\uffeb\067\uffeb\101" +
    "\uffeb\001\002\000\014\002\uffee\022\uffee\023\uffee\051\uffee" +
    "\067\115\001\002\000\010\100\112\106\110\110\113\001" +
    "\002\000\016\002\uffec\022\uffec\023\uffec\051\uffec\067\uffec" +
    "\101\uffec\001\002\000\006\067\115\101\116\001\002\000" +
    "\010\100\112\106\110\110\113\001\002\000\016\002\uffea" +
    "\022\uffea\023\uffea\051\uffea\067\uffea\101\uffea\001\002\000" +
    "\016\002\uffed\022\uffed\023\uffed\051\uffed\067\uffed\101\uffed" +
    "\001\002\000\004\066\121\001\002\000\010\100\045\105" +
    "\026\106\043\001\002\000\022\002\ufff6\022\ufff6\023\ufff6" +
    "\051\ufff6\067\033\070\042\071\035\072\040\001\002\000" +
    "\004\002\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\014\002\006\030\012\031\011\033\003\035" +
    "\010\001\001\000\012\030\122\031\011\033\003\035\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\030\014\031\011\033\003" +
    "\035\010\001\001\000\012\030\013\031\011\033\003\035" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\032\023\036\022\037" +
    "\027\001\001\000\002\001\001\000\010\032\066\036\065" +
    "\037\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\057\001\001\000" +
    "\004\032\056\001\001\000\004\032\055\001\001\000\004" +
    "\032\054\001\001\000\004\032\053\001\001\000\004\032" +
    "\052\001\001\000\004\032\051\001\001\000\004\032\050" +
    "\001\001\000\004\032\047\001\001\000\004\032\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\023\036\063" +
    "\037\027\001\001\000\010\032\023\036\062\037\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\032\023\036\101\037" +
    "\027\001\001\000\010\032\023\036\077\037\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\121" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof Symbol) {
            Symbol s = ((Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
        //--------------------------------------------------------INICIO DE INTERVENCIÓN
            //Intervención para no tomar como entrada los parámetros del programa
            System.out.println("Escriba la dirección del archivo que desea analizar:");
            Scanner scan = new Scanner(System.in);
            args = scan.nextLine().split(" ");
            //--------------------------------------------------------FIN DE INTERVENCIÓN

            if (args.length == 0) {
              System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
            }
            else {
              int firstFilePos = 0;
              String encodingName = "UTF-8";
              if (args[0].equals("--encoding")) {
                firstFilePos = 2;
                encodingName = args[1];
                try {
                  java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid?
                } catch (Exception e) {
                  System.out.println("Invalid encoding '" + encodingName + "'");
                  return;
                }
              }
              for (int i = firstFilePos; i < args.length; i++) {
                Lexer lexer = null;
                try {

                  //String path = Lexer.class.getResource(args[i]).getPath();
                  //java.io.FileInputStream stream = new java.io.FileInputStream(path);

                  //Se utiliza getResource para como root la carpeta Resources como Root
                    java.io.Reader reader = new java.io.InputStreamReader(Parser.class.getResourceAsStream("../" + args[i]), encodingName);
                    lexer = new Lexer(reader);
                                        //--------------------------------------------------------Aplicacion de PARSER
                                      Parser asin = new Parser(lexer);
                                        Object result = asin.parse().value;
                }
                catch (java.io.FileNotFoundException e) {
                  System.out.println("File not found : \""+args[i]+"\"" + e.getMessage());
                }
                catch (java.io.IOException e) {
                  System.out.println("IO error scanning file \""+args[i]+"\"");
                  System.out.println(e);
                }
                catch (Exception e) {
                  System.out.println("Unexpected exception:");
                  e.printStackTrace();
                }
              }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= c_asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // c_declaracion ::= c_tipo VAR 
            {
              Object RESULT =null;
		int vleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_declaracion",20, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // c_tipo ::= CAD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_tipo",21, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // c_tipo ::= NUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_tipo",21, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // c_tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_tipo",21, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // c_tipo ::= VAR 
            {
              Object RESULT =null;
		int tipo_no_primitivoleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int tipo_no_primitivoright = ((Symbol)CUP$Parser$stack.peek()).right;
		String tipo_no_primitivo = (String)((Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_tipo",21, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // c_asignacion ::= c_asignacion_numerica c_asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_asignacion",22, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // c_asignacion ::= c_asignacion_cadena c_asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_asignacion",22, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // c_asignacion ::= c_asignacion_booleana c_asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_asignacion",22, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // c_asignacion ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_asignacion",22, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // c_asignacion_numerica ::= NUM VAR ASIGNACION c_expresion_numerica 
            {
              Object RESULT =null;
		int vleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_asignacion_numerica",23, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // c_expresion_numerica ::= c_expresion_numerica SUMA c_expresion_numerica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",24, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // c_expresion_numerica ::= c_expresion_numerica RESTA c_expresion_numerica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",24, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // c_expresion_numerica ::= c_expresion_numerica MULTIPLICACION c_expresion_numerica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",24, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // c_expresion_numerica ::= c_expresion_numerica DIVISION c_expresion_numerica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",24, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // c_expresion_numerica ::= NUMERO 
            {
              Object RESULT =null;
		int vleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((Symbol)CUP$Parser$stack.peek()).right;
		Double v = (Double)((Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",24, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // c_expresion_numerica ::= VAR 
            {
              Object RESULT =null;
		int vleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",24, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // c_expresion_numerica ::= PARENTESISABIERTO c_expresion_numerica PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",24, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // c_asignacion_cadena ::= CAD VAR ASIGNACION c_expresion_cadena 
            {
              Object RESULT =null;
		int vleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_asignacion_cadena",25, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // c_expresion_cadena ::= c_expresion_cadena SUMA c_expresion_cadena 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_cadena",26, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // c_expresion_cadena ::= CADENA 
            {
              Object RESULT =null;
		int vleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_cadena",26, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // c_expresion_cadena ::= VAR 
            {
              Object RESULT =null;
		int vleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_cadena",26, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // c_expresion_cadena ::= PARENTESISABIERTO c_expresion_cadena PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_cadena",26, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // c_asignacion_booleana ::= BOOL VAR ASIGNACION c_expresion_booleana 
            {
              Object RESULT =null;
		int Vleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int Vright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String V = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_asignacion_booleana",27, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // c_expresion_booleana ::= c_expresion_booleana Y c_expresion_booleana 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",28, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // c_expresion_booleana ::= c_expresion_booleana O c_expresion_booleana 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",28, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // c_expresion_booleana ::= BOOL 
            {
              Object RESULT =null;
		int vleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",28, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // c_expresion_booleana ::= VAR 
            {
              Object RESULT =null;
		int vleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",28, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // c_expresion_booleana ::= c_expresion_booleana_numerica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",28, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // c_expresion_booleana ::= VERDADERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",28, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // c_expresion_booleana ::= FALSO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",28, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // c_expresion_booleana ::= PARENTESISABIERTO VAR PARENTESISCERRADO 
            {
              Object RESULT =null;
		int vleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",28, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // c_expresion_booleana ::= PARENTESISABIERTO c_expresion_booleana Y c_expresion_booleana PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",28, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // c_expresion_booleana ::= PARENTESISABIERTO c_expresion_booleana O c_expresion_booleana PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",28, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // c_expresion_booleana ::= PARENTESISABIERTO VERDADERO PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",28, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // c_expresion_booleana ::= PARENTESISABIERTO FALSO PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",28, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // c_expresion_booleana_numerica ::= c_expresion_numerica MAYORQUE c_expresion_numerica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana_numerica",29, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // c_expresion_booleana_numerica ::= c_expresion_numerica MAYOROIGUAL c_expresion_numerica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana_numerica",29, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // c_expresion_booleana_numerica ::= c_expresion_numerica MENORQUE c_expresion_numerica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana_numerica",29, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // c_expresion_booleana_numerica ::= c_expresion_numerica MENOROIGUAL c_expresion_numerica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana_numerica",29, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // c_expresion_booleana_numerica ::= c_expresion_numerica DISTINTO c_expresion_numerica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana_numerica",29, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // c_expresion_booleana_numerica ::= c_expresion_numerica IGUAL c_expresion_numerica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana_numerica",29, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // c_expresion_booleana_numerica ::= PARENTESISABIERTO c_expresion_booleana_numerica PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana_numerica",29, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // clase ::= visibilidad CLASE VAR LLAVEABIERTO cuerpo_clase LLAVECERRADO 
            {
              Object RESULT =null;
		int vleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 System.out.println("CLASE " + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",2, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // metodo ::= visibilidad tipo_metodo VAR PARENTESISABIERTO lista_parametros PARENTESISCERRADO LLAVEABIERTO lista_sentencias LLAVECERRADO 
            {
              Object RESULT =null;
		int vleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String v = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 System.out.println("METODO " + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",7, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // metodo ::= visibilidad tipo_metodo VAR PARENTESISABIERTO PARENTESISCERRADO LLAVEABIERTO lista_sentencias LLAVECERRADO 
            {
              Object RESULT =null;
		int vleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 System.out.println("METODO " + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",7, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // visibilidad ::= PUBLICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",18, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // visibilidad ::= PRIVADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",18, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // visibilidad ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibilidad",18, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // lista_parametros ::= c_tipo variable_arreglo COMA lista_parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",10, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lista_parametros ::= c_tipo variable_arreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",10, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variable_arreglo ::= VAR 
            {
              Object RESULT =null;
		int vleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_arreglo",12, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // variable_arreglo ::= VAR CORCHETEABIERTO CORCHETECERRADO 
            {
              Object RESULT =null;
		int vleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_arreglo",12, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo_metodo ::= PROC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_metodo",19, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo_metodo ::= c_tipo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_metodo",19, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cuerpo_clase ::= cuerpo_clase expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",3, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cuerpo_clase ::= cuerpo_clase metodo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",3, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cuerpo_clase ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",3, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lista_sentencias ::= ciclo_para lista_sentencias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",5, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lista_sentencias ::= ciclo_mientras lista_sentencias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",5, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lista_sentencias ::= condicion lista_sentencias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",5, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // lista_sentencias ::= expresion lista_sentencias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",5, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // lista_sentencias ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",5, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // lista_expresiones ::= expresion lista_expresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",8, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",8, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= Y 
            {
              Object RESULT =null;
		 System.out.println("Y");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= O 
            {
              Object RESULT =null;
		 System.out.println("O");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= SI 
            {
              Object RESULT =null;
		 System.out.println("SI");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= SINO 
            {
              Object RESULT =null;
		 System.out.println("SINO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= DEVOLVER 
            {
              Object RESULT =null;
		 System.out.println("DEVOLVER");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= REC 
            {
              Object RESULT =null;
		 System.out.println("REC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= IMPRIMIR 
            {
              Object RESULT =null;
		 System.out.println("IMPRIMIR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= LEER 
            {
              Object RESULT =null;
		 System.out.println("LEER");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= FIN 
            {
              Object RESULT =null;
		 System.out.println("FIN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= VERDADERO 
            {
              Object RESULT =null;
		 System.out.println("VERDADERO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= FALSO 
            {
              Object RESULT =null;
		 System.out.println("FALSO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= IMPORTAR 
            {
              Object RESULT =null;
		 System.out.println("IMPORTAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= INTENTAR 
            {
              Object RESULT =null;
		 System.out.println("INTENTAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= ATRAPAR 
            {
              Object RESULT =null;
		 System.out.println("ATRAPAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= LANZAR 
            {
              Object RESULT =null;
		 System.out.println("LANZAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= CONSTANTE 
            {
              Object RESULT =null;
		 System.out.println("CONSTANTE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= REVISAR 
            {
              Object RESULT =null;
		 System.out.println("REVISAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= CASO 
            {
              Object RESULT =null;
		 System.out.println("CASO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= COMO 
            {
              Object RESULT =null;
		 System.out.println("COMO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= DEFECTO 
            {
              Object RESULT =null;
		 System.out.println("DEFECTO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= CON 
            {
              Object RESULT =null;
		 System.out.println("CON");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= TERMINAR 
            {
              Object RESULT =null;
		 System.out.println("TERMINAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= EXCEPTO 
            {
              Object RESULT =null;
		 System.out.println("EXCEPTO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= MOSTRAR 
            {
              Object RESULT =null;
		 System.out.println("MOSTRAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= EJECUTAR 
            {
              Object RESULT =null;
		 System.out.println("EJECUTAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= EN 
            {
              Object RESULT =null;
		 System.out.println("EN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= CONTINUAR 
            {
              Object RESULT =null;
		 System.out.println("CONTINUAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= FINALMENTE 
            {
              Object RESULT =null;
		 System.out.println("FINALMENTE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= MEI 
            {
              Object RESULT =null;
		 System.out.println("MEI");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= MAI 
            {
              Object RESULT =null;
		 System.out.println("MAI");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= II 
            {
              Object RESULT =null;
		 System.out.println("II");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= MENORQUE 
            {
              Object RESULT =null;
		 System.out.println("MENORQUE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= MAYORQUE 
            {
              Object RESULT =null;
		 System.out.println("MAYORQUE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= MENOROIGUAL 
            {
              Object RESULT =null;
		 System.out.println("MENOROIGUAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion ::= MAYOROIGUAL 
            {
              Object RESULT =null;
		 System.out.println("MAYOROIGUAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion ::= DISTINTO 
            {
              Object RESULT =null;
		 System.out.println("DISTINTO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion ::= SUMA 
            {
              Object RESULT =null;
		 System.out.println("SUMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion ::= RESTA 
            {
              Object RESULT =null;
		 System.out.println("RESTA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion ::= MULTIPLICACION 
            {
              Object RESULT =null;
		 System.out.println("MUTIPLICACION");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresion ::= DIVISION 
            {
              Object RESULT =null;
		 System.out.println("DIVISION");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresion ::= MOD 
            {
              Object RESULT =null;
		 System.out.println("MOD");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresion ::= ASIGNACION 
            {
              Object RESULT =null;
		 System.out.println("ASIGNACION");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresion ::= IGUAL 
            {
              Object RESULT =null;
		 System.out.println("IGUAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresion ::= CORCHETEABIERTO 
            {
              Object RESULT =null;
		 System.out.println("CORCHETEABIERTO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresion ::= CORCHETECERRADO 
            {
              Object RESULT =null;
		 System.out.println("CORCHETECERRADO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresion ::= PARENTESISABIERTO 
            {
              Object RESULT =null;
		 System.out.println("PARENTESISABIERTO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresion ::= PARENTESISCERRADO 
            {
              Object RESULT =null;
		 System.out.println("PARENTESISCERRADO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresion ::= DOSPUNTOS 
            {
              Object RESULT =null;
		 System.out.println("DOSPUNTOS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresion ::= NUMERO 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((Symbol)CUP$Parser$stack.peek()).right;
		Double e = (Double)((Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("NUMERO " + e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expresion ::= DELIMITADOR 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("DELIMITADOR " + e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("CADENA" + e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
