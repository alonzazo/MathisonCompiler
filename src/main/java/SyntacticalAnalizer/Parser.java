
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package SyntacticalAnalizer;

import java_cup.runtime.*;
import java.io.FileReader;
import LexicalAnalizer.Lexer;
import java.util.Scanner;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.LinkedList;
import SemanticAnalizer.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\304\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\003\000\002\003\010" +
    "\000\002\003\007\000\002\005\013\000\002\005\012\000" +
    "\002\005\013\000\002\005\013\000\002\005\012\000\002" +
    "\005\012\000\002\005\013\000\002\005\012\000\002\005" +
    "\012\000\002\005\011\000\002\005\012\000\002\005\012" +
    "\000\002\005\011\000\002\005\011\000\002\005\012\000" +
    "\002\005\011\000\002\005\012\000\002\005\011\000\002" +
    "\005\012\000\002\005\012\000\002\005\011\000\002\005" +
    "\011\000\002\005\012\000\002\005\011\000\002\005\011" +
    "\000\002\005\010\000\002\005\011\000\002\005\011\000" +
    "\002\005\010\000\002\005\010\000\002\005\011\000\002" +
    "\005\010\000\002\010\003\000\002\010\003\000\002\006" +
    "\006\000\002\006\006\000\002\006\004\000\002\006\004" +
    "\000\002\006\005\000\002\006\005\000\002\007\003\000" +
    "\002\007\005\000\002\007\006\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\002\000\002\061" +
    "\003\000\002\042\006\000\002\043\003\000\002\043\005" +
    "\000\002\043\002\000\002\044\005\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\062\002\000\002\044\010\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\046\015\000\002\046\016\000\002\047\012\000" +
    "\002\047\012\000\002\050\011\000\002\051\004\000\002" +
    "\051\006\000\002\052\011\000\002\053\007\000\002\053" +
    "\006\000\002\054\004\000\002\054\004\000\002\054\004" +
    "\000\002\054\004\000\002\054\004\000\002\054\002\000" +
    "\002\013\004\000\002\013\004\000\002\013\006\000\002" +
    "\013\006\000\002\013\007\000\002\013\007\000\002\013" +
    "\004\000\002\014\003\000\002\014\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\016\005\000" +
    "\002\016\005\000\002\016\006\000\002\016\006\000\002" +
    "\040\003\000\002\040\003\000\002\041\003\000\002\041" +
    "\005\000\002\017\003\000\002\017\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\020\005\000\002\021\005" +
    "\000\002\022\005\000\002\023\005\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\035\005\000\002\035" +
    "\007\000\002\035\010\000\002\035\005\000\002\035\007" +
    "\000\002\035\004\000\002\036\004\000\002\036\004\000" +
    "\002\036\004\000\002\036\004\000\002\030\003\000\002" +
    "\030\003\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\004\000\002\027\004" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\003" +
    "\000\002\027\005\000\002\034\003\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\003\000\002" +
    "\033\005\000\002\032\003\000\002\032\003\000\002\031" +
    "\005\000\002\031\005\000\002\031\004\000\002\031\004" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\005\000\002\056\006\000\002\056\006\000\002\056\006" +
    "\000\002\057\006\000\002\060\004\000\002\060\004\000" +
    "\002\060\004\000\002\060\004\000\002\055\003\000\002" +
    "\055\003\000\002\055\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01c7\000\020\017\011\021\020\022\007\023\006\024" +
    "\015\031\005\064\010\001\002\000\004\002\u01c9\001\002" +
    "\000\006\052\uffa0\064\uffa0\001\002\000\016\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\031\uffda\064\uffda\001\002\000\006" +
    "\052\uff9f\064\uff9f\001\002\000\006\052\u01a8\064\u01c8\001" +
    "\002\000\004\064\u01b9\001\002\000\016\017\u0156\020\u0158" +
    "\021\020\022\007\031\005\064\u0154\001\002\000\022\002" +
    "\ufffd\017\011\021\020\022\007\023\006\024\015\031\005" +
    "\064\010\001\002\000\006\052\u0122\064\u0144\001\002\000" +
    "\016\017\uffd9\020\uffd9\021\uffd9\022\uffd9\031\uffd9\064\uffd9" +
    "\001\002\000\004\064\022\001\002\000\022\002\uffff\017" +
    "\011\021\020\022\007\023\006\024\015\031\005\064\010" +
    "\001\002\000\006\052\uffa1\064\uffa1\001\002\000\004\002" +
    "\000\001\002\000\004\056\023\001\002\000\014\021\020" +
    "\022\007\031\005\057\025\064\024\001\002\000\004\064" +
    "\030\001\002\000\040\006\266\012\302\013\303\014\274" +
    "\015\273\016\301\021\020\022\007\025\262\026\257\031" +
    "\005\033\275\054\u013b\055\uffab\064\305\001\002\000\004" +
    "\057\252\001\002\000\004\064\030\001\002\000\020\021" +
    "\uffd2\022\uffd2\031\uffd2\052\035\057\uffd2\061\uffd2\064\uffd2" +
    "\001\002\000\016\021\020\022\007\031\005\057\uffd6\061" +
    "\032\064\024\001\002\000\012\021\020\022\007\031\005" +
    "\064\024\001\002\000\004\057\uffd4\001\002\000\004\057" +
    "\uffd8\001\002\000\014\046\047\053\050\056\041\063\046" +
    "\064\044\001\002\000\126\004\uff98\005\uff98\006\uff98\010" +
    "\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98" +
    "\017\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98\026" +
    "\uff98\027\uff98\030\uff98\031\uff98\033\uff98\036\uff98\037\uff98" +
    "\040\uff98\041\uff98\042\uff98\043\uff98\045\uff98\046\uff98\047" +
    "\uff98\050\uff98\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98" +
    "\060\uff98\061\uff98\062\uff98\063\uff98\064\uff98\065\uff98\001" +
    "\002\000\126\004\uff99\005\uff99\006\uff99\010\uff99\011\uff99" +
    "\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99\021" +
    "\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99" +
    "\030\uff99\031\uff99\033\uff99\036\uff99\037\uff99\040\uff99\041" +
    "\uff99\042\uff99\043\uff99\045\uff99\046\uff99\047\uff99\050\uff99" +
    "\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061" +
    "\uff99\062\uff99\063\uff99\064\uff99\065\uff99\001\002\000\126" +
    "\004\uff9a\005\uff9a\006\uff9a\010\uff9a\011\uff9a\012\uff9a\013" +
    "\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\021\uff9a\022\uff9a" +
    "\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031" +
    "\uff9a\033\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a" +
    "\043\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\053\uff9a\054" +
    "\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a" +
    "\063\uff9a\064\uff9a\065\uff9a\001\002\000\012\046\047\056" +
    "\041\063\046\064\044\001\002\000\114\004\uff74\005\uff74" +
    "\006\uff74\010\uff74\011\uff74\012\uff74\013\uff74\014\uff74\015" +
    "\uff74\016\uff74\017\uff74\021\uff74\022\uff74\023\uff74\024\uff74" +
    "\025\uff74\026\uff74\027\uff74\030\uff74\031\uff74\033\uff74\042" +
    "\uff74\043\uff74\045\064\046\063\047\062\050\065\053\uff74" +
    "\054\uff74\055\uff74\056\uff74\057\uff74\061\uff74\062\uff74\063" +
    "\uff74\064\uff74\065\uff74\001\002\000\114\004\uff73\005\uff73" +
    "\006\uff73\010\uff73\011\uff73\012\uff73\013\uff73\014\uff73\015" +
    "\uff73\016\uff73\017\uff73\021\uff73\022\uff73\023\uff73\024\uff73" +
    "\025\uff73\026\uff73\027\uff73\030\uff73\031\uff73\033\uff73\042" +
    "\uff73\043\uff73\045\056\046\055\047\054\050\057\053\uff73" +
    "\054\uff73\055\uff73\056\uff73\057\uff73\061\uff73\062\uff73\063" +
    "\uff73\064\uff73\065\uff73\001\002\000\130\004\uffd2\005\uffd2" +
    "\006\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\033\uffd2\036" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\045\uffd2" +
    "\046\uffd2\047\uffd2\050\uffd2\052\035\053\uffd2\054\uffd2\055" +
    "\uffd2\056\105\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2" +
    "\064\uffd2\065\uffd2\001\002\000\004\053\104\001\002\000" +
    "\126\004\uff60\005\uff60\006\uff60\010\uff60\011\uff60\012\uff60" +
    "\013\uff60\014\uff60\015\uff60\016\uff60\017\uff60\021\uff60\022" +
    "\uff60\023\uff60\024\uff60\025\uff60\026\uff60\027\uff60\030\uff60" +
    "\031\uff60\033\uff60\036\uff60\037\uff60\040\uff60\041\uff60\042" +
    "\uff60\043\uff60\045\uff60\046\uff60\047\uff60\050\uff60\053\uff60" +
    "\054\uff60\055\uff60\056\uff60\057\uff60\060\uff60\061\uff60\062" +
    "\uff60\063\uff60\064\uff60\065\uff60\001\002\000\012\046\047" +
    "\056\041\063\046\064\044\001\002\000\126\004\uffd1\005" +
    "\uffd1\006\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1" +
    "\015\uffd1\016\uffd1\017\uffd1\021\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\033\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\045" +
    "\uffd1\046\uffd1\047\uffd1\050\uffd1\053\uffd1\054\uffd1\055\uffd1" +
    "\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064" +
    "\uffd1\065\uffd1\001\002\000\126\004\uff96\005\uff96\006\uff96" +
    "\010\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016" +
    "\uff96\017\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025\uff96" +
    "\026\uff96\027\uff96\030\uff96\031\uff96\033\uff96\036\uff96\037" +
    "\uff96\040\uff96\041\uff96\042\uff96\043\uff96\045\uff96\046\uff96" +
    "\047\uff96\050\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057" +
    "\uff96\060\uff96\061\uff96\062\uff96\063\uff96\064\uff96\065\uff96" +
    "\001\002\000\126\004\uff6e\005\uff6e\006\uff6e\010\uff6e\011" +
    "\uff6e\012\uff6e\013\uff6e\014\uff6e\015\uff6e\016\uff6e\017\uff6e" +
    "\021\uff6e\022\uff6e\023\uff6e\024\uff6e\025\uff6e\026\uff6e\027" +
    "\uff6e\030\uff6e\031\uff6e\033\uff6e\036\uff6e\037\uff6e\040\uff6e" +
    "\041\uff6e\042\uff6e\043\uff6e\045\uff6e\046\uff6e\047\uff6e\050" +
    "\uff6e\053\uff6e\054\uff6e\055\uff6e\056\uff6e\057\uff6e\060\uff6e" +
    "\061\uff6e\062\uff6e\063\uff6e\064\uff6e\065\uff6e\001\002\000" +
    "\126\004\uff6d\005\uff6d\006\uff6d\010\uff6d\011\uff6d\012\uff6d" +
    "\013\uff6d\014\uff6d\015\uff6d\016\uff6d\017\uff6d\021\uff6d\022" +
    "\uff6d\023\uff6d\024\uff6d\025\uff6d\026\uff6d\027\uff6d\030\uff6d" +
    "\031\uff6d\033\uff6d\036\uff6d\037\uff6d\040\uff6d\041\uff6d\042" +
    "\uff6d\043\uff6d\045\uff6d\046\uff6d\047\uff6d\050\uff6d\053\uff6d" +
    "\054\uff6d\055\uff6d\056\uff6d\057\uff6d\060\uff6d\061\uff6d\062" +
    "\uff6d\063\uff6d\064\uff6d\065\uff6d\001\002\000\012\046\047" +
    "\056\041\063\046\064\044\001\002\000\012\046\047\056" +
    "\041\063\046\064\044\001\002\000\012\046\047\056\041" +
    "\063\046\064\044\001\002\000\012\046\047\056\041\063" +
    "\046\064\044\001\002\000\126\004\uff66\005\uff66\006\uff66" +
    "\010\uff66\011\uff66\012\uff66\013\uff66\014\uff66\015\uff66\016" +
    "\uff66\017\uff66\021\uff66\022\uff66\023\uff66\024\uff66\025\uff66" +
    "\026\uff66\027\uff66\030\uff66\031\uff66\033\uff66\036\uff66\037" +
    "\uff66\040\uff66\041\uff66\042\uff66\043\uff66\045\uff66\046\uff66" +
    "\047\uff66\050\uff66\053\uff66\054\uff66\055\uff66\056\uff66\057" +
    "\uff66\060\uff66\061\uff66\062\uff66\063\uff66\064\uff66\065\uff66" +
    "\001\002\000\126\004\uff61\005\uff61\006\uff61\010\uff61\011" +
    "\uff61\012\uff61\013\uff61\014\uff61\015\uff61\016\uff61\017\uff61" +
    "\021\uff61\022\uff61\023\uff61\024\uff61\025\uff61\026\uff61\027" +
    "\uff61\030\uff61\031\uff61\033\uff61\036\uff61\037\uff61\040\uff61" +
    "\041\uff61\042\uff61\043\uff61\045\uff61\046\uff61\047\uff61\050" +
    "\uff61\053\uff61\054\uff61\055\uff61\056\uff61\057\uff61\060\uff61" +
    "\061\uff61\062\uff61\063\uff61\064\uff61\065\uff61\001\002\000" +
    "\012\046\047\056\041\063\046\064\044\001\002\000\012" +
    "\046\047\056\041\063\046\064\044\001\002\000\012\046" +
    "\047\056\041\063\046\064\044\001\002\000\012\046\047" +
    "\056\041\063\046\064\044\001\002\000\126\004\uff6f\005" +
    "\uff6f\006\uff6f\010\uff6f\011\uff6f\012\uff6f\013\uff6f\014\uff6f" +
    "\015\uff6f\016\uff6f\017\uff6f\021\uff6f\022\uff6f\023\uff6f\024" +
    "\uff6f\025\uff6f\026\uff6f\027\uff6f\030\uff6f\031\uff6f\033\uff6f" +
    "\036\uff6f\037\uff6f\040\uff6f\041\uff6f\042\uff6f\043\uff6f\045" +
    "\uff6f\046\uff6f\047\uff6f\050\uff6f\053\uff6f\054\uff6f\055\uff6f" +
    "\056\uff6f\057\uff6f\060\uff6f\061\uff6f\062\uff6f\063\uff6f\064" +
    "\uff6f\065\uff6f\001\002\000\126\004\uff65\005\uff65\006\uff65" +
    "\010\uff65\011\uff65\012\uff65\013\uff65\014\uff65\015\uff65\016" +
    "\uff65\017\uff65\021\uff65\022\uff65\023\uff65\024\uff65\025\uff65" +
    "\026\uff65\027\uff65\030\uff65\031\uff65\033\uff65\036\uff65\037" +
    "\uff65\040\uff65\041\uff65\042\uff65\043\uff65\045\uff65\046\uff65" +
    "\047\uff65\050\uff65\053\uff65\054\uff65\055\uff65\056\uff65\057" +
    "\uff65\060\uff65\061\uff65\062\uff65\063\uff65\064\uff65\065\uff65" +
    "\001\002\000\126\004\uff72\005\uff72\006\uff72\010\uff72\011" +
    "\uff72\012\uff72\013\uff72\014\uff72\015\uff72\016\uff72\017\uff72" +
    "\021\uff72\022\uff72\023\uff72\024\uff72\025\uff72\026\uff72\027" +
    "\uff72\030\uff72\031\uff72\033\uff72\036\uff72\037\uff72\040\uff72" +
    "\041\uff72\042\uff72\043\uff72\045\uff72\046\uff72\047\062\050" +
    "\065\053\uff72\054\uff72\055\uff72\056\uff72\057\uff72\060\uff72" +
    "\061\uff72\062\uff72\063\uff72\064\uff72\065\uff72\001\002\000" +
    "\126\004\uff6b\005\uff6b\006\uff6b\010\uff6b\011\uff6b\012\uff6b" +
    "\013\uff6b\014\uff6b\015\uff6b\016\uff6b\017\uff6b\021\uff6b\022" +
    "\uff6b\023\uff6b\024\uff6b\025\uff6b\026\uff6b\027\uff6b\030\uff6b" +
    "\031\uff6b\033\uff6b\036\uff6b\037\uff6b\040\uff6b\041\uff6b\042" +
    "\uff6b\043\uff6b\045\uff6b\046\uff6b\047\054\050\057\053\uff6b" +
    "\054\uff6b\055\uff6b\056\uff6b\057\uff6b\060\uff6b\061\uff6b\062" +
    "\uff6b\063\uff6b\064\uff6b\065\uff6b\001\002\000\126\004\uff71" +
    "\005\uff71\006\uff71\010\uff71\011\uff71\012\uff71\013\uff71\014" +
    "\uff71\015\uff71\016\uff71\017\uff71\021\uff71\022\uff71\023\uff71" +
    "\024\uff71\025\uff71\026\uff71\027\uff71\030\uff71\031\uff71\033" +
    "\uff71\036\uff71\037\uff71\040\uff71\041\uff71\042\uff71\043\uff71" +
    "\045\uff71\046\uff71\047\062\050\065\053\uff71\054\uff71\055" +
    "\uff71\056\uff71\057\uff71\060\uff71\061\uff71\062\uff71\063\uff71" +
    "\064\uff71\065\uff71\001\002\000\126\004\uff69\005\uff69\006" +
    "\uff69\010\uff69\011\uff69\012\uff69\013\uff69\014\uff69\015\uff69" +
    "\016\uff69\017\uff69\021\uff69\022\uff69\023\uff69\024\uff69\025" +
    "\uff69\026\uff69\027\uff69\030\uff69\031\uff69\033\uff69\036\uff69" +
    "\037\uff69\040\uff69\041\uff69\042\uff69\043\uff69\045\uff69\046" +
    "\uff69\047\054\050\057\053\uff69\054\uff69\055\uff69\056\uff69" +
    "\057\uff69\060\uff69\061\uff69\062\uff69\063\uff69\064\uff69\065" +
    "\uff69\001\002\000\126\004\uff70\005\uff70\006\uff70\010\uff70" +
    "\011\uff70\012\uff70\013\uff70\014\uff70\015\uff70\016\uff70\017" +
    "\uff70\021\uff70\022\uff70\023\uff70\024\uff70\025\uff70\026\uff70" +
    "\027\uff70\030\uff70\031\uff70\033\uff70\036\uff70\037\uff70\040" +
    "\uff70\041\uff70\042\uff70\043\uff70\045\uff70\046\uff70\047\uff70" +
    "\050\uff70\053\uff70\054\uff70\055\uff70\056\uff70\057\uff70\060" +
    "\uff70\061\uff70\062\uff70\063\uff70\064\uff70\065\uff70\001\002" +
    "\000\126\004\uff67\005\uff67\006\uff67\010\uff67\011\uff67\012" +
    "\uff67\013\uff67\014\uff67\015\uff67\016\uff67\017\uff67\021\uff67" +
    "\022\uff67\023\uff67\024\uff67\025\uff67\026\uff67\027\uff67\030" +
    "\uff67\031\uff67\033\uff67\036\uff67\037\uff67\040\uff67\041\uff67" +
    "\042\uff67\043\uff67\045\uff67\046\uff67\047\uff67\050\uff67\053" +
    "\uff67\054\uff67\055\uff67\056\uff67\057\uff67\060\uff67\061\uff67" +
    "\062\uff67\063\uff67\064\uff67\065\uff67\001\002\000\126\004" +
    "\uff6c\005\uff6c\006\uff6c\010\uff6c\011\uff6c\012\uff6c\013\uff6c" +
    "\014\uff6c\015\uff6c\016\uff6c\017\uff6c\021\uff6c\022\uff6c\023" +
    "\uff6c\024\uff6c\025\uff6c\026\uff6c\027\uff6c\030\uff6c\031\uff6c" +
    "\033\uff6c\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043" +
    "\uff6c\045\uff6c\046\uff6c\047\062\050\065\053\uff6c\054\uff6c" +
    "\055\uff6c\056\uff6c\057\uff6c\060\uff6c\061\uff6c\062\uff6c\063" +
    "\uff6c\064\uff6c\065\uff6c\001\002\000\126\004\uff64\005\uff64" +
    "\006\uff64\010\uff64\011\uff64\012\uff64\013\uff64\014\uff64\015" +
    "\uff64\016\uff64\017\uff64\021\uff64\022\uff64\023\uff64\024\uff64" +
    "\025\uff64\026\uff64\027\uff64\030\uff64\031\uff64\033\uff64\036" +
    "\uff64\037\uff64\040\uff64\041\uff64\042\uff64\043\uff64\045\uff64" +
    "\046\uff64\047\054\050\057\053\uff64\054\uff64\055\uff64\056" +
    "\uff64\057\uff64\060\uff64\061\uff64\062\uff64\063\uff64\064\uff64" +
    "\065\uff64\001\002\000\126\004\uff6a\005\uff6a\006\uff6a\010" +
    "\uff6a\011\uff6a\012\uff6a\013\uff6a\014\uff6a\015\uff6a\016\uff6a" +
    "\017\uff6a\021\uff6a\022\uff6a\023\uff6a\024\uff6a\025\uff6a\026" +
    "\uff6a\027\uff6a\030\uff6a\031\uff6a\033\uff6a\036\uff6a\037\uff6a" +
    "\040\uff6a\041\uff6a\042\uff6a\043\uff6a\045\uff6a\046\uff6a\047" +
    "\062\050\065\053\uff6a\054\uff6a\055\uff6a\056\uff6a\057\uff6a" +
    "\060\uff6a\061\uff6a\062\uff6a\063\uff6a\064\uff6a\065\uff6a\001" +
    "\002\000\126\004\uff63\005\uff63\006\uff63\010\uff63\011\uff63" +
    "\012\uff63\013\uff63\014\uff63\015\uff63\016\uff63\017\uff63\021" +
    "\uff63\022\uff63\023\uff63\024\uff63\025\uff63\026\uff63\027\uff63" +
    "\030\uff63\031\uff63\033\uff63\036\uff63\037\uff63\040\uff63\041" +
    "\uff63\042\uff63\043\uff63\045\uff63\046\uff63\047\054\050\057" +
    "\053\uff63\054\uff63\055\uff63\056\uff63\057\uff63\060\uff63\061" +
    "\uff63\062\uff63\063\uff63\064\uff63\065\uff63\001\002\000\126" +
    "\004\uff68\005\uff68\006\uff68\010\uff68\011\uff68\012\uff68\013" +
    "\uff68\014\uff68\015\uff68\016\uff68\017\uff68\021\uff68\022\uff68" +
    "\023\uff68\024\uff68\025\uff68\026\uff68\027\uff68\030\uff68\031" +
    "\uff68\033\uff68\036\uff68\037\uff68\040\uff68\041\uff68\042\uff68" +
    "\043\uff68\045\uff68\046\uff68\047\uff68\050\uff68\053\uff68\054" +
    "\uff68\055\uff68\056\uff68\057\uff68\060\uff68\061\uff68\062\uff68" +
    "\063\uff68\064\uff68\065\uff68\001\002\000\126\004\uff62\005" +
    "\uff62\006\uff62\010\uff62\011\uff62\012\uff62\013\uff62\014\uff62" +
    "\015\uff62\016\uff62\017\uff62\021\uff62\022\uff62\023\uff62\024" +
    "\uff62\025\uff62\026\uff62\027\uff62\030\uff62\031\uff62\033\uff62" +
    "\036\uff62\037\uff62\040\uff62\041\uff62\042\uff62\043\uff62\045" +
    "\uff62\046\uff62\047\uff62\050\uff62\053\uff62\054\uff62\055\uff62" +
    "\056\uff62\057\uff62\060\uff62\061\uff62\062\uff62\063\uff62\064" +
    "\uff62\065\uff62\001\002\000\126\004\uffd0\005\uffd0\006\uffd0" +
    "\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\027\uffd0\030\uffd0\031\uffd0\033\uffd0\036\uffd0\037" +
    "\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\045\uffd0\046\uffd0" +
    "\047\uffd0\050\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057" +
    "\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0" +
    "\001\002\000\024\027\115\030\123\042\126\046\047\056" +
    "\121\057\uffc7\063\046\064\044\065\110\001\002\000\046" +
    "\027\uffc4\030\uffc4\036\uff74\037\uff74\040\uff74\041\uff74\042" +
    "\200\043\176\045\064\046\063\047\062\050\065\056\uffc4" +
    "\057\uffc4\061\uffc4\063\uffc4\064\uffc4\065\uffc4\001\002\000" +
    "\076\004\uff7f\005\uff7f\006\uff7f\012\uff7f\013\uff7f\014\uff7f" +
    "\015\uff7f\016\uff7f\017\uff7f\021\uff7f\022\uff7f\023\uff7f\024" +
    "\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f\033\uff7f" +
    "\042\uff7f\043\uff7f\046\uff7f\055\uff7f\056\uff7f\057\uff7f\061" +
    "\uff7f\062\uff7f\063\uff7f\064\uff7f\065\uff7f\001\002\000\072" +
    "\006\uff5a\012\uff5a\013\uff5a\014\uff5a\015\uff5a\016\uff5a\017" +
    "\uff5a\021\uff5a\022\uff5a\023\uff5a\024\uff5a\025\uff5a\026\uff5a" +
    "\027\uff5a\030\uff5a\031\uff5a\033\uff5a\042\uff5a\045\uff5a\046" +
    "\uff5a\055\uff5a\056\uff5a\057\uff5a\061\uff5a\062\uff5a\063\uff5a" +
    "\064\uff5a\065\uff5a\001\002\000\076\004\uff82\005\uff82\006" +
    "\uff82\012\uff82\013\uff82\014\uff82\015\uff82\016\uff82\017\uff82" +
    "\021\uff82\022\uff82\023\uff82\024\uff82\025\uff82\026\uff82\027" +
    "\uff82\030\uff82\031\uff82\033\uff82\042\uff82\043\uff82\046\uff82" +
    "\055\uff82\056\uff82\057\uff82\061\uff82\062\uff82\063\uff82\064" +
    "\uff82\065\uff82\001\002\000\076\004\uff84\005\uff84\006\uff84" +
    "\012\uff84\013\uff84\014\uff84\015\uff84\016\uff84\017\uff84\021" +
    "\uff84\022\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84" +
    "\030\uff84\031\uff84\033\uff84\042\uff84\043\uff84\046\uff84\055" +
    "\uff84\056\uff84\057\uff84\061\uff84\062\uff84\063\uff84\064\uff84" +
    "\065\uff84\001\002\000\052\004\156\005\155\027\uffc5\030" +
    "\uffc5\036\uff73\037\uff73\040\uff73\041\uff73\042\154\043\153" +
    "\045\244\046\055\047\054\050\057\056\uffc5\057\uffc5\061" +
    "\uffc5\063\uffc5\064\uffc5\065\uffc5\001\002\000\030\027\uffc3" +
    "\030\uffc3\042\uffc3\045\234\046\uffc3\056\uffc3\057\uffc3\061" +
    "\uffc3\063\uffc3\064\uffc3\065\uffc3\001\002\000\076\004\uff4b" +
    "\005\uff4b\006\uff4b\012\uff4b\013\uff4b\014\uff4b\015\uff4b\016" +
    "\uff4b\017\uff4b\021\uff4b\022\uff4b\023\uff4b\024\uff4b\025\uff4b" +
    "\026\uff4b\027\uff4b\030\uff4b\031\uff4b\033\uff4b\042\uff4b\043" +
    "\uff4b\046\uff4b\055\uff4b\056\uff4b\057\uff4b\061\uff4b\062\uff4b" +
    "\063\uff4b\064\uff4b\065\uff4b\001\002\000\006\057\uffc9\061" +
    "\223\001\002\000\034\004\150\005\147\027\uffc2\030\uffc2" +
    "\042\146\043\144\046\uffc2\056\uffc2\057\uffc2\061\uffc2\063" +
    "\uffc2\064\uffc2\065\uffc2\001\002\000\076\004\uff4c\005\uff4c" +
    "\006\uff4c\012\uff4c\013\uff4c\014\uff4c\015\uff4c\016\uff4c\017" +
    "\uff4c\021\uff4c\022\uff4c\023\uff4c\024\uff4c\025\uff4c\026\uff4c" +
    "\027\uff4c\030\uff4c\031\uff4c\033\uff4c\042\uff4c\043\uff4c\046" +
    "\uff4c\055\uff4c\056\uff4c\057\uff4c\061\uff4c\062\uff4c\063\uff4c" +
    "\064\uff4c\065\uff4c\001\002\000\024\027\115\030\123\042" +
    "\126\046\047\056\121\057\uffc7\063\046\064\044\065\110" +
    "\001\002\000\012\036\210\037\207\040\205\041\206\001" +
    "\002\000\076\004\uff4a\005\uff4a\006\uff4a\012\uff4a\013\uff4a" +
    "\014\uff4a\015\uff4a\016\uff4a\017\uff4a\021\uff4a\022\uff4a\023" +
    "\uff4a\024\uff4a\025\uff4a\026\uff4a\027\uff4a\030\uff4a\031\uff4a" +
    "\033\uff4a\042\uff4a\043\uff4a\046\uff4a\055\uff4a\056\uff4a\057" +
    "\uff4a\061\uff4a\062\uff4a\063\uff4a\064\uff4a\065\uff4a\001\002" +
    "\000\076\004\uff83\005\uff83\006\uff83\012\uff83\013\uff83\014" +
    "\uff83\015\uff83\016\uff83\017\uff83\021\uff83\022\uff83\023\uff83" +
    "\024\uff83\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83\033" +
    "\uff83\042\uff83\043\uff83\046\uff83\055\uff83\056\uff83\057\uff83" +
    "\061\uff83\062\uff83\063\uff83\064\uff83\065\uff83\001\002\000" +
    "\076\004\uff80\005\uff80\006\uff80\012\uff80\013\uff80\014\uff80" +
    "\015\uff80\016\uff80\017\uff80\021\uff80\022\uff80\023\uff80\024" +
    "\uff80\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80\033\uff80" +
    "\042\uff80\043\uff80\046\uff80\055\uff80\056\uff80\057\uff80\061" +
    "\uff80\062\uff80\063\uff80\064\uff80\065\uff80\001\002\000\020" +
    "\027\115\030\123\042\126\046\047\056\135\063\046\064" +
    "\044\001\002\000\076\004\uff81\005\uff81\006\uff81\012\uff81" +
    "\013\uff81\014\uff81\015\uff81\016\uff81\017\uff81\021\uff81\022" +
    "\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81" +
    "\031\uff81\033\uff81\042\uff81\043\uff81\046\uff81\055\uff81\056" +
    "\uff81\057\uff81\061\uff81\062\uff81\063\uff81\064\uff81\065\uff81" +
    "\001\002\000\004\057\131\001\002\000\126\004\uffca\005" +
    "\uffca\006\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca" +
    "\015\uffca\016\uffca\017\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\033\uffca" +
    "\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\045" +
    "\uffca\046\uffca\047\uffca\050\uffca\053\uffca\054\uffca\055\uffca" +
    "\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064" +
    "\uffca\065\uffca\001\002\000\026\036\uff74\037\uff74\040\uff74" +
    "\041\uff74\042\200\043\176\045\064\046\063\047\062\050" +
    "\065\001\002\000\114\004\uff53\005\uff53\006\uff53\012\uff53" +
    "\013\uff53\014\uff53\015\uff53\016\uff53\017\uff53\021\uff53\022" +
    "\uff53\023\uff53\024\uff53\025\uff53\026\uff53\027\uff53\030\uff53" +
    "\031\uff53\033\uff53\036\uff73\037\uff73\040\uff73\041\uff73\042" +
    "\uff53\043\uff53\045\056\046\uff53\047\054\050\057\055\uff53" +
    "\056\uff53\057\uff53\061\uff53\062\uff53\063\uff53\064\uff53\065" +
    "\uff53\001\002\000\076\004\uff54\005\uff54\006\uff54\012\uff54" +
    "\013\uff54\014\uff54\015\uff54\016\uff54\017\uff54\021\uff54\022" +
    "\uff54\023\uff54\024\uff54\025\uff54\026\uff54\027\uff54\030\uff54" +
    "\031\uff54\033\uff54\042\uff54\043\uff54\046\uff54\055\uff54\056" +
    "\uff54\057\uff54\061\uff54\062\uff54\063\uff54\064\uff54\065\uff54" +
    "\001\002\000\020\027\115\030\123\042\126\046\047\056" +
    "\135\063\046\064\044\001\002\000\030\036\uff74\037\uff74" +
    "\040\uff74\041\uff74\042\200\043\176\045\064\046\063\047" +
    "\062\050\065\057\177\001\002\000\032\004\156\005\155" +
    "\036\uff73\037\uff73\040\uff73\041\uff73\042\154\043\153\045" +
    "\056\046\055\047\054\050\057\001\002\000\036\004\uff99" +
    "\005\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043" +
    "\uff99\045\uff99\046\uff99\047\uff99\050\uff99\057\175\061\uff99" +
    "\001\002\000\014\004\150\005\147\042\146\043\144\057" +
    "\145\001\002\000\036\004\uff9a\005\uff9a\036\uff9a\037\uff9a" +
    "\040\uff9a\041\uff9a\042\uff9a\043\uff9a\045\uff9a\046\uff9a\047" +
    "\uff9a\050\uff9a\057\143\061\uff9a\001\002\000\126\004\uff95" +
    "\005\uff95\006\uff95\010\uff95\011\uff95\012\uff95\013\uff95\014" +
    "\uff95\015\uff95\016\uff95\017\uff95\021\uff95\022\uff95\023\uff95" +
    "\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95\033" +
    "\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95" +
    "\045\uff95\046\uff95\047\uff95\050\uff95\053\uff95\054\uff95\055" +
    "\uff95\056\uff95\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95" +
    "\064\uff95\065\uff95\001\002\000\020\027\115\030\123\042" +
    "\126\046\047\056\135\063\046\064\044\001\002\000\076" +
    "\004\uff49\005\uff49\006\uff49\012\uff49\013\uff49\014\uff49\015" +
    "\uff49\016\uff49\017\uff49\021\uff49\022\uff49\023\uff49\024\uff49" +
    "\025\uff49\026\uff49\027\uff49\030\uff49\031\uff49\033\uff49\042" +
    "\uff49\043\uff49\046\uff49\055\uff49\056\uff49\057\uff49\061\uff49" +
    "\062\uff49\063\uff49\064\uff49\065\uff49\001\002\000\020\027" +
    "\115\030\123\042\126\046\047\056\135\063\046\064\044" +
    "\001\002\000\020\027\115\030\123\042\126\046\047\056" +
    "\135\063\046\064\044\001\002\000\020\027\115\030\123" +
    "\042\126\046\047\056\135\063\046\064\044\001\002\000" +
    "\114\004\uff51\005\uff51\006\uff51\012\uff51\013\uff51\014\uff51" +
    "\015\uff51\016\uff51\017\uff51\021\uff51\022\uff51\023\uff51\024" +
    "\uff51\025\uff51\026\uff51\027\uff51\030\uff51\031\uff51\033\uff51" +
    "\036\uff73\037\uff73\040\uff73\041\uff73\042\uff51\043\uff51\045" +
    "\056\046\055\047\054\050\057\055\uff51\056\uff51\057\uff51" +
    "\061\uff51\062\uff51\063\uff51\064\uff51\065\uff51\001\002\000" +
    "\076\004\uff56\005\uff56\006\uff56\012\uff56\013\uff56\014\uff56" +
    "\015\uff56\016\uff56\017\uff56\021\uff56\022\uff56\023\uff56\024" +
    "\uff56\025\uff56\026\uff56\027\uff56\030\uff56\031\uff56\033\uff56" +
    "\042\uff56\043\uff56\046\uff56\055\uff56\056\uff56\057\uff56\061" +
    "\uff56\062\uff56\063\uff56\064\uff56\065\uff56\001\002\000\012" +
    "\046\047\056\041\063\046\064\044\001\002\000\012\046" +
    "\047\056\041\063\046\064\044\001\002\000\020\027\115" +
    "\030\123\042\126\046\047\056\135\063\046\064\044\001" +
    "\002\000\020\027\115\030\123\042\126\046\047\056\135" +
    "\063\046\064\044\001\002\000\114\004\uff4e\005\uff4e\006" +
    "\uff4e\012\uff4e\013\uff4e\014\uff4e\015\uff4e\016\uff4e\017\uff4e" +
    "\021\uff4e\022\uff4e\023\uff4e\024\uff4e\025\uff4e\026\uff4e\027" +
    "\uff4e\030\uff4e\031\uff4e\033\uff4e\036\uff73\037\uff73\040\uff73" +
    "\041\uff73\042\uff4e\043\uff4e\045\056\046\055\047\054\050" +
    "\057\055\uff4e\056\uff4e\057\uff4e\061\uff4e\062\uff4e\063\uff4e" +
    "\064\uff4e\065\uff4e\001\002\000\076\004\uff52\005\uff52\006" +
    "\uff52\012\uff52\013\uff52\014\uff52\015\uff52\016\uff52\017\uff52" +
    "\021\uff52\022\uff52\023\uff52\024\uff52\025\uff52\026\uff52\027" +
    "\uff52\030\uff52\031\uff52\033\uff52\042\uff52\043\uff52\046\uff52" +
    "\055\uff52\056\uff52\057\uff52\061\uff52\062\uff52\063\uff52\064" +
    "\uff52\065\uff52\001\002\000\114\004\uff4d\005\uff4d\006\uff4d" +
    "\012\uff4d\013\uff4d\014\uff4d\015\uff4d\016\uff4d\017\uff4d\021" +
    "\uff4d\022\uff4d\023\uff4d\024\uff4d\025\uff4d\026\uff4d\027\uff4d" +
    "\030\uff4d\031\uff4d\033\uff4d\036\uff73\037\uff73\040\uff73\041" +
    "\uff73\042\uff4d\043\uff4d\045\056\046\055\047\054\050\057" +
    "\055\uff4d\056\uff4d\057\uff4d\061\uff4d\062\uff4d\063\uff4d\064" +
    "\uff4d\065\uff4d\001\002\000\076\004\uff50\005\uff50\006\uff50" +
    "\012\uff50\013\uff50\014\uff50\015\uff50\016\uff50\017\uff50\021" +
    "\uff50\022\uff50\023\uff50\024\uff50\025\uff50\026\uff50\027\uff50" +
    "\030\uff50\031\uff50\033\uff50\042\uff50\043\uff50\046\uff50\055" +
    "\uff50\056\uff50\057\uff50\061\uff50\062\uff50\063\uff50\064\uff50" +
    "\065\uff50\001\002\000\104\004\uff8b\005\uff8b\006\uff8b\012" +
    "\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\021\uff8b" +
    "\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030" +
    "\uff8b\031\uff8b\033\uff8b\042\uff8b\043\uff8b\045\064\046\063" +
    "\047\062\050\065\055\uff8b\056\uff8b\057\uff8b\061\uff8b\062" +
    "\uff8b\063\uff8b\064\uff8b\065\uff8b\001\002\000\104\004\uff89" +
    "\005\uff89\006\uff89\012\uff89\013\uff89\014\uff89\015\uff89\016" +
    "\uff89\017\uff89\021\uff89\022\uff89\023\uff89\024\uff89\025\uff89" +
    "\026\uff89\027\uff89\030\uff89\031\uff89\033\uff89\042\uff89\043" +
    "\uff89\045\056\046\055\047\054\050\057\055\uff89\056\uff89" +
    "\057\uff89\061\uff89\062\uff89\063\uff89\064\uff89\065\uff89\001" +
    "\002\000\104\004\uff91\005\uff91\006\uff91\012\uff91\013\uff91" +
    "\014\uff91\015\uff91\016\uff91\017\uff91\021\uff91\022\uff91\023" +
    "\uff91\024\uff91\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91" +
    "\033\uff91\042\uff91\043\uff91\045\064\046\063\047\062\050" +
    "\065\055\uff91\056\uff91\057\uff91\061\uff91\062\uff91\063\uff91" +
    "\064\uff91\065\uff91\001\002\000\104\004\uff8f\005\uff8f\006" +
    "\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f" +
    "\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027" +
    "\uff8f\030\uff8f\031\uff8f\033\uff8f\042\uff8f\043\uff8f\045\056" +
    "\046\055\047\054\050\057\055\uff8f\056\uff8f\057\uff8f\061" +
    "\uff8f\062\uff8f\063\uff8f\064\uff8f\065\uff8f\001\002\000\114" +
    "\004\uff4f\005\uff4f\006\uff4f\012\uff4f\013\uff4f\014\uff4f\015" +
    "\uff4f\016\uff4f\017\uff4f\021\uff4f\022\uff4f\023\uff4f\024\uff4f" +
    "\025\uff4f\026\uff4f\027\uff4f\030\uff4f\031\uff4f\033\uff4f\036" +
    "\uff73\037\uff73\040\uff73\041\uff73\042\uff4f\043\uff4f\045\056" +
    "\046\055\047\054\050\057\055\uff4f\056\uff4f\057\uff4f\061" +
    "\uff4f\062\uff4f\063\uff4f\064\uff4f\065\uff4f\001\002\000\076" +
    "\004\uff55\005\uff55\006\uff55\012\uff55\013\uff55\014\uff55\015" +
    "\uff55\016\uff55\017\uff55\021\uff55\022\uff55\023\uff55\024\uff55" +
    "\025\uff55\026\uff55\027\uff55\030\uff55\031\uff55\033\uff55\042" +
    "\uff55\043\uff55\046\uff55\055\uff55\056\uff55\057\uff55\061\uff55" +
    "\062\uff55\063\uff55\064\uff55\065\uff55\001\002\000\114\004" +
    "\156\005\155\006\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c" +
    "\016\uff8c\017\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c\025" +
    "\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\033\uff8c\036\uff73" +
    "\037\uff73\040\uff73\041\uff73\042\uff8c\043\uff8c\045\056\046" +
    "\055\047\054\050\057\055\uff8c\056\uff8c\057\uff8c\061\uff8c" +
    "\062\uff8c\063\uff8c\064\uff8c\065\uff8c\001\002\000\076\004" +
    "\150\005\147\006\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d" +
    "\016\uff8d\017\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025" +
    "\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\033\uff8d\042\uff8d" +
    "\043\uff8d\046\uff8d\055\uff8d\056\uff8d\057\uff8d\061\uff8d\062" +
    "\uff8d\063\uff8d\064\uff8d\065\uff8d\001\002\000\114\004\156" +
    "\005\155\006\uff92\012\uff92\013\uff92\014\uff92\015\uff92\016" +
    "\uff92\017\uff92\021\uff92\022\uff92\023\uff92\024\uff92\025\uff92" +
    "\026\uff92\027\uff92\030\uff92\031\uff92\033\uff92\036\uff73\037" +
    "\uff73\040\uff73\041\uff73\042\uff92\043\uff92\045\056\046\055" +
    "\047\054\050\057\055\uff92\056\uff92\057\uff92\061\uff92\062" +
    "\uff92\063\uff92\064\uff92\065\uff92\001\002\000\076\004\150" +
    "\005\147\006\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016" +
    "\uff93\017\uff93\021\uff93\022\uff93\023\uff93\024\uff93\025\uff93" +
    "\026\uff93\027\uff93\030\uff93\031\uff93\033\uff93\042\uff93\043" +
    "\uff93\046\uff93\055\uff93\056\uff93\057\uff93\061\uff93\062\uff93" +
    "\063\uff93\064\uff93\065\uff93\001\002\000\126\004\uff97\005" +
    "\uff97\006\uff97\010\uff97\011\uff97\012\uff97\013\uff97\014\uff97" +
    "\015\uff97\016\uff97\017\uff97\021\uff97\022\uff97\023\uff97\024" +
    "\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97\033\uff97" +
    "\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\045" +
    "\uff97\046\uff97\047\uff97\050\uff97\053\uff97\054\uff97\055\uff97" +
    "\056\uff97\057\uff97\060\uff97\061\uff97\062\uff97\063\uff97\064" +
    "\uff97\065\uff97\001\002\000\012\046\047\056\041\063\046" +
    "\064\044\001\002\000\126\004\uff5f\005\uff5f\006\uff5f\010" +
    "\uff5f\011\uff5f\012\uff5f\013\uff5f\014\uff5f\015\uff5f\016\uff5f" +
    "\017\uff5f\021\uff5f\022\uff5f\023\uff5f\024\uff5f\025\uff5f\026" +
    "\uff5f\027\uff5f\030\uff5f\031\uff5f\033\uff5f\036\uff5f\037\uff5f" +
    "\040\uff5f\041\uff5f\042\uff5f\043\uff5f\045\uff5f\046\uff5f\047" +
    "\uff5f\050\uff5f\053\uff5f\054\uff5f\055\uff5f\056\uff5f\057\uff5f" +
    "\060\uff5f\061\uff5f\062\uff5f\063\uff5f\064\uff5f\065\uff5f\001" +
    "\002\000\012\046\047\056\041\063\046\064\044\001\002" +
    "\000\104\004\uff8e\005\uff8e\006\uff8e\012\uff8e\013\uff8e\014" +
    "\uff8e\015\uff8e\016\uff8e\017\uff8e\021\uff8e\022\uff8e\023\uff8e" +
    "\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\033" +
    "\uff8e\042\uff8e\043\uff8e\045\064\046\063\047\062\050\065" +
    "\055\uff8e\056\uff8e\057\uff8e\061\uff8e\062\uff8e\063\uff8e\064" +
    "\uff8e\065\uff8e\001\002\000\104\004\uff8a\005\uff8a\006\uff8a" +
    "\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\021" +
    "\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a" +
    "\030\uff8a\031\uff8a\033\uff8a\042\uff8a\043\uff8a\045\056\046" +
    "\055\047\054\050\057\055\uff8a\056\uff8a\057\uff8a\061\uff8a" +
    "\062\uff8a\063\uff8a\064\uff8a\065\uff8a\001\002\000\104\004" +
    "\uff94\005\uff94\006\uff94\012\uff94\013\uff94\014\uff94\015\uff94" +
    "\016\uff94\017\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025" +
    "\uff94\026\uff94\027\uff94\030\uff94\031\uff94\033\uff94\042\uff94" +
    "\043\uff94\045\064\046\063\047\062\050\065\055\uff94\056" +
    "\uff94\057\uff94\061\uff94\062\uff94\063\uff94\064\uff94\065\uff94" +
    "\001\002\000\104\004\uff90\005\uff90\006\uff90\012\uff90\013" +
    "\uff90\014\uff90\015\uff90\016\uff90\017\uff90\021\uff90\022\uff90" +
    "\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031" +
    "\uff90\033\uff90\042\uff90\043\uff90\045\056\046\055\047\054" +
    "\050\057\055\uff90\056\uff90\057\uff90\061\uff90\062\uff90\063" +
    "\uff90\064\uff90\065\uff90\001\002\000\012\046\047\056\041" +
    "\063\046\064\044\001\002\000\012\046\047\056\041\063" +
    "\046\064\044\001\002\000\012\046\047\056\041\063\046" +
    "\064\044\001\002\000\012\046\047\056\041\063\046\064" +
    "\044\001\002\000\076\004\uff86\005\uff86\006\uff86\012\uff86" +
    "\013\uff86\014\uff86\015\uff86\016\uff86\017\uff86\021\uff86\022" +
    "\uff86\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86" +
    "\031\uff86\033\uff86\042\uff86\043\uff86\046\uff86\055\uff86\056" +
    "\uff86\057\uff86\061\uff86\062\uff86\063\uff86\064\uff86\065\uff86" +
    "\001\002\000\076\004\uff88\005\uff88\006\uff88\012\uff88\013" +
    "\uff88\014\uff88\015\uff88\016\uff88\017\uff88\021\uff88\022\uff88" +
    "\023\uff88\024\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031" +
    "\uff88\033\uff88\042\uff88\043\uff88\046\uff88\055\uff88\056\uff88" +
    "\057\uff88\061\uff88\062\uff88\063\uff88\064\uff88\065\uff88\001" +
    "\002\000\076\004\uff87\005\uff87\006\uff87\012\uff87\013\uff87" +
    "\014\uff87\015\uff87\016\uff87\017\uff87\021\uff87\022\uff87\023" +
    "\uff87\024\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87" +
    "\033\uff87\042\uff87\043\uff87\046\uff87\055\uff87\056\uff87\057" +
    "\uff87\061\uff87\062\uff87\063\uff87\064\uff87\065\uff87\001\002" +
    "\000\076\004\uff85\005\uff85\006\uff85\012\uff85\013\uff85\014" +
    "\uff85\015\uff85\016\uff85\017\uff85\021\uff85\022\uff85\023\uff85" +
    "\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031\uff85\033" +
    "\uff85\042\uff85\043\uff85\046\uff85\055\uff85\056\uff85\057\uff85" +
    "\061\uff85\062\uff85\063\uff85\064\uff85\065\uff85\001\002\000" +
    "\032\036\uff74\037\uff74\040\uff74\041\uff74\042\200\043\176" +
    "\045\064\046\063\047\062\050\065\057\177\061\uffc4\001" +
    "\002\000\010\045\234\057\233\061\uffc3\001\002\000\006" +
    "\057\224\061\223\001\002\000\016\004\150\005\147\042" +
    "\146\043\144\057\145\061\uffc2\001\002\000\004\057\222" +
    "\001\002\000\004\057\uffc8\001\002\000\022\027\115\030" +
    "\123\042\126\046\047\056\227\063\046\064\044\065\110" +
    "\001\002\000\022\027\uffc1\030\uffc1\042\uffc1\046\uffc1\056" +
    "\uffc1\063\uffc1\064\uffc1\065\uffc1\001\002\000\022\027\115" +
    "\030\123\042\126\046\047\056\227\063\046\064\044\065" +
    "\110\001\002\000\024\027\115\030\123\042\126\046\047" +
    "\056\227\061\223\063\046\064\044\065\110\001\002\000" +
    "\022\027\115\030\123\042\126\046\047\056\227\063\046" +
    "\064\044\065\110\001\002\000\006\057\224\061\223\001" +
    "\002\000\026\027\uffc0\030\uffc0\042\uffc0\046\uffc0\056\uffc0" +
    "\057\uffc0\061\uffc0\063\uffc0\064\uffc0\065\uffc0\001\002\000" +
    "\026\027\uffc6\030\uffc6\042\uffc6\046\uffc6\056\uffc6\057\uffc6" +
    "\061\uffc6\063\uffc6\064\uffc6\065\uffc6\001\002\000\072\006" +
    "\uff59\012\uff59\013\uff59\014\uff59\015\uff59\016\uff59\017\uff59" +
    "\021\uff59\022\uff59\023\uff59\024\uff59\025\uff59\026\uff59\027" +
    "\uff59\030\uff59\031\uff59\033\uff59\042\uff59\045\uff59\046\uff59" +
    "\055\uff59\056\uff59\057\uff59\061\uff59\062\uff59\063\uff59\064" +
    "\uff59\065\uff59\001\002\000\010\056\236\064\044\065\110" +
    "\001\002\000\072\006\uff5d\012\uff5d\013\uff5d\014\uff5d\015" +
    "\uff5d\016\uff5d\017\uff5d\021\uff5d\022\uff5d\023\uff5d\024\uff5d" +
    "\025\uff5d\026\uff5d\027\uff5d\030\uff5d\031\uff5d\033\uff5d\042" +
    "\uff5d\045\uff5d\046\uff5d\055\uff5d\056\uff5d\057\uff5d\061\uff5d" +
    "\062\uff5d\063\uff5d\064\uff5d\065\uff5d\001\002\000\010\056" +
    "\236\064\044\065\110\001\002\000\072\006\uff5b\012\uff5b" +
    "\013\uff5b\014\uff5b\015\uff5b\016\uff5b\017\uff5b\021\uff5b\022" +
    "\uff5b\023\uff5b\024\uff5b\025\uff5b\026\uff5b\027\uff5b\030\uff5b" +
    "\031\uff5b\033\uff5b\042\uff5b\045\uff5b\046\uff5b\055\uff5b\056" +
    "\uff5b\057\uff5b\061\uff5b\062\uff5b\063\uff5b\064\uff5b\065\uff5b" +
    "\001\002\000\010\056\236\064\044\065\110\001\002\000" +
    "\072\006\uff5c\012\uff5c\013\uff5c\014\uff5c\015\uff5c\016\uff5c" +
    "\017\uff5c\021\uff5c\022\uff5c\023\uff5c\024\uff5c\025\uff5c\026" +
    "\uff5c\027\uff5c\030\uff5c\031\uff5c\033\uff5c\042\uff5c\045\uff5c" +
    "\046\uff5c\055\uff5c\056\uff5c\057\uff5c\061\uff5c\062\uff5c\063" +
    "\uff5c\064\uff5c\065\uff5c\001\002\000\004\045\240\001\002" +
    "\000\006\045\234\057\233\001\002\000\014\046\047\056" +
    "\245\063\046\064\044\065\110\001\002\000\014\046\047" +
    "\056\245\063\046\064\044\065\110\001\002\000\110\006" +
    "\uff64\012\uff64\013\uff64\014\uff64\015\uff64\016\uff64\017\uff64" +
    "\021\uff64\022\uff64\023\uff64\024\uff64\025\uff64\026\uff64\027" +
    "\uff64\030\uff64\031\uff64\033\uff64\036\uff64\037\uff64\040\uff64" +
    "\041\uff64\042\uff64\043\uff64\045\uff64\046\uff64\047\054\050" +
    "\057\055\uff64\056\uff64\057\uff64\061\uff64\062\uff64\063\uff64" +
    "\064\uff64\065\uff64\001\002\000\014\045\064\046\063\047" +
    "\062\050\065\057\177\001\002\000\012\045\244\046\055" +
    "\047\054\050\057\001\002\000\012\045\056\046\055\047" +
    "\054\050\057\001\002\000\040\006\266\012\302\013\303" +
    "\014\274\015\273\016\301\021\020\022\007\025\262\026" +
    "\257\031\005\033\275\054\261\055\uffab\064\305\001\002" +
    "\000\004\055\uffcb\001\002\000\040\006\266\012\302\013" +
    "\303\014\274\015\273\016\301\021\020\022\007\025\262" +
    "\026\257\031\005\033\275\055\uffab\062\uffab\064\305\001" +
    "\002\000\040\006\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\021\uffbc\022\uffbc\025\uffbc\026\uffbc\031\uffbc\033" +
    "\uffbc\055\uffbc\062\uffbc\064\uffbc\001\002\000\040\006\uffbd" +
    "\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\021\uffbd\022" +
    "\uffbd\025\uffbd\026\uffbd\031\uffbd\033\uffbd\055\uffbd\062\uffbd" +
    "\064\uffbd\001\002\000\004\056\u0137\001\002\000\040\006" +
    "\266\012\302\013\303\014\274\015\273\016\301\021\020" +
    "\022\007\025\262\026\257\031\005\033\275\055\uffab\062" +
    "\uffab\064\305\001\002\000\036\006\266\012\302\013\303" +
    "\014\274\015\273\016\301\021\020\022\007\025\262\026" +
    "\257\031\005\033\275\055\uffab\064\305\001\002\000\004" +
    "\056\u012d\001\002\000\006\052\u0122\064\u0121\001\002\000" +
    "\040\006\266\012\302\013\303\014\274\015\273\016\301" +
    "\021\020\022\007\025\262\026\257\031\005\033\275\055" +
    "\uffab\062\uffab\064\305\001\002\000\004\055\u011f\001\002" +
    "\000\006\031\u010a\064\u010b\001\002\000\040\006\uff3e\012" +
    "\uff3e\013\uff3e\014\uff3e\015\uff3e\016\uff3e\021\uff3e\022\uff3e" +
    "\025\uff3e\026\uff3e\031\uff3e\033\uff3e\055\uff3e\062\uff3e\064" +
    "\uff3e\001\002\000\040\006\uff40\012\uff40\013\uff40\014\uff40" +
    "\015\uff40\016\uff40\021\uff40\022\uff40\025\uff40\026\uff40\031" +
    "\uff40\033\uff40\055\uff40\062\uff40\064\uff40\001\002\000\040" +
    "\006\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\021" +
    "\uffbe\022\uffbe\025\uffbe\026\uffbe\031\uffbe\033\uffbe\055\uffbe" +
    "\062\uffbe\064\uffbe\001\002\000\040\006\uff3f\012\uff3f\013" +
    "\uff3f\014\uff3f\015\uff3f\016\uff3f\021\uff3f\022\uff3f\025\uff3f" +
    "\026\uff3f\031\uff3f\033\uff3f\055\uff3f\062\uff3f\064\uff3f\001" +
    "\002\000\006\014\274\054\u0106\001\002\000\004\056\u0100" +
    "\001\002\000\004\056\361\001\002\000\040\006\uffbf\012" +
    "\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\021\uffbf\022\uffbf" +
    "\025\uffbf\026\uffbf\031\uffbf\033\uffbf\055\uffbf\062\uffbf\064" +
    "\uffbf\001\002\000\040\006\266\012\302\013\303\014\274" +
    "\015\273\016\301\021\020\022\007\025\262\026\257\031" +
    "\005\033\275\055\uffab\062\uffab\064\305\001\002\000\004" +
    "\064\356\001\002\000\022\027\115\030\123\042\126\046" +
    "\047\056\323\063\046\064\044\065\110\001\002\000\004" +
    "\056\343\001\002\000\004\054\332\001\002\000\040\006" +
    "\266\012\302\013\303\014\274\015\273\016\301\021\020" +
    "\022\007\025\262\026\257\031\005\033\275\055\uffab\062" +
    "\uffab\064\305\001\002\000\012\044\310\052\311\056\105" +
    "\064\307\001\002\000\040\006\uffbb\012\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\016\uffbb\021\uffbb\022\uffbb\025\uffbb\026\uffbb" +
    "\031\uffbb\033\uffbb\055\uffbb\062\uffbb\064\uffbb\001\002\000" +
    "\042\006\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9" +
    "\021\uffa9\022\uffa9\025\uffa9\026\uffa9\031\uffa9\033\uffa9\052" +
    "\325\055\uffa9\062\uffa9\064\uffa9\001\002\000\022\027\115" +
    "\030\123\042\126\046\047\056\323\063\046\064\044\065" +
    "\110\001\002\000\014\046\047\053\314\056\041\063\046" +
    "\064\044\001\002\000\046\006\uff79\012\uff79\013\uff79\014" +
    "\uff79\015\uff79\016\uff79\017\uff79\021\uff79\022\uff79\023\uff79" +
    "\024\uff79\025\uff79\026\uff79\031\uff79\033\uff79\055\uff79\062" +
    "\uff79\064\uff79\001\002\000\004\053\315\001\002\000\004" +
    "\064\uff9d\001\002\000\006\044\310\064\uff9b\001\002\000" +
    "\046\006\uff7a\012\uff7a\013\uff7a\014\uff7a\015\uff7a\016\uff7a" +
    "\017\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\026" +
    "\uff7a\031\uff7a\033\uff7a\055\uff7a\062\uff7a\064\uff7a\001\002" +
    "\000\072\006\uff78\012\uff78\013\uff78\014\uff78\015\uff78\016" +
    "\uff78\017\uff78\021\uff78\022\uff78\023\uff78\024\uff78\025\uff78" +
    "\026\uff78\031\uff78\033\uff78\036\uff74\037\uff74\040\uff74\041" +
    "\uff74\042\200\043\176\045\064\046\063\047\062\050\065" +
    "\055\uff78\062\uff78\064\uff78\001\002\000\076\004\156\005" +
    "\155\006\uff75\012\uff75\013\uff75\014\uff75\015\uff75\016\uff75" +
    "\017\uff75\021\uff75\022\uff75\023\uff75\024\uff75\025\uff75\026" +
    "\uff75\031\uff75\033\uff75\036\uff73\037\uff73\040\uff73\041\uff73" +
    "\042\154\043\153\045\244\046\055\047\054\050\057\055" +
    "\uff75\062\uff75\064\uff75\001\002\000\050\006\uff77\012\uff77" +
    "\013\uff77\014\uff77\015\uff77\016\uff77\017\uff77\021\uff77\022" +
    "\uff77\023\uff77\024\uff77\025\uff77\026\uff77\031\uff77\033\uff77" +
    "\045\234\055\uff77\062\uff77\064\uff77\001\002\000\056\004" +
    "\150\005\147\006\uff76\012\uff76\013\uff76\014\uff76\015\uff76" +
    "\016\uff76\017\uff76\021\uff76\022\uff76\023\uff76\024\uff76\025" +
    "\uff76\026\uff76\031\uff76\033\uff76\042\146\043\144\055\uff76" +
    "\062\uff76\064\uff76\001\002\000\022\027\115\030\123\042" +
    "\126\046\047\056\323\063\046\064\044\065\110\001\002" +
    "\000\032\004\156\005\155\036\uff73\037\uff73\040\uff73\041" +
    "\uff73\042\154\043\153\045\244\046\055\047\054\050\057" +
    "\001\002\000\014\046\047\053\327\056\041\063\046\064" +
    "\044\001\002\000\004\053\330\001\002\000\046\006\uffa7" +
    "\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\021" +
    "\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\031\uffa7" +
    "\033\uffa7\055\uffa7\062\uffa7\064\uffa7\001\002\000\046\006" +
    "\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5" +
    "\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\031" +
    "\uffa5\033\uffa5\055\uffa5\062\uffa5\064\uffa5\001\002\000\006" +
    "\055\uffaf\062\uffaf\001\002\000\036\006\266\012\302\013" +
    "\303\014\274\015\273\016\301\021\020\022\007\025\262" +
    "\026\257\031\005\033\275\055\uffab\064\305\001\002\000" +
    "\004\055\334\001\002\000\004\012\335\001\002\000\004" +
    "\056\336\001\002\000\020\027\115\030\123\042\126\046" +
    "\047\056\135\063\046\064\044\001\002\000\034\004\156" +
    "\005\155\036\uff73\037\uff73\040\uff73\041\uff73\042\154\043" +
    "\153\045\056\046\055\047\054\050\057\057\uff57\001\002" +
    "\000\014\004\150\005\147\042\146\043\144\057\uff58\001" +
    "\002\000\004\057\342\001\002\000\040\006\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\015\uffb7\016\uffb7\021\uffb7\022\uffb7\025" +
    "\uffb7\026\uffb7\031\uffb7\033\uffb7\055\uffb7\062\uffb7\064\uffb7" +
    "\001\002\000\020\027\115\030\123\042\126\046\047\056" +
    "\135\063\046\064\044\001\002\000\004\057\345\001\002" +
    "\000\004\013\346\001\002\000\004\054\347\001\002\000" +
    "\036\006\266\012\302\013\303\014\274\015\273\016\301" +
    "\021\020\022\007\025\262\026\257\031\005\033\275\055" +
    "\uffab\064\305\001\002\000\004\055\351\001\002\000\040" +
    "\006\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\021" +
    "\uffb8\022\uffb8\025\uffb8\026\uffb8\031\uffb8\033\uffb8\055\uffb8" +
    "\062\uffb8\064\uffb8\001\002\000\064\006\uff43\012\uff43\013" +
    "\uff43\014\uff43\015\uff43\016\uff43\021\uff43\022\uff43\025\uff43" +
    "\026\uff43\031\uff43\033\uff43\036\uff74\037\uff74\040\uff74\041" +
    "\uff74\042\200\043\176\045\064\046\063\047\062\050\065" +
    "\055\uff43\062\uff43\064\uff43\001\002\000\070\004\156\005" +
    "\155\006\uff44\012\uff44\013\uff44\014\uff44\015\uff44\016\uff44" +
    "\021\uff44\022\uff44\025\uff44\026\uff44\031\uff44\033\uff44\036" +
    "\uff73\037\uff73\040\uff73\041\uff73\042\154\043\153\045\244" +
    "\046\055\047\054\050\057\055\uff44\062\uff44\064\uff44\001" +
    "\002\000\042\006\uff42\012\uff42\013\uff42\014\uff42\015\uff42" +
    "\016\uff42\021\uff42\022\uff42\025\uff42\026\uff42\031\uff42\033" +
    "\uff42\045\234\055\uff42\062\uff42\064\uff42\001\002\000\050" +
    "\004\150\005\147\006\uff41\012\uff41\013\uff41\014\uff41\015" +
    "\uff41\016\uff41\021\uff41\022\uff41\025\uff41\026\uff41\031\uff41" +
    "\033\uff41\042\146\043\144\055\uff41\062\uff41\064\uff41\001" +
    "\002\000\042\006\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4" +
    "\016\uffa4\021\uffa4\022\uffa4\025\uffa4\026\uffa4\031\uffa4\033" +
    "\uffa4\044\310\055\uffa4\062\uffa4\064\uffa4\001\002\000\046" +
    "\006\uff7b\012\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b\017" +
    "\uff7b\021\uff7b\022\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b" +
    "\031\uff7b\033\uff7b\055\uff7b\062\uff7b\064\uff7b\001\002\000" +
    "\006\055\uffad\062\uffad\001\002\000\004\064\362\001\002" +
    "\000\004\057\363\001\002\000\004\054\364\001\002\000" +
    "\006\034\367\035\366\001\002\000\004\055\377\001\002" +
    "\000\004\060\374\001\002\000\012\046\047\056\041\063" +
    "\046\064\044\001\002\000\014\045\064\046\063\047\062" +
    "\050\065\060\371\001\002\000\036\006\266\012\302\013" +
    "\303\014\274\015\273\016\301\021\020\022\007\025\262" +
    "\026\257\031\005\033\275\062\uffab\064\305\001\002\000" +
    "\004\062\373\001\002\000\004\055\uffb2\001\002\000\036" +
    "\006\266\012\302\013\303\014\274\015\273\016\301\021" +
    "\020\022\007\025\262\026\257\031\005\033\275\062\uffab" +
    "\064\305\001\002\000\004\062\376\001\002\000\004\055" +
    "\uffb1\001\002\000\040\006\uffb3\012\uffb3\013\uffb3\014\uffb3" +
    "\015\uffb3\016\uffb3\021\uffb3\022\uffb3\025\uffb3\026\uffb3\031" +
    "\uffb3\033\uffb3\055\uffb3\062\uffb3\064\uffb3\001\002\000\020" +
    "\027\115\030\123\042\126\046\047\056\135\063\046\064" +
    "\044\001\002\000\004\057\u0102\001\002\000\004\054\u0103" +
    "\001\002\000\036\006\266\012\302\013\303\014\274\015" +
    "\273\016\301\021\020\022\007\025\262\026\257\031\005" +
    "\033\275\055\uffab\064\305\001\002\000\004\055\u0105\001" +
    "\002\000\040\006\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6" +
    "\016\uffb6\021\uffb6\022\uffb6\025\uffb6\026\uffb6\031\uffb6\033" +
    "\uffb6\055\uffb6\062\uffb6\064\uffb6\001\002\000\036\006\266" +
    "\012\302\013\303\014\274\015\273\016\301\021\020\022" +
    "\007\025\262\026\257\031\005\033\275\055\uffab\064\305" +
    "\001\002\000\040\006\uffb5\012\uffb5\013\uffb5\014\uffb5\015" +
    "\uffb5\016\uffb5\021\uffb5\022\uffb5\025\uffb5\026\uffb5\031\uffb5" +
    "\033\uffb5\055\uffb5\062\uffb5\064\uffb5\001\002\000\004\055" +
    "\u0109\001\002\000\040\006\uffb4\012\uffb4\013\uffb4\014\uffb4" +
    "\015\uffb4\016\uffb4\021\uffb4\022\uffb4\025\uffb4\026\uffb4\031" +
    "\uffb4\033\uffb4\055\uffb4\062\uffb4\064\uffb4\001\002\000\004" +
    "\064\u0115\001\002\000\004\007\u010c\001\002\000\012\046" +
    "\047\056\041\063\046\064\044\001\002\000\004\010\u010e" +
    "\001\002\000\012\046\047\056\041\063\046\064\044\001" +
    "\002\000\004\011\u0110\001\002\000\012\046\047\056\041" +
    "\063\046\064\044\001\002\000\004\054\u0112\001\002\000" +
    "\036\006\266\012\302\013\303\014\274\015\273\016\301" +
    "\021\020\022\007\025\262\026\257\031\005\033\275\055" +
    "\uffab\064\305\001\002\000\004\055\u0114\001\002\000\040" +
    "\006\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\021" +
    "\uffba\022\uffba\025\uffba\026\uffba\031\uffba\033\uffba\055\uffba" +
    "\062\uffba\064\uffba\001\002\000\004\007\u0116\001\002\000" +
    "\012\046\047\056\041\063\046\064\044\001\002\000\004" +
    "\010\u0118\001\002\000\012\046\047\056\041\063\046\064" +
    "\044\001\002\000\004\011\u011a\001\002\000\012\046\047" +
    "\056\041\063\046\064\044\001\002\000\004\054\u011c\001" +
    "\002\000\036\006\266\012\302\013\303\014\274\015\273" +
    "\016\301\021\020\022\007\025\262\026\257\031\005\033" +
    "\275\055\uffab\064\305\001\002\000\004\055\u011e\001\002" +
    "\000\040\006\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016" +
    "\uffb9\021\uffb9\022\uffb9\025\uffb9\026\uffb9\031\uffb9\033\uffb9" +
    "\055\uffb9\062\uffb9\064\uffb9\001\002\000\024\002\uffe2\017" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\031\uffe2\055\uffe2" +
    "\064\uffe2\001\002\000\006\055\uffae\062\uffae\001\002\000" +
    "\044\006\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa" +
    "\021\uffaa\022\uffaa\025\uffaa\026\uffaa\031\uffaa\033\uffaa\044" +
    "\310\052\u0126\055\uffaa\062\uffaa\064\uffaa\001\002\000\014" +
    "\046\047\053\u0124\056\041\063\046\064\044\001\002\000" +
    "\004\053\u0125\001\002\000\004\064\uff9e\001\002\000\004" +
    "\064\uff9c\001\002\000\014\046\047\053\u0129\056\041\063" +
    "\046\064\044\001\002\000\046\006\uff7e\012\uff7e\013\uff7e" +
    "\014\uff7e\015\uff7e\016\uff7e\017\uff7e\021\uff7e\022\uff7e\023" +
    "\uff7e\024\uff7e\025\uff7e\026\uff7e\031\uff7e\033\uff7e\055\uff7e" +
    "\062\uff7e\064\uff7e\001\002\000\004\053\u012b\001\002\000" +
    "\050\006\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8" +
    "\017\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026" +
    "\uffa8\031\uffa8\033\uffa8\044\310\055\uffa8\062\uffa8\064\uffa8" +
    "\001\002\000\046\006\uff7d\012\uff7d\013\uff7d\014\uff7d\015" +
    "\uff7d\016\uff7d\017\uff7d\021\uff7d\022\uff7d\023\uff7d\024\uff7d" +
    "\025\uff7d\026\uff7d\031\uff7d\033\uff7d\055\uff7d\062\uff7d\064" +
    "\uff7d\001\002\000\050\006\uffa6\012\uffa6\013\uffa6\014\uffa6" +
    "\015\uffa6\016\uffa6\017\uffa6\021\uffa6\022\uffa6\023\uffa6\024" +
    "\uffa6\025\uffa6\026\uffa6\031\uffa6\033\uffa6\044\310\055\uffa6" +
    "\062\uffa6\064\uffa6\001\002\000\046\006\uff7c\012\uff7c\013" +
    "\uff7c\014\uff7c\015\uff7c\016\uff7c\017\uff7c\021\uff7c\022\uff7c" +
    "\023\uff7c\024\uff7c\025\uff7c\026\uff7c\031\uff7c\033\uff7c\055" +
    "\uff7c\062\uff7c\064\uff7c\001\002\000\012\056\236\063\u0130" +
    "\064\044\065\110\001\002\000\006\045\234\057\u0133\001" +
    "\002\000\006\045\240\057\u0132\001\002\000\004\057\u0131" +
    "\001\002\000\040\006\uff46\012\uff46\013\uff46\014\uff46\015" +
    "\uff46\016\uff46\021\uff46\022\uff46\025\uff46\026\uff46\031\uff46" +
    "\033\uff46\055\uff46\062\uff46\064\uff46\001\002\000\040\006" +
    "\uff47\012\uff47\013\uff47\014\uff47\015\uff47\016\uff47\021\uff47" +
    "\022\uff47\025\uff47\026\uff47\031\uff47\033\uff47\055\uff47\062" +
    "\uff47\064\uff47\001\002\000\040\006\uff48\012\uff48\013\uff48" +
    "\014\uff48\015\uff48\016\uff48\021\uff48\022\uff48\025\uff48\026" +
    "\uff48\031\uff48\033\uff48\055\uff48\062\uff48\064\uff48\001\002" +
    "\000\004\055\u0135\001\002\000\024\002\ufff2\017\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\031\ufff2\055\ufff2\064\ufff2" +
    "\001\002\000\006\055\uffb0\062\uffb0\001\002\000\004\064" +
    "\u0138\001\002\000\004\057\u0139\001\002\000\040\006\uff45" +
    "\012\uff45\013\uff45\014\uff45\015\uff45\016\uff45\021\uff45\022" +
    "\uff45\025\uff45\026\uff45\031\uff45\033\uff45\055\uff45\062\uff45" +
    "\064\uff45\001\002\000\006\055\uffac\062\uffac\001\002\000" +
    "\036\006\266\012\302\013\303\014\274\015\273\016\301" +
    "\021\020\022\007\025\262\026\257\031\005\033\275\055" +
    "\uffab\064\305\001\002\000\004\055\u013d\001\002\000\024" +
    "\002\uffe1\017\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\031" +
    "\uffe1\055\uffe1\064\uffe1\001\002\000\004\055\u013f\001\002" +
    "\000\024\002\ufff1\017\ufff1\021\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\031\ufff1\055\ufff1\064\ufff1\001\002\000\016\021\020" +
    "\022\007\031\005\057\uffd5\061\u0141\064\024\001\002\000" +
    "\012\021\020\022\007\031\005\064\024\001\002\000\004" +
    "\057\uffd3\001\002\000\004\057\uffd7\001\002\000\004\056" +
    "\u0145\001\002\000\014\021\020\022\007\031\005\057\u0147" +
    "\064\024\001\002\000\004\057\u014d\001\002\000\040\006" +
    "\266\012\302\013\303\014\274\015\273\016\301\021\020" +
    "\022\007\025\262\026\257\031\005\033\275\054\u0148\055" +
    "\uffab\064\305\001\002\000\036\006\266\012\302\013\303" +
    "\014\274\015\273\016\301\021\020\022\007\025\262\026" +
    "\257\031\005\033\275\055\uffab\064\305\001\002\000\004" +
    "\055\u014a\001\002\000\024\002\uffde\017\uffde\021\uffde\022" +
    "\uffde\023\uffde\024\uffde\031\uffde\055\uffde\064\uffde\001\002" +
    "\000\004\055\u014c\001\002\000\024\002\uffee\017\uffee\021" +
    "\uffee\022\uffee\023\uffee\024\uffee\031\uffee\055\uffee\064\uffee" +
    "\001\002\000\040\006\266\012\302\013\303\014\274\015" +
    "\273\016\301\021\020\022\007\025\262\026\257\031\005" +
    "\033\275\054\u014e\055\uffab\064\305\001\002\000\036\006" +
    "\266\012\302\013\303\014\274\015\273\016\301\021\020" +
    "\022\007\025\262\026\257\031\005\033\275\055\uffab\064" +
    "\305\001\002\000\004\055\u0150\001\002\000\024\002\uffe0" +
    "\017\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\031\uffe0\055" +
    "\uffe0\064\uffe0\001\002\000\004\055\u0152\001\002\000\024" +
    "\002\ufff0\017\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\031" +
    "\ufff0\055\ufff0\064\ufff0\001\002\000\004\002\ufffe\001\002" +
    "\000\006\052\u01a8\064\u01a7\001\002\000\004\064\u0198\001" +
    "\002\000\004\064\u0189\001\002\000\006\052\u0122\064\u017a" +
    "\001\002\000\004\064\u0159\001\002\000\024\017\011\021" +
    "\020\022\007\023\006\024\015\031\005\054\u015a\055\uffcc" +
    "\064\u015d\001\002\000\022\017\011\021\020\022\007\023" +
    "\006\024\015\031\005\055\uffcc\064\u015d\001\002\000\022" +
    "\017\011\021\020\022\007\023\006\024\015\031\005\055" +
    "\uffcc\064\u015d\001\002\000\022\017\011\021\020\022\007" +
    "\023\006\024\015\031\005\055\uffcc\064\u015d\001\002\000" +
    "\010\044\310\052\311\064\u0167\001\002\000\014\017\u0156" +
    "\021\020\022\007\031\005\064\u0154\001\002\000\022\017" +
    "\011\021\020\022\007\023\006\024\015\031\005\055\uffcc" +
    "\064\u015d\001\002\000\006\052\u0122\064\u0165\001\002\000" +
    "\004\055\u0164\001\002\000\004\064\u0163\001\002\000\026" +
    "\017\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\031\uffa4\044" +
    "\310\055\uffa4\056\023\064\uffa4\001\002\000\022\002\ufffb" +
    "\017\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\031\ufffb\064" +
    "\ufffb\001\002\000\030\017\uffaa\021\uffaa\022\uffaa\023\uffaa" +
    "\024\uffaa\031\uffaa\044\310\052\u0126\055\uffaa\056\u0145\064" +
    "\uffaa\001\002\000\004\055\uffcf\001\002\000\026\017\uffa9" +
    "\021\uffa9\022\uffa9\023\uffa9\024\uffa9\031\uffa9\052\325\055" +
    "\uffa9\056\u0168\064\uffa9\001\002\000\014\021\020\022\007" +
    "\031\005\057\u0169\064\024\001\002\000\040\006\266\012" +
    "\302\013\303\014\274\015\273\016\301\021\020\022\007" +
    "\025\262\026\257\031\005\033\275\054\u0171\055\uffab\064" +
    "\305\001\002\000\004\057\u016b\001\002\000\040\006\266" +
    "\012\302\013\303\014\274\015\273\016\301\021\020\022" +
    "\007\025\262\026\257\031\005\033\275\054\u016c\055\uffab" +
    "\064\305\001\002\000\036\006\266\012\302\013\303\014" +
    "\274\015\273\016\301\021\020\022\007\025\262\026\257" +
    "\031\005\033\275\055\uffab\064\305\001\002\000\004\055" +
    "\u016e\001\002\000\024\002\uffdf\017\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\031\uffdf\055\uffdf\064\uffdf\001\002\000" +
    "\004\055\u0170\001\002\000\024\002\uffef\017\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\031\uffef\055\uffef\064\uffef\001" +
    "\002\000\036\006\266\012\302\013\303\014\274\015\273" +
    "\016\301\021\020\022\007\025\262\026\257\031\005\033" +
    "\275\055\uffab\064\305\001\002\000\004\055\u0173\001\002" +
    "\000\024\002\uffdd\017\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\031\uffdd\055\uffdd\064\uffdd\001\002\000\004\055\u0175" +
    "\001\002\000\024\002\uffed\017\uffed\021\uffed\022\uffed\023" +
    "\uffed\024\uffed\031\uffed\055\uffed\064\uffed\001\002\000\004" +
    "\055\uffcd\001\002\000\004\055\uffce\001\002\000\004\055" +
    "\u0179\001\002\000\022\002\ufffc\017\ufffc\021\ufffc\022\ufffc" +
    "\023\ufffc\024\ufffc\031\ufffc\064\ufffc\001\002\000\004\056" +
    "\u017b\001\002\000\014\021\020\022\007\031\005\057\u017c" +
    "\064\024\001\002\000\040\006\266\012\302\013\303\014" +
    "\274\015\273\016\301\021\020\022\007\025\262\026\257" +
    "\031\005\033\275\054\u0184\055\uffab\064\305\001\002\000" +
    "\004\057\u017e\001\002\000\040\006\266\012\302\013\303" +
    "\014\274\015\273\016\301\021\020\022\007\025\262\026" +
    "\257\031\005\033\275\054\u017f\055\uffab\064\305\001\002" +
    "\000\036\006\266\012\302\013\303\014\274\015\273\016" +
    "\301\021\020\022\007\025\262\026\257\031\005\033\275" +
    "\055\uffab\064\305\001\002\000\004\055\u0181\001\002\000" +
    "\024\002\uffe8\017\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\031\uffe8\055\uffe8\064\uffe8\001\002\000\004\055\u0183\001" +
    "\002\000\024\002\ufff8\017\ufff8\021\ufff8\022\ufff8\023\ufff8" +
    "\024\ufff8\031\ufff8\055\ufff8\064\ufff8\001\002\000\036\006" +
    "\266\012\302\013\303\014\274\015\273\016\301\021\020" +
    "\022\007\025\262\026\257\031\005\033\275\055\uffab\064" +
    "\305\001\002\000\004\055\u0186\001\002\000\024\002\uffe6" +
    "\017\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\031\uffe6\055" +
    "\uffe6\064\uffe6\001\002\000\004\055\u0188\001\002\000\024" +
    "\002\ufff6\017\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\031" +
    "\ufff6\055\ufff6\064\ufff6\001\002\000\004\056\u018a\001\002" +
    "\000\014\021\020\022\007\031\005\057\u018b\064\024\001" +
    "\002\000\040\006\266\012\302\013\303\014\274\015\273" +
    "\016\301\021\020\022\007\025\262\026\257\031\005\033" +
    "\275\054\u0193\055\uffab\064\305\001\002\000\004\057\u018d" +
    "\001\002\000\040\006\266\012\302\013\303\014\274\015" +
    "\273\016\301\021\020\022\007\025\262\026\257\031\005" +
    "\033\275\054\u018e\055\uffab\064\305\001\002\000\036\006" +
    "\266\012\302\013\303\014\274\015\273\016\301\021\020" +
    "\022\007\025\262\026\257\031\005\033\275\055\uffab\064" +
    "\305\001\002\000\004\055\u0190\001\002\000\024\002\uffe4" +
    "\017\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\031\uffe4\055" +
    "\uffe4\064\uffe4\001\002\000\004\055\u0192\001\002\000\024" +
    "\002\ufff4\017\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\031" +
    "\ufff4\055\ufff4\064\ufff4\001\002\000\036\006\266\012\302" +
    "\013\303\014\274\015\273\016\301\021\020\022\007\025" +
    "\262\026\257\031\005\033\275\055\uffab\064\305\001\002" +
    "\000\004\055\u0195\001\002\000\024\002\uffe3\017\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\031\uffe3\055\uffe3\064\uffe3" +
    "\001\002\000\004\055\u0197\001\002\000\024\002\ufff3\017" +
    "\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\031\ufff3\055\ufff3" +
    "\064\ufff3\001\002\000\004\056\u0199\001\002\000\014\021" +
    "\020\022\007\031\005\057\u019b\064\024\001\002\000\004" +
    "\057\u01a1\001\002\000\040\006\266\012\302\013\303\014" +
    "\274\015\273\016\301\021\020\022\007\025\262\026\257" +
    "\031\005\033\275\054\u019c\055\uffab\064\305\001\002\000" +
    "\036\006\266\012\302\013\303\014\274\015\273\016\301" +
    "\021\020\022\007\025\262\026\257\031\005\033\275\055" +
    "\uffab\064\305\001\002\000\004\055\u019e\001\002\000\024" +
    "\002\uffe9\017\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\031" +
    "\uffe9\055\uffe9\064\uffe9\001\002\000\004\055\u01a0\001\002" +
    "\000\024\002\ufff9\017\ufff9\021\ufff9\022\ufff9\023\ufff9\024" +
    "\ufff9\031\ufff9\055\ufff9\064\ufff9\001\002\000\040\006\266" +
    "\012\302\013\303\014\274\015\273\016\301\021\020\022" +
    "\007\025\262\026\257\031\005\033\275\054\u01a2\055\uffab" +
    "\064\305\001\002\000\036\006\266\012\302\013\303\014" +
    "\274\015\273\016\301\021\020\022\007\025\262\026\257" +
    "\031\005\033\275\055\uffab\064\305\001\002\000\004\055" +
    "\u01a4\001\002\000\024\002\uffea\017\uffea\021\uffea\022\uffea" +
    "\023\uffea\024\uffea\031\uffea\055\uffea\064\uffea\001\002\000" +
    "\004\055\u01a6\001\002\000\024\002\ufffa\017\ufffa\021\ufffa" +
    "\022\ufffa\023\ufffa\024\ufffa\031\ufffa\055\ufffa\064\ufffa\001" +
    "\002\000\004\056\u01ab\001\002\000\014\046\047\053\314" +
    "\056\041\063\046\064\044\001\002\000\004\053\u01aa\001" +
    "\002\000\004\064\uff9b\001\002\000\014\021\020\022\007" +
    "\031\005\057\u01ad\064\024\001\002\000\004\057\u01b3\001" +
    "\002\000\040\006\266\012\302\013\303\014\274\015\273" +
    "\016\301\021\020\022\007\025\262\026\257\031\005\033" +
    "\275\054\u01ae\055\uffab\064\305\001\002\000\036\006\266" +
    "\012\302\013\303\014\274\015\273\016\301\021\020\022" +
    "\007\025\262\026\257\031\005\033\275\055\uffab\064\305" +
    "\001\002\000\004\055\u01b0\001\002\000\024\002\uffe5\017" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\031\uffe5\055\uffe5" +
    "\064\uffe5\001\002\000\004\055\u01b2\001\002\000\024\002" +
    "\ufff5\017\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\031\ufff5" +
    "\055\ufff5\064\ufff5\001\002\000\040\006\266\012\302\013" +
    "\303\014\274\015\273\016\301\021\020\022\007\025\262" +
    "\026\257\031\005\033\275\054\u01b4\055\uffab\064\305\001" +
    "\002\000\036\006\266\012\302\013\303\014\274\015\273" +
    "\016\301\021\020\022\007\025\262\026\257\031\005\033" +
    "\275\055\uffab\064\305\001\002\000\004\055\u01b6\001\002" +
    "\000\024\002\uffe7\017\uffe7\021\uffe7\022\uffe7\023\uffe7\024" +
    "\uffe7\031\uffe7\055\uffe7\064\uffe7\001\002\000\004\055\u01b8" +
    "\001\002\000\024\002\ufff7\017\ufff7\021\ufff7\022\ufff7\023" +
    "\ufff7\024\ufff7\031\ufff7\055\ufff7\064\ufff7\001\002\000\004" +
    "\056\u01ba\001\002\000\014\021\020\022\007\031\005\057" +
    "\u01bc\064\024\001\002\000\004\057\u01c2\001\002\000\040" +
    "\006\266\012\302\013\303\014\274\015\273\016\301\021" +
    "\020\022\007\025\262\026\257\031\005\033\275\054\u01bd" +
    "\055\uffab\064\305\001\002\000\036\006\266\012\302\013" +
    "\303\014\274\015\273\016\301\021\020\022\007\025\262" +
    "\026\257\031\005\033\275\055\uffab\064\305\001\002\000" +
    "\004\055\u01bf\001\002\000\024\002\uffdb\017\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\031\uffdb\055\uffdb\064\uffdb\001" +
    "\002\000\004\055\u01c1\001\002\000\024\002\uffeb\017\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\024\uffeb\031\uffeb\055\uffeb\064" +
    "\uffeb\001\002\000\040\006\266\012\302\013\303\014\274" +
    "\015\273\016\301\021\020\022\007\025\262\026\257\031" +
    "\005\033\275\054\u01c3\055\uffab\064\305\001\002\000\036" +
    "\006\266\012\302\013\303\014\274\015\273\016\301\021" +
    "\020\022\007\025\262\026\257\031\005\033\275\055\uffab" +
    "\064\305\001\002\000\004\055\u01c5\001\002\000\024\002" +
    "\uffdc\017\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\031\uffdc" +
    "\055\uffdc\064\uffdc\001\002\000\004\055\u01c7\001\002\000" +
    "\024\002\uffec\017\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\031\uffec\055\uffec\064\uffec\001\002\000\004\056\u0168\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01c7\000\016\002\003\003\016\005\012\010\011\015" +
    "\013\016\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\u0156\016\u0154\001\001\000\016" +
    "\002\u0152\003\016\005\012\010\011\015\013\016\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\002\020\003\016\005\012\010\011\015\013\016" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\025\015\026\001\001\000\004\007" +
    "\u013f\001\001\000\044\013\303\015\262\016\277\035\257" +
    "\042\276\045\263\046\275\047\270\050\255\051\305\052" +
    "\254\054\252\055\253\056\267\057\271\060\266\061\u013b" +
    "\001\001\000\002\001\001\000\004\007\030\001\001\000" +
    "\002\001\001\000\006\006\032\015\026\001\001\000\006" +
    "\006\033\015\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\007\050\017\037\027\041\030\044\040\042" +
    "\041\036\042\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\007\050\017\141\027\246" +
    "\040\250\041\137\042\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\007\050\017\037\027\051\040\052\041" +
    "\036\042\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\007\050\017" +
    "\037\027\101\040\102\041\036\042\035\001\001\000\016" +
    "\007\050\017\037\027\077\040\100\041\036\042\035\001" +
    "\001\000\016\007\050\017\037\027\075\040\076\041\036" +
    "\042\035\001\001\000\016\007\050\017\037\027\057\040" +
    "\060\041\036\042\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\007\050\017\037\027\073\040\074\041" +
    "\036\042\035\001\001\000\016\007\050\017\037\027\071" +
    "\040\072\041\036\042\035\001\001\000\016\007\050\017" +
    "\037\027\067\040\070\041\036\042\035\001\001\000\016" +
    "\007\050\017\037\027\065\040\066\041\036\042\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\007\050" +
    "\017\037\020\110\021\126\022\124\023\106\024\111\025" +
    "\123\026\117\027\105\030\121\031\116\033\113\040\112" +
    "\041\036\042\035\043\127\044\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\007\050\017\141\020\110\021\126\022" +
    "\124\023\106\024\111\025\123\026\117\027\214\030\121" +
    "\031\217\033\215\040\112\041\137\042\035\043\220\044" +
    "\216\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\007\050\017\037\020" +
    "\110\021\126\022\124\023\106\024\111\025\123\026\117" +
    "\027\131\030\121\031\133\040\132\041\036\042\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\007\050\017\141\020\110\021\126\022\124\023\106" +
    "\024\111\025\123\026\117\027\135\030\121\031\140\040" +
    "\136\041\137\042\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\007\050\017\037\020\110" +
    "\021\126\022\124\023\106\024\111\025\123\026\117\027" +
    "\131\030\121\031\173\040\172\041\036\042\035\001\001" +
    "\000\002\001\001\000\040\007\050\017\037\020\110\021" +
    "\126\022\124\023\106\024\111\025\123\026\117\027\131" +
    "\030\121\031\171\040\170\041\036\042\035\001\001\000" +
    "\040\007\050\017\037\020\110\021\126\022\124\023\106" +
    "\024\111\025\123\026\117\027\131\030\121\031\167\040" +
    "\166\041\036\042\035\001\001\000\040\007\050\017\037" +
    "\020\110\021\126\022\124\023\106\024\111\025\123\026" +
    "\117\027\131\030\121\031\151\040\150\041\036\042\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\007" +
    "\050\017\037\027\164\040\165\041\036\042\035\001\001" +
    "\000\016\007\050\017\037\027\162\040\163\041\036\042" +
    "\035\001\001\000\040\007\050\017\037\020\110\021\126" +
    "\022\124\023\106\024\111\025\123\026\117\027\131\030" +
    "\121\031\161\040\160\041\036\042\035\001\001\000\040" +
    "\007\050\017\037\020\110\021\126\022\124\023\106\024" +
    "\111\025\123\026\117\027\131\030\121\031\157\040\156" +
    "\041\036\042\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\050\017\037\027\202\040\203\041\036" +
    "\042\035\001\001\000\002\001\001\000\016\007\050\017" +
    "\037\027\200\040\201\041\036\042\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\007\050\017\037\027\041\030\213\040\042" +
    "\041\036\042\035\001\001\000\020\007\050\017\037\027" +
    "\041\030\212\040\042\041\036\042\035\001\001\000\020" +
    "\007\050\017\037\027\041\030\211\040\042\041\036\042" +
    "\035\001\001\000\020\007\050\017\037\027\041\030\210" +
    "\040\042\041\036\042\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\007\050" +
    "\017\037\020\110\021\126\022\124\023\106\024\111\025" +
    "\123\026\117\027\105\030\121\031\116\033\113\040\112" +
    "\041\036\042\035\044\231\001\001\000\004\062\224\001" +
    "\001\000\044\007\050\017\037\020\110\021\126\022\124" +
    "\023\106\024\111\025\123\026\117\027\105\030\121\031" +
    "\116\033\113\040\112\041\036\042\035\044\225\001\001" +
    "\000\044\007\050\017\037\020\110\021\126\022\124\023" +
    "\106\024\111\025\123\026\117\027\105\030\121\031\116" +
    "\033\113\040\112\041\036\042\035\044\230\001\001\000" +
    "\044\007\050\017\141\020\110\021\126\022\124\023\106" +
    "\024\111\025\123\026\117\027\214\030\121\031\217\033" +
    "\215\040\112\041\137\042\035\044\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\050\017\037\033\234\040\236\041\036" +
    "\042\035\001\001\000\002\001\001\000\016\007\050\017" +
    "\141\033\242\040\241\041\137\042\035\001\001\000\002" +
    "\001\001\000\016\007\050\017\037\033\240\040\241\041" +
    "\036\042\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\050\017\037\027\075\033" +
    "\240\040\245\041\036\042\035\001\001\000\020\007\050" +
    "\017\141\027\246\033\242\040\247\041\137\042\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\013\303\015\262\016\277\035" +
    "\257\042\276\045\263\046\275\047\270\050\255\051\305" +
    "\052\254\054\252\055\253\056\267\057\271\060\266\061" +
    "\264\001\001\000\002\001\001\000\042\013\303\015\262" +
    "\016\277\035\257\042\276\045\263\046\275\047\270\050" +
    "\255\051\305\052\254\054\u0139\055\253\056\267\057\271" +
    "\060\266\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\013\303\015\262\016\277\035\257" +
    "\042\276\045\263\046\275\047\270\050\255\051\305\052" +
    "\254\054\u0135\055\253\056\267\057\271\060\266\001\001" +
    "\000\044\013\303\015\262\016\277\035\257\042\276\045" +
    "\263\046\275\047\270\050\255\051\305\052\254\054\252" +
    "\055\253\056\267\057\271\060\266\061\u0133\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\013\303\015\262" +
    "\016\277\035\257\042\276\045\263\046\275\047\270\050" +
    "\255\051\305\052\254\054\u011f\055\253\056\267\057\271" +
    "\060\266\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\u0106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\013\303\015\262" +
    "\016\277\035\257\042\276\045\263\046\275\047\270\050" +
    "\255\051\305\052\254\054\357\055\253\056\267\057\271" +
    "\060\266\001\001\000\002\001\001\000\042\007\050\017" +
    "\037\020\110\021\126\022\124\023\106\024\111\025\123" +
    "\026\117\027\351\030\121\031\354\033\353\040\352\041" +
    "\036\042\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\013\303\015\262\016\277\035\257\042\276\045" +
    "\263\046\275\047\270\050\255\051\305\052\254\054\330" +
    "\055\253\056\267\057\271\060\266\001\001\000\004\036" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\007\050\017\037\020\110\021\126\022\124\023\106\024" +
    "\111\025\123\026\117\027\316\030\121\031\321\033\320" +
    "\040\317\041\036\042\035\001\001\000\020\007\050\017" +
    "\037\027\041\030\312\040\042\041\036\042\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\315\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\007\050\017\141\020\110\021\126\022\124\023\106" +
    "\024\111\025\123\026\117\027\135\030\121\031\140\033" +
    "\242\040\323\041\137\042\035\001\001\000\002\001\001" +
    "\000\020\007\050\017\037\027\041\030\325\040\042\041" +
    "\036\042\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\013\303\015" +
    "\262\016\277\035\257\042\276\045\263\046\275\047\270" +
    "\050\255\051\305\052\254\054\332\055\253\056\267\057" +
    "\271\060\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\007\050\017\037\020\110\021" +
    "\126\022\124\023\106\024\111\025\123\026\117\027\131" +
    "\030\121\031\337\032\340\040\336\041\036\042\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\007\050\017\037\020\110\021" +
    "\126\022\124\023\106\024\111\025\123\026\117\027\131" +
    "\030\121\031\337\032\343\040\336\041\036\042\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\013\303\015\262\016\277\035\257\042\276\045" +
    "\263\046\275\047\270\050\255\051\305\052\254\054\347" +
    "\055\253\056\267\057\271\060\266\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\356\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\364\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\007\050" +
    "\017\037\027\367\040\250\041\036\042\035\001\001\000" +
    "\002\001\001\000\042\013\303\015\262\016\277\035\257" +
    "\042\276\045\263\046\275\047\270\050\255\051\305\052" +
    "\254\054\371\055\253\056\267\057\271\060\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\013\303\015" +
    "\262\016\277\035\257\042\276\045\263\046\275\047\270" +
    "\050\255\051\305\052\254\054\374\055\253\056\267\057" +
    "\271\060\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\007\050\017\037\020\110\021" +
    "\126\022\124\023\106\024\111\025\123\026\117\027\131" +
    "\030\121\031\337\032\u0100\040\336\041\036\042\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\013\303" +
    "\015\262\016\277\035\257\042\276\045\263\046\275\047" +
    "\270\050\255\051\305\052\254\054\u0103\055\253\056\267" +
    "\057\271\060\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\013\303\015\262\016\277\035\257\042\276" +
    "\045\263\046\275\047\270\050\255\051\305\052\254\054" +
    "\u0107\055\253\056\267\057\271\060\266\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\050\017\037\027\041" +
    "\030\u010c\040\042\041\036\042\035\001\001\000\002\001" +
    "\001\000\020\007\050\017\037\027\041\030\u010e\040\042" +
    "\041\036\042\035\001\001\000\002\001\001\000\020\007" +
    "\050\017\037\027\041\030\u0110\040\042\041\036\042\035" +
    "\001\001\000\002\001\001\000\042\013\303\015\262\016" +
    "\277\035\257\042\276\045\263\046\275\047\270\050\255" +
    "\051\305\052\254\054\u0112\055\253\056\267\057\271\060" +
    "\266\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\050\017\037\027\041\030\u0116\040" +
    "\042\041\036\042\035\001\001\000\002\001\001\000\020" +
    "\007\050\017\037\027\041\030\u0118\040\042\041\036\042" +
    "\035\001\001\000\002\001\001\000\020\007\050\017\037" +
    "\027\041\030\u011a\040\042\041\036\042\035\001\001\000" +
    "\002\001\001\000\042\013\303\015\262\016\277\035\257" +
    "\042\276\045\263\046\275\047\270\050\255\051\305\052" +
    "\254\054\u011c\055\253\056\267\057\271\060\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\u0126\001\001\000\020\007\050" +
    "\017\037\027\041\030\u0122\040\042\041\036\042\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\007\050\017\037\027\041\030\u0127\040\042\041" +
    "\036\042\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\u0129\001\001\000\002\001\001\000\004\036" +
    "\u012b\001\001\000\002\001\001\000\016\007\050\017\037" +
    "\033\u012d\040\u012e\041\036\042\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\013" +
    "\303\015\262\016\277\035\257\042\276\045\263\046\275" +
    "\047\270\050\255\051\305\052\254\054\252\055\253\056" +
    "\267\057\271\060\266\061\u013d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\u0141\015\026\001\001\000\006\006\u0142\015\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\u0145\015\026\001\001\000\002\001\001" +
    "\000\044\013\303\015\262\016\277\035\257\042\276\045" +
    "\263\046\275\047\270\050\255\051\305\052\254\054\252" +
    "\055\253\056\267\057\271\060\266\061\u0148\001\001\000" +
    "\044\013\303\015\262\016\277\035\257\042\276\045\263" +
    "\046\275\047\270\050\255\051\305\052\254\054\252\055" +
    "\253\056\267\057\271\060\266\061\u014a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\013\303\015\262\016\277\035\257\042\276" +
    "\045\263\046\275\047\270\050\255\051\305\052\254\054" +
    "\252\055\253\056\267\057\271\060\266\061\u014e\001\001" +
    "\000\044\013\303\015\262\016\277\035\257\042\276\045" +
    "\263\046\275\047\270\050\255\051\305\052\254\054\252" +
    "\055\253\056\267\057\271\060\266\061\u0150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\u0160\005\u015e\010\u015d\013\u015b\015\u015f\016" +
    "\u0161\035\u015a\001\001\000\020\004\u0177\005\u015e\010\u015d" +
    "\013\u015b\015\u015f\016\u0161\035\u015a\001\001\000\020\004" +
    "\u0176\005\u015e\010\u015d\013\u015b\015\u015f\016\u0161\035\u015a" +
    "\001\001\000\020\004\u0175\005\u015e\010\u015d\013\u015b\015" +
    "\u015f\016\u0161\035\u015a\001\001\000\004\036\311\001\001" +
    "\000\006\015\u0156\016\u0154\001\001\000\020\004\u0165\005" +
    "\u015e\010\u015d\013\u015b\015\u015f\016\u0161\035\u015a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\356\001\001\000\002\001\001\000\004\036\u0126" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\u0169\015\026\001\001\000\044\013\303\015\262\016\277" +
    "\035\257\042\276\045\263\046\275\047\270\050\255\051" +
    "\305\052\254\054\252\055\253\056\267\057\271\060\266" +
    "\061\u0171\001\001\000\002\001\001\000\044\013\303\015" +
    "\262\016\277\035\257\042\276\045\263\046\275\047\270" +
    "\050\255\051\305\052\254\054\252\055\253\056\267\057" +
    "\271\060\266\061\u016c\001\001\000\044\013\303\015\262" +
    "\016\277\035\257\042\276\045\263\046\275\047\270\050" +
    "\255\051\305\052\254\054\252\055\253\056\267\057\271" +
    "\060\266\061\u016e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\013\303" +
    "\015\262\016\277\035\257\042\276\045\263\046\275\047" +
    "\270\050\255\051\305\052\254\054\252\055\253\056\267" +
    "\057\271\060\266\061\u0173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\u017c\015\026\001\001" +
    "\000\044\013\303\015\262\016\277\035\257\042\276\045" +
    "\263\046\275\047\270\050\255\051\305\052\254\054\252" +
    "\055\253\056\267\057\271\060\266\061\u0184\001\001\000" +
    "\002\001\001\000\044\013\303\015\262\016\277\035\257" +
    "\042\276\045\263\046\275\047\270\050\255\051\305\052" +
    "\254\054\252\055\253\056\267\057\271\060\266\061\u017f" +
    "\001\001\000\044\013\303\015\262\016\277\035\257\042" +
    "\276\045\263\046\275\047\270\050\255\051\305\052\254" +
    "\054\252\055\253\056\267\057\271\060\266\061\u0181\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\013\303\015\262\016\277\035" +
    "\257\042\276\045\263\046\275\047\270\050\255\051\305" +
    "\052\254\054\252\055\253\056\267\057\271\060\266\061" +
    "\u0186\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\u018b\015\026\001\001\000\044\013\303\015\262\016\277" +
    "\035\257\042\276\045\263\046\275\047\270\050\255\051" +
    "\305\052\254\054\252\055\253\056\267\057\271\060\266" +
    "\061\u0193\001\001\000\002\001\001\000\044\013\303\015" +
    "\262\016\277\035\257\042\276\045\263\046\275\047\270" +
    "\050\255\051\305\052\254\054\252\055\253\056\267\057" +
    "\271\060\266\061\u018e\001\001\000\044\013\303\015\262" +
    "\016\277\035\257\042\276\045\263\046\275\047\270\050" +
    "\255\051\305\052\254\054\252\055\253\056\267\057\271" +
    "\060\266\061\u0190\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\013\303" +
    "\015\262\016\277\035\257\042\276\045\263\046\275\047" +
    "\270\050\255\051\305\052\254\054\252\055\253\056\267" +
    "\057\271\060\266\061\u0195\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\u0199\015\026\001\001\000\002\001" +
    "\001\000\044\013\303\015\262\016\277\035\257\042\276" +
    "\045\263\046\275\047\270\050\255\051\305\052\254\054" +
    "\252\055\253\056\267\057\271\060\266\061\u019c\001\001" +
    "\000\044\013\303\015\262\016\277\035\257\042\276\045" +
    "\263\046\275\047\270\050\255\051\305\052\254\054\252" +
    "\055\253\056\267\057\271\060\266\061\u019e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\013\303\015\262\016\277\035\257\042" +
    "\276\045\263\046\275\047\270\050\255\051\305\052\254" +
    "\054\252\055\253\056\267\057\271\060\266\061\u01a2\001" +
    "\001\000\044\013\303\015\262\016\277\035\257\042\276" +
    "\045\263\046\275\047\270\050\255\051\305\052\254\054" +
    "\252\055\253\056\267\057\271\060\266\061\u01a4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\007\050\017\037" +
    "\027\041\030\u01a8\040\042\041\036\042\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\u01ab\015\026" +
    "\001\001\000\002\001\001\000\044\013\303\015\262\016" +
    "\277\035\257\042\276\045\263\046\275\047\270\050\255" +
    "\051\305\052\254\054\252\055\253\056\267\057\271\060" +
    "\266\061\u01ae\001\001\000\044\013\303\015\262\016\277" +
    "\035\257\042\276\045\263\046\275\047\270\050\255\051" +
    "\305\052\254\054\252\055\253\056\267\057\271\060\266" +
    "\061\u01b0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\013\303\015\262" +
    "\016\277\035\257\042\276\045\263\046\275\047\270\050" +
    "\255\051\305\052\254\054\252\055\253\056\267\057\271" +
    "\060\266\061\u01b4\001\001\000\044\013\303\015\262\016" +
    "\277\035\257\042\276\045\263\046\275\047\270\050\255" +
    "\051\305\052\254\054\252\055\253\056\267\057\271\060" +
    "\266\061\u01b6\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\u01ba\015\026\001\001\000\002\001\001\000\044" +
    "\013\303\015\262\016\277\035\257\042\276\045\263\046" +
    "\275\047\270\050\255\051\305\052\254\054\252\055\253" +
    "\056\267\057\271\060\266\061\u01bd\001\001\000\044\013" +
    "\303\015\262\016\277\035\257\042\276\045\263\046\275" +
    "\047\270\050\255\051\305\052\254\054\252\055\253\056" +
    "\267\057\271\060\266\061\u01bf\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\013\303\015\262\016\277\035\257\042\276\045\263" +
    "\046\275\047\270\050\255\051\305\052\254\054\252\055" +
    "\253\056\267\057\271\060\266\061\u01c3\001\001\000\044" +
    "\013\303\015\262\016\277\035\257\042\276\045\263\046" +
    "\275\047\270\050\255\051\305\052\254\054\252\055\253" +
    "\056\267\057\271\060\266\061\u01c5\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
        //--------------------------------------------------------INICIO DE INTERVENCIÓN
            //Intervención para no tomar como entrada los parámetros del programa
            System.out.println("Escriba la dirección del archivo que desea analizar:");
            Scanner scan = new Scanner(System.in);
            args = scan.nextLine().split(" ");
            //--------------------------------------------------------FIN DE INTERVENCIÓN

            if (args.length == 0) {
              System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
            }
            else {
              int firstFilePos = 0;
              String encodingName = "UTF-8";
              if (args[0].equals("--encoding")) {
                firstFilePos = 2;
                encodingName = args[1];
                try {
                  java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid?
                } catch (Exception e) {
                  System.out.println("Invalid encoding '" + encodingName + "'");
                  return;
                }
              }
              for (int i = firstFilePos; i < args.length; i++) {
                Lexer lexer = null;
                try {

                  //String path = Lexer.class.getResource(args[i]).getPath();
                  //java.io.FileInputStream stream = new java.io.FileInputStream(path);

                  //Se utiliza getResource para como root la carpeta Resources como Root
                    java.io.Reader reader = new java.io.InputStreamReader(Parser.class.getResourceAsStream("../" + args[i]), encodingName);
                    lexer = new Lexer(reader);
                                        //--------------------------------------------------------Aplicacion de PARSER
                                      Parser asin = new Parser(lexer);
                                        Object result = asin.parse().value;
                }
                catch (java.io.FileNotFoundException e) {
                  System.out.println("File not found : \""+args[i]+"\"" + e.getMessage());
                }
                catch (java.io.IOException e) {
                  System.out.println("IO error scanning file \""+args[i]+"\"");
                  System.out.println(e);
                }
                catch (Exception e) {
                  System.out.println("Unexpected exception:");
                  e.printStackTrace();
                }
              }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


    //public HashMap<String, Object> tablaSimbolos = new HashMap<String, Object>();

    //Se declaran las variables de control del árbol semántico.
    public Componente raiz = new Programa();

    public String imprimirArbol() {
            //Recorrido en profundidad primero
            if (raiz == null) return "";
            return toStringAux("", 0,  raiz);
    }

    private String toStringAux(String text,int indexLevel, Componente actual){
        if (actual == null) return text;

        text += '\n';
        for (int i = 0; i < indexLevel; i++) text += "|\t";

        text += actual.toString();

        if (actual.getTblSimbolosLocales() != null  && !actual.getTblSimbolosLocales().isEmpty()) {
                  text += '\n';
                  for (int i = 0; i < indexLevel; i++) text += "|\t";
                  text += "TABLA SIMBOLOS: " + actual.getTblSimbolosLocales().toString();
                }

        if ( actual.getHijoMasIzq() != null){
            text = toStringAux(text, indexLevel + 1, actual.getHijoMasIzq());
        }
        if ( actual.getHermanoDerecho() != null ){
            text = toStringAux(text, indexLevel, actual.getHermanoDerecho());
        }
        return text;
    }

    public boolean existeSimbolo(String nombre, Componente compActual, HashMap<String,Nombre> tabla){
        boolean existe = false;
        if(!tabla.containsKey(nombre))
        {
            Componente iterPadres = compActual.getPadre();
            while (iterPadres != null && !existe)
            {
                if (iterPadres.getTblSimbolosLocales() == null || !iterPadres.getTblSimbolosLocales().containsKey(nombre) || !(iterPadres.getTblSimbolosLocales().get(nombre) instanceof Variable))
                {
                    iterPadres = iterPadres.getPadre();
                }
                else{
                    existe = true;
                }
            }
            if(iterPadres == null)
            {
                existe = false;
            }
        }
        else {
            existe = true;
        }
        return existe;
    }

    public void llenarTabla() throws SemanticError
        {
            HashMap<String, Nombre> tablaSimbolos = new HashMap<String, Nombre>();
            LinkedList cola = new LinkedList();
            cola.addLast(raiz);
            int aparicion = 0;
            while (!cola.isEmpty()) //Mientras la cola no esté vacía
            {
                Componente aux = (Componente) cola.removeFirst();

                //Ver si es un simbolo guardado
                /*if(aux instanceof  Clase || aux instanceof Metodo)
                {
                    Nombre simbolo = (Nombre) aux;
                    System.out.println("Soy " + simbolo.get_nombre());
                }
                else
                {
                    System.out.println("Soy solo un " + aux.toString());
                }*/

                Componente hijo = aux.getHijoMasIzq();
                while (hijo != null) //Mientras tenga hijos
                {
                    hijo.setPadre(aux);
                    cola.addLast(hijo);
                    hijo.setOrdenAparicion(aparicion);

                    /*if (hijo instanceof Para){
                        Para para = (Para) hijo;
                        if (!existeSimbolo(para.get_variable(),hijo,tablaSimbolos))
                            tablaSimbolos.put(declaracion.get_nombre(), new Variable(declaracion.get_nombre(), declaracion.get_tipo(), declaracion.is_arreglo()));
                        else throw new SemanticError("ERROR SEMANTICO: Declaración duplicada de variable: " + declaracion.get_nombre());
                    }*/
                    //Agregar a la tabla del padre si es Clase, Metodo o Variable
                    if(hijo instanceof Clase)
                    {
                        Clase hijoSimbolo = (Clase) hijo;
                        hijoSimbolo.setOrdenAparicion(aparicion);
                        if (!existeSimbolo(hijoSimbolo.get_nombre(),(Componente) hijoSimbolo,tablaSimbolos))
                            tablaSimbolos.put(hijoSimbolo.get_nombre(), hijoSimbolo);
                        else throw new SemanticError("Declaracion duplicada de clase: " + hijoSimbolo.get_nombre());
                    }
                    if(hijo instanceof Metodo)
                    {
                        Metodo hijoSimbolo = (Metodo) hijo;
                        hijoSimbolo.setOrdenAparicion(aparicion);
                        if (!existeSimbolo(hijoSimbolo.get_nombre(),hijoSimbolo,tablaSimbolos))
                            tablaSimbolos.put(hijoSimbolo.get_nombre(), hijoSimbolo);
                        else throw new SemanticError("Declaración duplicada de metodo: " + hijoSimbolo.get_nombre());
                        //Agregamos los parametros como declaraciones
                        List<Variable> variables = hijoSimbolo.getParametros();
                        for ( Variable i:variables ) {
                            Declaracion decl = new Declaracion(i.get_nombre(),i.get_tipo(),i.is_arreglo());
                            decl.setHermanoDerecho(hijoSimbolo.getHijoMasIzq());
                            hijoSimbolo.setHijoMasIzq(decl);
                        }

                    }
                    if (hijo instanceof Declaracion){
                        Declaracion declaracion = (Declaracion) hijo;
                        if (!existeSimbolo(declaracion.get_nombre(),hijo,tablaSimbolos))
                        {
                            Variable variable = new Variable(declaracion.get_nombre(), declaracion.get_tipo(), declaracion.is_arreglo());
                            variable.setOrdenAparicion(aparicion);
                            tablaSimbolos.put(declaracion.get_nombre(), variable);
                        }
                        else throw new SemanticError("ERROR SEMANTICO: Declaración duplicada de variable: " + declaracion.get_nombre());
                    }
                    hijo = hijo.getHermanoDerecho();
                    aparicion++;
                }
                aux.setTblSimbolosLocales(tablaSimbolos);

                        //System.out.println("Tabla asignada a " + aux.toString() + "\n" + aux.getTblSimbolosLocales().toString());

                        tablaSimbolos = new HashMap<String, Nombre>(); //Reinicia la tabla del padre
                    }
                }

    public boolean verificarExistencias() throws SemanticError
        {
            boolean todoBien = true;
            LinkedList cola = new LinkedList();
            cola.addLast(raiz.getHijoMasIzq());
            HashMap<String,Tipo> metodosNativos = new HashMap<String,Tipo>();
            metodosNativos.put("raiz",Tipo.NUMERICO);
            while (cola.size() != 0 && todoBien) //Mientras la cola no esté vacía
            {
                Componente aux = (Componente) cola.removeFirst();
                HashMap<String, Nombre> tabla = aux.getTblSimbolosLocales();
                Componente hijo = aux.getHijoMasIzq();
                while (hijo != null && todoBien) //Mientras tenga hijos
                {

                    if(hijo instanceof Variable)
                    {
                        String nombre = ((Variable) hijo).get_nombre();
                        if(!tabla.containsKey(nombre))
                        {
                            Componente iterPadres = aux;
                            while (iterPadres != null)
                            {
                                if (!iterPadres.getTblSimbolosLocales().containsKey(nombre) || !(iterPadres.getTblSimbolosLocales().get(nombre) instanceof Variable))
                                {
                                    iterPadres = iterPadres.getPadre();
                                }else break;
                            }
                            if(iterPadres == null)
                            {
                                todoBien = false;
                                throw new SemanticError("Referencia no declarada en " + hijo.getPadre().toString() + ": " + nombre);
                            }
                        }
                    }
                    if(hijo instanceof Asignacion)
                    {
                        String nombre = ((Asignacion) hijo).get_nombre();
                        if(!tabla.containsKey(nombre))
                        {
                            Componente iterPadres = aux;
                            while (iterPadres != null)
                            {
                                if (!iterPadres.getTblSimbolosLocales().containsKey(nombre) || !(iterPadres.getTblSimbolosLocales().get(nombre) instanceof Variable))
                                {
                                    iterPadres = iterPadres.getPadre();
                                }else break;
                            }
                            if(iterPadres == null)
                            {
                                todoBien = false;
                                throw new SemanticError("Referencia no declarada en " + hijo.getPadre().toString() + ": " + nombre);
                            }

                            Asignacion asig = (Asignacion) hijo;
                            if (metodosNativos.containsKey(asig.get_nombre())) throw new SemanticError("Palabra reservada para método nativo: " + asig.get_nombre());
                            else asig.setTipo(iterPadres.getTblSimbolosLocales().get(nombre).get_tipo());
                            if(!((Asignacion) hijo).evaluarSemantica()){
                                throw new SemanticError("Tipo de dato no compatible");
                            }
                        }
                        else //Si lo tiene, debe buscar que se declaró antes de usarlo
                        {
                            Variable simbolo = (Variable) tabla.get(nombre);
                            if(hijo.getOrdenAparicion() < simbolo.getOrdenAparicion())
                                throw new SemanticError("Variable todavia no declarada: " + nombre);
                            /*ExpresionGenerico ex = ((Asignacion) hijo).get_expresion();
                            Tipo t = tabla.get(nombre).get_tipo();
                            Componente h = (Asignacion) hijo;
                            if(!tipoDatosCorrecto( ex, t, h)){
                                throw new SemanticError("Tipo de dato no compatible");
                            }*/

                            //Se hace verificacion de tipos
                            Asignacion asig = (Asignacion) hijo;
                            if (metodosNativos.containsKey(asig.get_nombre())) throw new SemanticError("Palabra reservada para método nativo: " + asig.get_nombre());
                            else asig.setTipo(tabla.get(nombre).get_tipo());
                            if(!((Asignacion) hijo).evaluarSemantica()){
                                throw new SemanticError("Tipo de dato no compatible");
                            }
                        }
                    }

                if (hijo instanceof LlamadaMetodo){
                    String nombre = ((LlamadaMetodo) hijo).getNombre();
                    if (!metodosNativos.containsKey(nombre)){
                        if(!tabla.containsKey(nombre))
                        {
                            Componente iterPadres = aux;
                            while (iterPadres != null)
                            {
                                if (!iterPadres.getTblSimbolosLocales().containsKey(nombre) || !(iterPadres.getTblSimbolosLocales().get(nombre) instanceof Metodo))
                                {
                                    iterPadres = iterPadres.getPadre();
                                }else break;
                            }
                            if(iterPadres == null)
                            {
                                todoBien = false;
                                throw new SemanticError("Referencia no declarada en " + hijo.getPadre().toString() + ": " + nombre);
                            }
                        }
                    }else {
                        ((LlamadaMetodo) hijo).setTipo(Tipo.NUMERICO);
                    }
                }
                cola.addLast(hijo);
                hijo = hijo.getHermanoDerecho();
            }
        }
        return todoBien;
    }



    public boolean tipoCorrectoParametros(ExpresionGenerico param, Tipo tipoEsperado, Componente padre) throws SemanticError {
        if (param.getTipo() != null){
            if(!param.getTipo().equals(tipoEsperado)){
                return false;
            }
        } else if (param.getNombre() != null){
            HashMap<String, Nombre> tabla = padre.getTblSimbolosLocales();
            Componente aux = padre;

            if(param.esMetodo()){ // si es una llamada a metodo
                Tipo t = null;
                boolean esta = aux.getTblSimbolosLocales().containsKey(param.getNombre());
                Nombre var = aux.getTblSimbolosLocales().get(param.getNombre());
                if(var != null){
                    t = var.get_tipo();
                }
                do {
                    if (!esta || !(var instanceof Metodo) || t != tipoEsperado ) {
                        if((aux = aux.getPadre()) != null){
                            esta = aux.getTblSimbolosLocales().containsKey(param.getNombre());
                            var = aux.getTblSimbolosLocales().get(param.getNombre());
                            if(var != null){
                                t = var.get_tipo();
                            }
                        }else{
                            aux = null;
                        }
                    }else{
                        break;
                    }
                } while (aux != null);
                if(aux == null) {
                    throw new SemanticError("Tipos no compatibles");
                }
            } else { // si es una variable
                Tipo t = null;
                boolean esta = aux.getTblSimbolosLocales().containsKey(param.getNombre());
                Nombre var = aux.getTblSimbolosLocales().get(param.getNombre());
                if(var != null){
                    t = var.get_tipo();
                }
                do {
                    if (!esta || !(var instanceof Variable) || t != tipoEsperado ) {
                        if((aux = aux.getPadre()) != null){
                            esta = aux.getTblSimbolosLocales().containsKey(param.getNombre());
                            var = aux.getTblSimbolosLocales().get(param.getNombre());
                            if(var != null){
                                t = var.get_tipo();
                            }
                        }else{
                            aux = null;
                        }
                    }else{
                        break;
                    }
                } while (aux != null);
                if(aux == null) {
                    throw new SemanticError("Tipos no compatibles");
                }
            }
        } else {
            return false;
        }
        return true;
    }


  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Componente start_val = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
                //--------------------------------------------------------POST-ACTIONS
                Programa raizReal = new Programa();
                raizReal.setHijoMasIzq(raiz);
                raiz = raizReal;
                try{
                    llenarTabla();
                    System.out.println(imprimirArbol());
                    verificarExistencias();
                }catch (SemanticError ex){
                    System.out.println(ex.getMessage());
                }
                //---------------------------------------------------------------------
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= clase programa 
            {
              Componente RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Clase c = (Clase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Componente p = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 c.setHermanoDerecho(p); RESULT = c; raiz = RESULT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= clase 
            {
              Componente RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Clase c = (Clase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; raiz = RESULT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= c_metodo programa 
            {
              Componente RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Metodo m = (Metodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Componente p = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 m.setHermanoDerecho(p); RESULT = m;  raiz = RESULT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa ::= c_metodo 
            {
              Componente RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Metodo m = (Metodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = m; raiz = RESULT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // clase ::= c_vista CLASE VAR LLAVEABIERTO cuerpo_clase LLAVECERRADO 
            {
              Clase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new Clase(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // clase ::= c_vista CLASE VAR cuerpo_clase LLAVECERRADO 
            {
              Clase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 System.out.println("CLASE " + v); report_error("Llave de apertura faltante (\" { \") en declaración de clase:\t" + v, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // c_metodo ::= c_vista c_tipo_arreglo VAR PARENTESISABIERTO lista_parametros PARENTESISCERRADO LLAVEABIERTO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Variable> lp = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Metodo(v, (Tipo) t, lp, ls); //System.out.println("METODO " + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // c_metodo ::= c_vista c_tipo_arreglo VAR PARENTESISABIERTO PARENTESISCERRADO LLAVEABIERTO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Metodo(v, (Tipo) t, ls); //System.out.println("METODO " + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // c_metodo ::= c_vista c_tipo_primitivo VAR PARENTESISABIERTO lista_parametros PARENTESISCERRADO LLAVEABIERTO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Variable> lp = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Metodo(v, (Tipo) t, lp, ls); //System.out.println("METODO " + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // c_metodo ::= c_vista VAR VAR PARENTESISABIERTO lista_parametros PARENTESISCERRADO LLAVEABIERTO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Variable> lp = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Metodo(v, Tipo.NO_PRIMITIVO, lp, ls); //System.out.println("METODO " + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // c_metodo ::= c_vista c_tipo_primitivo VAR PARENTESISABIERTO PARENTESISCERRADO LLAVEABIERTO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Metodo(v, (Tipo) t, ls); //System.out.println("METODO " + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // c_metodo ::= c_vista VAR VAR PARENTESISABIERTO PARENTESISCERRADO LLAVEABIERTO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Metodo(v, Tipo.NO_PRIMITIVO, ls); //System.out.println("METODO " + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // c_metodo ::= c_vista PROC VAR PARENTESISABIERTO lista_parametros PARENTESISCERRADO LLAVEABIERTO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Variable> lp = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Metodo(v, null, lp, ls); //System.out.println("METODO " + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // c_metodo ::= c_vista PROC VAR PARENTESISABIERTO PARENTESISCERRADO LLAVEABIERTO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Metodo(v, null, ls); //System.out.println("METODO " + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // c_metodo ::= c_tipo_arreglo VAR PARENTESISABIERTO lista_parametros PARENTESISCERRADO LLAVEABIERTO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Variable> lp = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Metodo(v, (Tipo) t, lp, ls); //System.out.println("METODO " + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // c_metodo ::= c_tipo_arreglo VAR PARENTESISABIERTO PARENTESISCERRADO LLAVEABIERTO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Metodo(v, (Tipo) t, ls); System.out.println("METODO " + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // c_metodo ::= c_tipo_primitivo VAR PARENTESISABIERTO lista_parametros PARENTESISCERRADO LLAVEABIERTO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Variable> lp = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Metodo(v, (Tipo) t, lp, ls); //System.out.println("METODO " + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // c_metodo ::= VAR VAR PARENTESISABIERTO lista_parametros PARENTESISCERRADO LLAVEABIERTO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Variable> lp = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Metodo(v, Tipo.NO_PRIMITIVO, lp, ls); //System.out.println("METODO " + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // c_metodo ::= c_tipo_primitivo VAR PARENTESISABIERTO PARENTESISCERRADO LLAVEABIERTO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Metodo(v, (Tipo) t, ls); //System.out.println("METODO " + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // c_metodo ::= VAR VAR PARENTESISABIERTO PARENTESISCERRADO LLAVEABIERTO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Metodo(v, Tipo.NO_PRIMITIVO, ls); //System.out.println("METODO " + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // c_metodo ::= PROC VAR PARENTESISABIERTO lista_parametros PARENTESISCERRADO LLAVEABIERTO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Variable> lp = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Metodo(v, null, lp, ls); //System.out.println("METODO " + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // c_metodo ::= PROC VAR PARENTESISABIERTO PARENTESISCERRADO LLAVEABIERTO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Metodo(v, null, ls); //System.out.println("METODO " + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // c_metodo ::= c_vista c_tipo_arreglo VAR PARENTESISABIERTO lista_parametros PARENTESISCERRADO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 System.out.println("METODO " + v); report_error("Llave de apertura faltante (\" { \") en declaración de método:\t" + v, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // c_metodo ::= c_vista c_tipo_arreglo VAR PARENTESISABIERTO PARENTESISCERRADO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 System.out.println("METODO " + v); report_error("Llave de apertura faltante (\" { \") en declaración de método:\t" + v, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // c_metodo ::= c_vista c_tipo_primitivo VAR PARENTESISABIERTO lista_parametros PARENTESISCERRADO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 System.out.println("METODO " + v); report_error("Llave de apertura faltante (\" { \") en declaración de método:\t" + v, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // c_metodo ::= c_vista VAR VAR PARENTESISABIERTO lista_parametros PARENTESISCERRADO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 System.out.println("METODO " + v); report_error("Llave de apertura faltante (\" { \") en declaración de método:\t" + v, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // c_metodo ::= c_vista c_tipo_primitivo VAR PARENTESISABIERTO PARENTESISCERRADO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 System.out.println("METODO " + v); report_error("Llave de apertura faltante (\" { \") en declaración de método:\t" + v, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // c_metodo ::= c_vista VAR VAR PARENTESISABIERTO PARENTESISCERRADO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 System.out.println("METODO " + v); report_error("Llave de apertura faltante (\" { \") en declaración de método:\t" + v, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // c_metodo ::= c_vista PROC VAR PARENTESISABIERTO lista_parametros PARENTESISCERRADO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 System.out.println("METODO " + v); report_error("Llave de apertura faltante (\" { \") en declaración de método:\t" + v, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // c_metodo ::= c_vista PROC VAR PARENTESISABIERTO PARENTESISCERRADO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 System.out.println("METODO " + v); report_error("Llave de apertura faltante (\" { \") en declaración de método:\t" + v, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // c_metodo ::= c_tipo_arreglo VAR PARENTESISABIERTO lista_parametros PARENTESISCERRADO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 System.out.println("METODO " + v); report_error("Llave de apertura faltante (\" { \") en declaración de método:\t" + v, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // c_metodo ::= c_tipo_arreglo VAR PARENTESISABIERTO PARENTESISCERRADO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 System.out.println("METODO " + v); report_error("Llave de apertura faltante (\" { \") en declaración de método:\t" + v, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // c_metodo ::= c_tipo_primitivo VAR PARENTESISABIERTO lista_parametros PARENTESISCERRADO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 System.out.println("METODO " + v); report_error("Llave de apertura faltante (\" { \") en declaración de método:\t" + v, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // c_metodo ::= VAR VAR PARENTESISABIERTO lista_parametros PARENTESISCERRADO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 System.out.println("METODO " + v); report_error("Llave de apertura faltante (\" { \") en declaración de método:\t" + v, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // c_metodo ::= c_tipo_primitivo VAR PARENTESISABIERTO PARENTESISCERRADO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 System.out.println("METODO " + v); report_error("Llave de apertura faltante (\" { \") en declaración de método:\t" + v, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // c_metodo ::= VAR VAR PARENTESISABIERTO PARENTESISCERRADO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 System.out.println("METODO " + v); report_error("Llave de apertura faltante (\" { \") en declaración de método:\t" + v, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // c_metodo ::= PROC VAR PARENTESISABIERTO lista_parametros PARENTESISCERRADO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 System.out.println("METODO " + v); report_error("Llave de apertura faltante (\" { \") en declaración de método:\t" + v, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // c_metodo ::= PROC VAR PARENTESISABIERTO PARENTESISCERRADO cuerpo_metodo LLAVECERRADO 
            {
              Metodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 System.out.println("METODO " + v); report_error("Llave de apertura faltante (\" { \") en declaración de método:\t" + v, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_metodo",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // c_vista ::= PUBLICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_vista",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // c_vista ::= PRIVADO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_vista",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lista_parametros ::= c_tipo_primitivo variable_arreglo COMA lista_parametros 
            {
              List<Variable> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Variable> lp = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 lp.add(v); RESULT = lp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lista_parametros ::= VAR variable_arreglo COMA lista_parametros 
            {
              List<Variable> RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Variable> lp = (List<Variable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 lp.add(v); RESULT = lp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lista_parametros ::= c_tipo_primitivo variable_arreglo 
            {
              List<Variable> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Variable> lp = new LinkedList<Variable>(); lp.add(v); RESULT = lp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lista_parametros ::= VAR variable_arreglo 
            {
              List<Variable> RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Variable> lp = new LinkedList<Variable>(); lp.add(v); RESULT = lp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lista_parametros ::= c_tipo_primitivo variable_arreglo lista_parametros 
            {
              List<Variable> RESULT =null;
		 report_error("Coma faltante (\" , \") en separación de parametros", null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lista_parametros ::= VAR variable_arreglo lista_parametros 
            {
              List<Variable> RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 report_error("Coma faltante (\" , \") en separación de parametros", null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // variable_arreglo ::= VAR 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Variable(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_arreglo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variable_arreglo ::= VAR CORCHETEABIERTO CORCHETECERRADO 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Variable(v,null,true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_arreglo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variable_arreglo ::= VAR CORCHETEABIERTO c_asignacion_expresion_Numerica_Total CORCHETECERRADO 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new Variable(v,null,true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_arreglo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cuerpo_clase ::= c_metodo cuerpo_clase 
            {
              Componente RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Metodo m = (Metodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Componente c = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 m.setHermanoDerecho(c); RESULT = m; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cuerpo_clase ::= c_asignacion cuerpo_clase 
            {
              Componente RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Componente a = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Componente c = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 a.setHermanoDerecho(c); RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cuerpo_clase ::= c_declaracion cuerpo_clase 
            {
              Componente RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Declaracion d = (Declaracion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Componente c = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 d.setHermanoDerecho(c); RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cuerpo_clase ::= 
            {
              Componente RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cuerpo_metodo ::= c_lista_sentencias 
            {
              Componente RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Componente l = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_metodo",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // c_expresion_llamado_metodo ::= VAR PARENTESISABIERTO c_lleno_parametros PARENTESISCERRADO 
            {
              LlamadaMetodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expresion> p = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LlamadaMetodo(p,v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_llamado_metodo",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // c_lleno_parametros ::= c_hay_parametro 
            {
              List<Expresion> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Expresion> p = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_lleno_parametros",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // c_lleno_parametros ::= PARENTESISABIERTO c_lleno_parametros PARENTESISCERRADO 
            {
              List<Expresion> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expresion> p = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = p;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_lleno_parametros",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // c_lleno_parametros ::= 
            {
              List<Expresion> RESULT =null;
		RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_lleno_parametros",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // c_hay_parametro ::= c_hay_parametro COMA c_hay_parametro 
            {
              List<Expresion> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expresion> p = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Expresion> f = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 p.addAll(f); RESULT = p;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_hay_parametro",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // c_hay_parametro ::= c_variable_o_llamadoMetodo 
            {
              List<Expresion> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		List<Expresion> p = new LinkedList<Expresion>(); p.add((Expresion)m); RESULT = p;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_hay_parametro",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // c_hay_parametro ::= c_expresion_numerica 
            {
              List<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Expresion> p = new LinkedList<Expresion>(); p.add(e); RESULT = p;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_hay_parametro",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // c_hay_parametro ::= c_expresion_cadena 
            {
              List<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Expresion> p = new LinkedList<Expresion>(); p.add(e); RESULT = p;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_hay_parametro",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // c_hay_parametro ::= c_expresion_booleana 
            {
              List<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Expresion> p = new LinkedList<Expresion>(); p.add(e); RESULT = p;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_hay_parametro",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$0 ::= 
            {
              List<Expresion> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expresion> p = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
RESULT = p;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // c_hay_parametro ::= PARENTESISABIERTO c_hay_parametro PARENTESISCERRADO NT$0 c_hay_parametro c_hay_parametro 
            {
              List<Expresion> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (List<Expresion>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Expresion> p = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 report_fatal_error("Coma faltante (\" , \") en separación de parametros", null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_hay_parametro",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // c_estructuras ::= c_para 
            {
              Estructura RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Para p = (Para)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_estructuras",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // c_estructuras ::= c_mientras 
            {
              Estructura RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Mientras m = (Mientras)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = m;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_estructuras",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // c_estructuras ::= c_si 
            {
              Estructura RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Si s = (Si)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_estructuras",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // c_estructuras ::= c_revisar 
            {
              Estructura RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Revisar r = (Revisar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = r;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_estructuras",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // c_estructuras ::= c_sino 
            {
              Estructura RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sino sn = (Sino)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sn;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_estructuras",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // c_para ::= PARA VAR DESDE c_asignacion_expresion_Numerica_Total HASTA c_asignacion_expresion_Numerica_Total AVANCE c_asignacion_expresion_Numerica_Total LLAVEABIERTO c_lista_sentencias LLAVECERRADO 
            {
              Para RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int desdeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int desderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expresion desde = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int hastaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int hastaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expresion hasta = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int avanceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int avanceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion avance = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Asignacion a = new Asignacion(v); a.set_expresion(desde); a.setHermanoDerecho(ls);RESULT = new Para(v, a, desde, hasta, avance);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_para",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // c_para ::= PARA NUM VAR DESDE c_asignacion_expresion_Numerica_Total HASTA c_asignacion_expresion_Numerica_Total AVANCE c_asignacion_expresion_Numerica_Total LLAVEABIERTO c_lista_sentencias LLAVECERRADO 
            {
              Para RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int desdeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int desderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expresion desde = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int hastaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int hastaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expresion hasta = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int avanceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int avanceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion avance = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Asignacion a = new Asignacion(v); a.set_expresion(desde); Declaracion decl = new Declaracion(v, Tipo.NUMERICO); decl.setHermanoDerecho(a); a.setHermanoDerecho(ls); RESULT = new Para(v, decl, desde, hasta, avance);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_para",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // c_mientras ::= MIENTRAS PARENTESISABIERTO c_asignacion_expresion_Booleana_Total PARENTESISCERRADO HACER LLAVEABIERTO c_lista_sentencias LLAVECERRADO 
            {
              Mientras RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Mientras(ls);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_mientras",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // c_mientras ::= HACER LLAVEABIERTO c_lista_sentencias LLAVECERRADO MIENTRAS PARENTESISABIERTO c_asignacion_expresion_Booleana_Total PARENTESISCERRADO 
            {
              Mientras RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 RESULT = new Mientras(ls);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_mientras",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // c_si ::= SI PARENTESISABIERTO c_asignacion_expresion_Booleana_Total PARENTESISCERRADO LLAVEABIERTO c_lista_sentencias LLAVECERRADO 
            {
              Si RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Si(ls);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_si",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // c_sino ::= SINO c_si 
            {
              Sino RESULT =null;
		 RESULT = new Sino();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_sino",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // c_sino ::= SINO LLAVEABIERTO c_lista_sentencias LLAVECERRADO 
            {
              Sino RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Sino(ls);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_sino",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // c_revisar ::= REVISAR PARENTESISABIERTO VAR PARENTESISCERRADO LLAVEABIERTO c_revisar_casos LLAVECERRADO 
            {
              Revisar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 RESULT = new Revisar();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_revisar",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // c_revisar_casos ::= CASO c_expresion_numerica DOSPUNTOS c_lista_sentencias SALIR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_revisar_casos",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // c_revisar_casos ::= DEFECTO DOSPUNTOS c_lista_sentencias SALIR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_revisar_casos",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // c_lista_sentencias ::= c_asignacion c_lista_sentencias 
            {
              Componente RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Componente a = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 a.getUltimoHermano().setHermanoDerecho(ls); RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_lista_sentencias",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // c_lista_sentencias ::= c_declaracion c_lista_sentencias 
            {
              Componente RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Declaracion d = (Declaracion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 d.setHermanoDerecho(ls); RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_lista_sentencias",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // c_lista_sentencias ::= c_estructuras c_lista_sentencias 
            {
              Componente RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Estructura e = (Estructura)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.setHermanoDerecho(ls); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_lista_sentencias",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // c_lista_sentencias ::= c_expresion_llamado_metodo c_lista_sentencias 
            {
              Componente RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LlamadaMetodo m = (LlamadaMetodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 m.setHermanoDerecho(ls); RESULT = m; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_lista_sentencias",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // c_lista_sentencias ::= c_funciones_reservadas c_lista_sentencias 
            {
              Componente RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia f = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Componente ls = (Componente)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 f.setHermanoDerecho(ls); RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_lista_sentencias",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // c_lista_sentencias ::= 
            {
              Componente RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_lista_sentencias",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // c_declaracion ::= c_tipo_primitivo VAR 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declaracion(v,(Tipo) t); //System.out.println("Declaración " + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_declaracion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // c_declaracion ::= VAR VAR 
            {
              Declaracion RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declaracion(v,Tipo.NO_PRIMITIVO, w); //System.out.println("Declaración " + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_declaracion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // c_declaracion ::= c_tipo_primitivo VAR CORCHETEABIERTO CORCHETECERRADO 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Declaracion(v,(Tipo) t,true); //System.out.println("Declaración de arreglo" + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_declaracion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // c_declaracion ::= VAR VAR CORCHETEABIERTO CORCHETECERRADO 
            {
              Declaracion RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Declaracion(v, Tipo.NO_PRIMITIVO, true, w); //System.out.println("Declaración de arreglo" + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_declaracion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // c_declaracion ::= c_tipo_primitivo VAR CORCHETEABIERTO c_asignacion_expresion_Numerica_Total CORCHETECERRADO 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new Declaracion(v,(Tipo) t, true); //System.out.println("Declaración de arreglo" + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_declaracion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // c_declaracion ::= VAR VAR CORCHETEABIERTO c_asignacion_expresion_Numerica_Total CORCHETECERRADO 
            {
              Declaracion RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new Declaracion(v,Tipo.NO_PRIMITIVO, true, w); //System.out.println("Declaración de arreglo" + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_declaracion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // c_declaracion ::= c_tipo_arreglo VAR 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declaracion(v,(Tipo)t, true); //System.out.println("Declaración de arreglo" + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_declaracion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // c_tipo ::= c_tipo_primitivo 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_tipo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // c_tipo ::= VAR 
            {
              Object RESULT =null;
		int tipo_no_primitivoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipo_no_primitivoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tipo_no_primitivo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Tipo.NO_PRIMITIVO;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_tipo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // c_tipo_primitivo ::= CAD 
            {
              Object RESULT =null;
		 RESULT = Tipo.CADENA;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_tipo_primitivo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // c_tipo_primitivo ::= NUM 
            {
              Object RESULT =null;
		 RESULT = Tipo.NUMERICO;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_tipo_primitivo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // c_tipo_primitivo ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = Tipo.BOOLEANO;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_tipo_primitivo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // c_tipo_arreglo ::= c_tipo_primitivo CORCHETEABIERTO CORCHETECERRADO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_tipo_arreglo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // c_tipo_arreglo ::= VAR CORCHETEABIERTO CORCHETECERRADO 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Tipo.NO_PRIMITIVO;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_tipo_arreglo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // c_tipo_arreglo ::= c_tipo_primitivo CORCHETEABIERTO c_asignacion_expresion_Numerica_Total CORCHETECERRADO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_tipo_arreglo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // c_tipo_arreglo ::= VAR CORCHETEABIERTO c_asignacion_expresion_Numerica_Total CORCHETECERRADO 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = Tipo.NO_PRIMITIVO;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_tipo_arreglo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // c_variable_o_llamadoMetodo ::= c_expresion_variable 
            {
              Nombre RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v;//System.out.println("Variable de expresion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_variable_o_llamadoMetodo",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // c_variable_o_llamadoMetodo ::= c_llamadoMetodo 
            {
              Nombre RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LlamadaMetodo m = (LlamadaMetodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = m;//System.out.println("Llamado a metodo en expresion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_variable_o_llamadoMetodo",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // c_llamadoMetodo ::= c_expresion_llamado_metodo 
            {
              LlamadaMetodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LlamadaMetodo m = (LlamadaMetodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = m;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_llamadoMetodo",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // c_llamadoMetodo ::= PARENTESISABIERTO c_llamadoMetodo PARENTESISCERRADO 
            {
              LlamadaMetodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LlamadaMetodo m = (LlamadaMetodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = m;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_llamadoMetodo",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // c_expresion_variable ::= variable_arreglo 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_variable",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // c_expresion_variable ::= PARENTESISABIERTO c_expresion_variable PARENTESISCERRADO 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_variable",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // c_expresion_variable_igual ::= c_expresion_numerica IGUAL c_expresion_numerica 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.getUltimoHermano().setHermanoDerecho((Componente)f); RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_variable_igual",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // c_expresion_variable_igual ::= c_expresion_booleana IGUAL c_expresion_booleana 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.getUltimoHermano().setHermanoDerecho((Componente)f); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_variable_igual",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // c_expresion_variable_igual ::= c_expresion_booleana IGUAL c_variable_o_llamadoMetodo 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.getUltimoHermano().setHermanoDerecho((Componente)m); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_variable_igual",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // c_expresion_variable_igual ::= c_variable_o_llamadoMetodo IGUAL c_expresion_numerica 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expresion ex = (Expresion)m; ex.getUltimoHermano().setHermanoDerecho((Componente)e); RESULT = ex; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_variable_igual",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // c_expresion_variable_igual ::= c_expresion_numerica IGUAL c_variable_o_llamadoMetodo 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.getUltimoHermano().setHermanoDerecho((Componente)m); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_variable_igual",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // c_expresion_variable_igual ::= c_variable_o_llamadoMetodo IGUAL c_variable_o_llamadoMetodo 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre n = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expresion ex = (Expresion)m; ex.getUltimoHermano().setHermanoDerecho((Componente)n); RESULT = ex; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_variable_igual",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // c_expresion_variable_distinto ::= c_expresion_numerica DISTINTO c_expresion_numerica 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.getUltimoHermano().setHermanoDerecho((Componente)f); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_variable_distinto",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // c_expresion_variable_distinto ::= c_expresion_booleana DISTINTO c_expresion_booleana 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.getUltimoHermano().setHermanoDerecho((Componente)f); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_variable_distinto",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // c_expresion_variable_distinto ::= c_expresion_booleana DISTINTO c_variable_o_llamadoMetodo 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.getUltimoHermano().setHermanoDerecho((Componente)m); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_variable_distinto",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // c_expresion_variable_distinto ::= c_variable_o_llamadoMetodo DISTINTO c_expresion_numerica 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expresion ex = (Expresion)m; ex.getUltimoHermano().setHermanoDerecho((Componente)e); RESULT = ex; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_variable_distinto",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // c_expresion_variable_distinto ::= c_expresion_numerica DISTINTO c_variable_o_llamadoMetodo 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.getUltimoHermano().setHermanoDerecho((Componente)m); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_variable_distinto",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // c_expresion_variable_distinto ::= c_variable_o_llamadoMetodo DISTINTO c_variable_o_llamadoMetodo 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre n = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expresion ex = (Expresion)m; ex.getUltimoHermano().setHermanoDerecho((Componente)n); RESULT = ex; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_variable_distinto",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // c_expresion_variable_mayorque ::= c_asignacion_expresion_Numerica_Total MAYORQUE c_asignacion_expresion_Numerica_Total 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.getUltimoHermano().setHermanoDerecho((Componente)f); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_variable_mayorque",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // c_expresion_variable_mayoroigual ::= c_asignacion_expresion_Numerica_Total MAYOROIGUAL c_asignacion_expresion_Numerica_Total 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.getUltimoHermano().setHermanoDerecho((Componente)f); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_variable_mayoroigual",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // c_expresion_variable_menorque ::= c_asignacion_expresion_Numerica_Total MENORQUE c_asignacion_expresion_Numerica_Total 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.getUltimoHermano().setHermanoDerecho((Componente)f); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_variable_menorque",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // c_expresion_variable_menoroigual ::= c_asignacion_expresion_Numerica_Total MENOROIGUAL c_asignacion_expresion_Numerica_Total 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.getUltimoHermano().setHermanoDerecho((Componente)f); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_variable_menoroigual",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // c_expresion_variable_comparacion ::= c_expresion_variable_igual 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_variable_comparacion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // c_expresion_variable_comparacion ::= c_expresion_variable_distinto 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_variable_comparacion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // c_expresion_variable_comparacion ::= c_expresion_variable_mayorque 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_variable_comparacion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // c_expresion_variable_comparacion ::= c_expresion_variable_mayoroigual 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_variable_comparacion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // c_expresion_variable_comparacion ::= c_expresion_variable_menorque 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_variable_comparacion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // c_expresion_variable_comparacion ::= c_expresion_variable_menoroigual 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_variable_comparacion",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // c_asignacion ::= c_tipo_primitivo VAR c_asignacion_prima 
            {
              Componente RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion o = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Declaracion(v, (Tipo)t); Asignacion asignacion = new Asignacion(v); RESULT.setHermanoDerecho(asignacion); asignacion.set_expresion(o); //System.out.println(RESULT.get_expresion().toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_asignacion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // c_asignacion ::= c_tipo_primitivo VAR CORCHETEABIERTO CORCHETECERRADO c_asignacion_prima 
            {
              Componente RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion o = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Declaracion(v, (Tipo)t); Asignacion asignacion = new Asignacion(v); RESULT.setHermanoDerecho(asignacion); asignacion.set_expresion(o); //System.out.println(RESULT.get_expresion().toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_asignacion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // c_asignacion ::= c_tipo_primitivo VAR CORCHETEABIERTO c_asignacion_expresion_Numerica_Total CORCHETECERRADO c_asignacion_prima 
            {
              Componente RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion o = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Declaracion(v, (Tipo)t); Asignacion asignacion = new Asignacion(v); RESULT.setHermanoDerecho(asignacion); asignacion.set_expresion(o); //System.out.println(RESULT.get_expresion().toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_asignacion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // c_asignacion ::= c_tipo_arreglo VAR c_asignacion_prima 
            {
              Componente RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion o = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Declaracion(v, (Tipo)t); Asignacion asignacion = new Asignacion(v); RESULT.setHermanoDerecho(asignacion); asignacion.set_expresion(o); //System.out.println(RESULT.get_expresion().toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_asignacion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // c_asignacion ::= VAR CORCHETEABIERTO c_asignacion_expresion_Numerica_Total CORCHETECERRADO c_asignacion_prima 
            {
              Componente RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion o = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Asignacion(v); ((Asignacion)RESULT).set_expresion(o); //System.out.println(RESULT.get_expresion().toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_asignacion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // c_asignacion ::= VAR c_asignacion_prima 
            {
              Componente RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion o = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Asignacion(v); ((Asignacion)RESULT).set_expresion(o); //System.out.println(RESULT.get_expresion().toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_asignacion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // c_asignacion_prima ::= ASIGNACION c_expresion_numerica 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_asignacion_prima",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // c_asignacion_prima ::= ASIGNACION c_expresion_cadena 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_asignacion_prima",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // c_asignacion_prima ::= ASIGNACION c_expresion_booleana 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_asignacion_prima",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // c_asignacion_prima ::= ASIGNACION c_variable_o_llamadoMetodo 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = (Expresion)m;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_asignacion_prima",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // c_asignacion_expresion_Numerica_Total ::= c_expresion_numerica 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_asignacion_expresion_Numerica_Total",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // c_asignacion_expresion_Numerica_Total ::= c_variable_o_llamadoMetodo 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = (Expresion)m;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_asignacion_expresion_Numerica_Total",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // c_expresion_numerica ::= c_expresion_numerica SUMA c_expresion_numerica 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.getUltimoHermano().setHermanoDerecho((Componente)f); RESULT = e;//System.out.println("c_expresion_numerica SUMA c_expresion_numerica");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // c_expresion_numerica ::= c_expresion_numerica RESTA c_expresion_numerica 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.getUltimoHermano().setHermanoDerecho((Componente)f); RESULT = e; //System.out.println("c_expresion_numerica RESTA c_expresion_numerica");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // c_expresion_numerica ::= c_expresion_numerica MULTIPLICACION c_expresion_numerica 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.getUltimoHermano().setHermanoDerecho((Componente)f); RESULT = e;//System.out.println("c_expresion_numerica MULTIPLICACION c_expresion_numerica");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // c_expresion_numerica ::= c_expresion_numerica DIVISION c_expresion_numerica 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.getUltimoHermano().setHermanoDerecho((Componente)f); RESULT = e;//System.out.println("c_expresion_numerica DIVISION c_expresion_numerica");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // c_expresion_numerica ::= RESTA c_expresion_numerica 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // c_expresion_numerica ::= RESTA c_variable_o_llamadoMetodo 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = (LlamadaMetodo)m;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // c_expresion_numerica ::= c_variable_o_llamadoMetodo SUMA c_expresion_numerica 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expresion ex = (Expresion)m; ex.getUltimoHermano().setHermanoDerecho((Componente)f); RESULT = ex; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // c_expresion_numerica ::= c_expresion_numerica SUMA c_variable_o_llamadoMetodo 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 f.getUltimoHermano().setHermanoDerecho((Componente)m); RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // c_expresion_numerica ::= c_variable_o_llamadoMetodo RESTA c_expresion_numerica 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expresion ex = (Expresion)m; ex.getUltimoHermano().setHermanoDerecho((Componente)f); RESULT = ex; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // c_expresion_numerica ::= c_expresion_numerica RESTA c_variable_o_llamadoMetodo 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 f.getUltimoHermano().setHermanoDerecho((Componente)m); RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // c_expresion_numerica ::= c_variable_o_llamadoMetodo MULTIPLICACION c_expresion_numerica 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expresion ex = (Expresion)m; ex.getUltimoHermano().setHermanoDerecho((Componente)f); RESULT = ex; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // c_expresion_numerica ::= c_expresion_numerica MULTIPLICACION c_variable_o_llamadoMetodo 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 f.getUltimoHermano().setHermanoDerecho((Componente)m); RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // c_expresion_numerica ::= c_variable_o_llamadoMetodo DIVISION c_expresion_numerica 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expresion ex = (Expresion)m; ex.getUltimoHermano().setHermanoDerecho((Componente)f); RESULT = ex; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // c_expresion_numerica ::= c_expresion_numerica DIVISION c_variable_o_llamadoMetodo 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 f.getUltimoHermano().setHermanoDerecho((Componente)m); RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // c_expresion_numerica ::= c_variable_o_llamadoMetodo SUMA c_variable_o_llamadoMetodo 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre n = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expresion ex = (Expresion)m; ex.getUltimoHermano().setHermanoDerecho((Componente)n); RESULT = ex; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // c_expresion_numerica ::= c_variable_o_llamadoMetodo RESTA c_variable_o_llamadoMetodo 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre n = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expresion ex = (Expresion)m; ex.getUltimoHermano().setHermanoDerecho((Componente)n); RESULT = ex; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // c_expresion_numerica ::= c_variable_o_llamadoMetodo MULTIPLICACION c_variable_o_llamadoMetodo 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre n = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expresion ex = (Expresion)m; ex.getUltimoHermano().setHermanoDerecho((Componente)n); RESULT = ex; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // c_expresion_numerica ::= c_variable_o_llamadoMetodo DIVISION c_variable_o_llamadoMetodo 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre n = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expresion ex = (Expresion)m; ex.getUltimoHermano().setHermanoDerecho((Componente)n); RESULT = ex; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // c_expresion_numerica ::= NUMERO 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double v = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpresionGenerico(Tipo.NUMERICO);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // c_expresion_numerica ::= PARENTESISABIERTO c_expresion_numerica PARENTESISCERRADO 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // c_asignacion_expresion_Cadena_total ::= c_expresion_cadena 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_asignacion_expresion_Cadena_total",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // c_expresion_cadena ::= c_expresion_cadena SUMA c_expresion_cadena 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.getUltimoHermano().setHermanoDerecho((Componente)f); RESULT = e;//System.out.println("c_expresion_numerica SUMA c_expresion_numerica");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_cadena",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // c_expresion_cadena ::= c_variable_o_llamadoMetodo SUMA c_expresion_cadena 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expresion ex = (Expresion)m; ex.getUltimoHermano().setHermanoDerecho((Componente)f); RESULT = ex; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_cadena",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // c_expresion_cadena ::= c_expresion_cadena SUMA c_variable_o_llamadoMetodo 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 f.getUltimoHermano().setHermanoDerecho((Componente)m); RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_cadena",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // c_expresion_cadena ::= CADENA 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExpresionGenerico(Tipo.CADENA);//System.out.println("Cadena " + v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_cadena",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // c_expresion_cadena ::= PARENTESISABIERTO c_expresion_cadena PARENTESISCERRADO 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_cadena",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // c_asignacion_expresion_Booleana_Total ::= c_expresion_booleana 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_asignacion_expresion_Booleana_Total",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // c_asignacion_expresion_Booleana_Total ::= c_variable_o_llamadoMetodo 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = (Expresion)m;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_asignacion_expresion_Booleana_Total",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // c_expresion_booleana ::= c_expresion_booleana Y c_expresion_booleana 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.getUltimoHermano().setHermanoDerecho((Componente)f); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // c_expresion_booleana ::= c_expresion_booleana O c_expresion_booleana 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.getUltimoHermano().setHermanoDerecho((Componente)f); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // c_expresion_booleana ::= DISTINTO c_expresion_booleana 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // c_expresion_booleana ::= DISTINTO c_variable_o_llamadoMetodo 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Expresion)m;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // c_expresion_booleana ::= c_variable_o_llamadoMetodo Y c_expresion_booleana 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expresion ex = (Expresion)m; ex.getUltimoHermano().setHermanoDerecho((Componente)f); RESULT = ex; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // c_expresion_booleana ::= c_expresion_booleana Y c_variable_o_llamadoMetodo 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 f.getUltimoHermano().setHermanoDerecho((Componente)m); RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // c_expresion_booleana ::= c_variable_o_llamadoMetodo O c_expresion_booleana 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expresion ex = (Expresion)m; ex.getUltimoHermano().setHermanoDerecho((Componente)f); RESULT = ex; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // c_expresion_booleana ::= c_expresion_booleana O c_variable_o_llamadoMetodo 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 f.getUltimoHermano().setHermanoDerecho((Componente)m); RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // c_expresion_booleana ::= c_variable_o_llamadoMetodo Y c_variable_o_llamadoMetodo 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre n = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expresion ex = (Expresion)m; ex.getUltimoHermano().setHermanoDerecho((Componente)n); RESULT = ex; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // c_expresion_booleana ::= c_variable_o_llamadoMetodo O c_variable_o_llamadoMetodo 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nombre m = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre n = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expresion ex = (Expresion)m; ex.getUltimoHermano().setHermanoDerecho((Componente)n); RESULT = ex; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // c_expresion_booleana ::= c_expresion_variable_comparacion 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // c_expresion_booleana ::= VERDADERO 
            {
              Expresion RESULT =null;
		RESULT = new ExpresionGenerico(Tipo.BOOLEANO);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // c_expresion_booleana ::= FALSO 
            {
              Expresion RESULT =null;
		RESULT = new ExpresionGenerico(Tipo.BOOLEANO);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // c_expresion_booleana ::= PARENTESISABIERTO c_expresion_booleana PARENTESISCERRADO 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_expresion_booleana",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // c_imprimir ::= IMPRIMIR PARENTESISABIERTO c_expresion_cadena PARENTESISCERRADO 
            {
              Imprimir RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Imprimir(); RESULT.setHijoMasIzq((Componente)e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_imprimir",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // c_imprimir ::= IMPRIMIR PARENTESISABIERTO c_variable_o_llamadoMetodo PARENTESISCERRADO 
            {
              Imprimir RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nombre e = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Imprimir(); RESULT.setHijoMasIzq((Componente)e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_imprimir",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // c_imprimir ::= IMPRIMIR PARENTESISABIERTO NUMERO PARENTESISCERRADO 
            {
              Imprimir RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Imprimir(n);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_imprimir",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // c_leer ::= LEER PARENTESISABIERTO VAR PARENTESISCERRADO 
            {
              Leer RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Leer(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_leer",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // c_devolver ::= DEVOLVER c_variable_o_llamadoMetodo 
            {
              Devolver RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nombre o = (Nombre)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Devolver(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_devolver",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // c_devolver ::= DEVOLVER c_expresion_numerica 
            {
              Devolver RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Devolver(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_devolver",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // c_devolver ::= DEVOLVER c_expresion_cadena 
            {
              Devolver RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Devolver(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_devolver",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // c_devolver ::= DEVOLVER c_expresion_booleana 
            {
              Devolver RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Devolver(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_devolver",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // c_funciones_reservadas ::= c_imprimir 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Imprimir i = (Imprimir)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_funciones_reservadas",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // c_funciones_reservadas ::= c_leer 
            {
              Sentencia RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Leer l = (Leer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_funciones_reservadas",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // c_funciones_reservadas ::= c_devolver 
            {
              Sentencia RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Devolver d = (Devolver)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_funciones_reservadas",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
