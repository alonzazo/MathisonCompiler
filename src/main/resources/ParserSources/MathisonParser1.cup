 
   
/* ---------------Seccion de declaraciones preliminares--------------------*/
package SyntacticalAnalizer;

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.io.FileReader;
import LexicalAnalizer.Lexer;
import java.util.Scanner;
   
/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */
parser code {:
    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
        //--------------------------------------------------------INICIO DE INTERVENCIÓN
            //Intervención para no tomar como entrada los parámetros del programa
            System.out.println("Escriba la dirección del archivo que desea analizar:");
            Scanner scan = new Scanner(System.in);
            args = scan.nextLine().split(" ");
            //--------------------------------------------------------FIN DE INTERVENCIÓN

            if (args.length == 0) {
              System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
            }
            else {
              int firstFilePos = 0;
              String encodingName = "UTF-8";
              if (args[0].equals("--encoding")) {
                firstFilePos = 2;
                encodingName = args[1];
                try {
                  java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid?
                } catch (Exception e) {
                  System.out.println("Invalid encoding '" + encodingName + "'");
                  return;
                }
              }
              for (int i = firstFilePos; i < args.length; i++) {
                Lexer lexer = null;
                try {

                  //String path = Lexer.class.getResource(args[i]).getPath();
                  //java.io.FileInputStream stream = new java.io.FileInputStream(path);

                  //Se utiliza getResource para como root la carpeta Resources como Root
                    java.io.Reader reader = new java.io.InputStreamReader(Parser.class.getResourceAsStream("../" + args[i]), encodingName);
                    lexer = new Lexer(reader);
                                        //--------------------------------------------------------Aplicacion de PARSER
                                      Parser asin = new Parser(lexer);
                                        Object result = asin.parse().value;
                }
                catch (java.io.FileNotFoundException e) {
                  System.out.println("File not found : \""+args[i]+"\"" + e.getMessage());
                }
                catch (java.io.IOException e) {
                  System.out.println("IO error scanning file \""+args[i]+"\"");
                  System.out.println(e);
                }
                catch (Exception e) {
                  System.out.println("Unexpected exception:");
                  e.printStackTrace();
                }
              }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};
   
/* ------------Declaracion de simbolos terminales y no terminales---------- */
   
/* Terminales (tokens obtenidos por el analizador lexico).  

   Terminales que no tienen un valor son listados primero, los terminales que
   tienen un valor como los enteros son listados en la segunda o demas lineas. */

//PALABRAS RESERVADAS
terminal    Y, O, PARA, DESDE, HASTA, AVANCE, MIENTRAS, HACER, SI;
terminal    SINO, DEVOLVER, PROC, CLASE, REC, CAD, BOOL, PUBLICO;
terminal    PRIVADO, IMPRIMIR, LEER, VERDADERO, FALSO;
terminal    REVISAR, CASO, DEFECTO, NUM, NEGACION;

terminal    CON, MOD, FIN, COMO, LANZAR, ATRAPAR, EN, EXCEPTO, MOSTRAR, EJECUTAR, TERMINAR, INTENTAR, IMPORTAR, CONSTANTE, CONTINUAR, FINALMENTE;


terminal    MENORQUE, MAYORQUE, MENOROIGUAL, MAYOROIGUAL, DISTINTO, IGUAL;

//ASGNACION
terminal    ASIGNACION;


//ARITMETICA
terminal    SUMA, RESTA, MULTIPLICACION, DIVISION, NEGATIVO, POTENCIA;

//DELIMITADOR
terminal    CORCHETEABIERTO,CORCHETECERRADO,LLAVEABIERTO,LLAVECERRADO,PARENTESISABIERTO,PARENTESISCERRADO, DOSPUNTOS, COMA;

terminal SALIR;

//CON VALOR ASOCIADO
terminal    Double NUMERO;
terminal    String VAR;
terminal    String DELIMITADOR;
terminal    String CADENA;

/* No terminales usados en la seccion gramatical. 

   Primero se lista los no terminales que tienen un valor Object y despues
   se lista los no terminales que tienen un entero. Un Object se refiere a que
   no tienen tipo, pudiendo ser entero o String. */
//non terminal Object     expr_list, expr_part;
//non terminal Integer    expr, factor, termino;

non terminal    programa, clase, cuerpo_clase, c_metodo;
non terminal    lista_parametros, variable_arreglo;
non terminal    c_vista,  c_tipo_metodo, c_declaracion_metodo;
non terminal    c_declaracion, c_tipo, retorno;
non terminal    retorno_numerico, retorno_booleano, retorno_cadena;

non terminal c_expresion_variable;
non terminal c_expresion_variable_mayorque, c_expresion_variable_mayoroigual, c_expresion_variable_menorque,c_expresion_variable_menoroigual;
non terminal c_expresion_variable_igual, c_expresion_variable_distinto;
non terminal c_expresion_variable_comparacion;
non terminal c_expresion_variable_concatena, c_expresion_variable_concatena_prima;

non terminal c_expresion_numerica;  //Todas las operaciones excepto solamente el nombre e la variable
non terminal c_asignacion_expresion_Numerica_Total; //El total

non terminal c_expresion_booleana; //Todas las operaciones excepto solamente el nombre e la variable
non terminal c_asignacion_expresion_Booleana_Total;

non terminal c_expresion_cadena; //Todas las operaciones excepto solamente el nombre e la variable
non terminal c_asignacion_expresion_Cadena_total; //El totall

non terminal c_asignacion, c_asignacion_prima;
non terminal c_asignacion_numerica;
non terminal c_asignacion_cadena;
non terminal c_asignacion_booleana;

/*Llamado a Metodos*/
non terminal c_variable_o_llamadoMetodo;
non terminal c_llamadoMetodo;
non terminal c_expresion_llamado_metodo, c_lleno_parametros, c_hay_parametro; //Estan en trabajo

/*Estructuras de control*/
non terminal c_estructuras;
non terminal c_para;
non terminal c_mientras;
non terminal c_si, c_sino;
non terminal c_revisar, c_revisar_casos;

/* Lineas validas */
non terminal c_lista_sentencias;

non terminal c_funciones_reservadas, c_imprimir, c_leer, c_devolver;

nonterminal cuerpo_metodo;

/*Inicio de las precedence, se guian en base a la documentacion de java
Entre más abajo esten tienen más prioridad*/



precedence left MENORQUE,MENOROIGUAL,MAYORQUE,MAYOROIGUAL;

precedence left DISTINTO,IGUAL;

precedence left Y,O;

precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION;
precedence left NEGATIVO, NEGACION;

precedence left COMA;

precedence left PARENTESISABIERTO,PARENTESISCERRADO;


start with programa;

programa ::= clase programa
           | clase
           | c_metodo programa
           | c_metodo
           ;
/* ------------------------------ Sintaxis de la estructura de un programa ------------------------------*/

clase ::= c_vista CLASE VAR:v LLAVEABIERTO cuerpo_clase LLAVECERRADO {: System.out.println("CLASE " + v);:}
        ;

c_metodo ::= c_vista c_tipo VAR:v PARENTESISABIERTO lista_parametros PARENTESISCERRADO LLAVEABIERTO cuerpo_metodo LLAVECERRADO     {: System.out.println("METODO " + v);:}
           | c_vista c_tipo VAR:v PARENTESISABIERTO PARENTESISCERRADO LLAVEABIERTO cuerpo_metodo LLAVECERRADO                      {: System.out.println("METODO " + v);:}
           | c_vista PROC VAR:v PARENTESISABIERTO lista_parametros PARENTESISCERRADO LLAVEABIERTO cuerpo_metodo LLAVECERRADO     {: System.out.println("METODO " + v);:}
           | c_vista PROC VAR:v PARENTESISABIERTO PARENTESISCERRADO LLAVEABIERTO cuerpo_metodo LLAVECERRADO                      {: System.out.println("METODO " + v);:}
           | c_tipo VAR:v PARENTESISABIERTO lista_parametros PARENTESISCERRADO LLAVEABIERTO cuerpo_metodo LLAVECERRADO     {: System.out.println("METODO " + v);:}
           | c_tipo VAR:v PARENTESISABIERTO PARENTESISCERRADO LLAVEABIERTO cuerpo_metodo LLAVECERRADO                      {: System.out.println("METODO " + v);:}
           | PROC VAR:v PARENTESISABIERTO lista_parametros PARENTESISCERRADO LLAVEABIERTO cuerpo_metodo LLAVECERRADO     {: System.out.println("METODO " + v);:}
           | PROC VAR:v PARENTESISABIERTO PARENTESISCERRADO LLAVEABIERTO cuerpo_metodo LLAVECERRADO                      {: System.out.println("METODO " + v);:}
           ;

c_vista ::= PUBLICO
          | PRIVADO
          ;

lista_parametros ::= c_tipo variable_arreglo COMA lista_parametros      //{: System.out.println("Parámetro"); :}
                   | c_tipo variable_arreglo                            //{: System.out.println("Parámetro"); :}
                   ;

variable_arreglo ::= VAR:v
                   | VAR:v CORCHETEABIERTO CORCHETECERRADO
                   ;

cuerpo_clase ::= c_metodo cuerpo_clase
               | c_asignacion cuerpo_clase
               | c_declaracion cuerpo_clase
               |
               ;

cuerpo_metodo ::= c_lista_sentencias //cuerpo_metodo
                    //| variable_arreglo
                    //|
                    ;

/*------------------------------ Sintaxis de los metodos ------------------------------*/

c_expresion_llamado_metodo ::= VAR:v PARENTESISABIERTO c_lleno_parametros PARENTESISCERRADO
                             ;

c_lleno_parametros ::= c_hay_parametro
                     | PARENTESISABIERTO c_lleno_parametros PARENTESISCERRADO
                     |
                     ;

c_hay_parametro ::= c_hay_parametro COMA c_hay_parametro
                  | c_variable_o_llamadoMetodo
                  //| c_expresion_variable_concatena
                  /*Demás expresiones sin variable*/
                  | c_expresion_numerica
                  | c_expresion_cadena
                  | c_expresion_booleana
                  | PARENTESISABIERTO c_hay_parametro PARENTESISCERRADO
                  ;

//c_definicion::= NUM c_asignacion_numerica
//|CAD c_asignacion_cadena
//|BOOL c_asignacion_booleana
  //;

/*-----------------------------Sintaxis de estructuras de control-------------------------- */

c_estructuras ::= c_para
                | c_mientras
                | c_si
                | c_revisar
                ;

c_para ::= PARA VAR:v DESDE c_asignacion_expresion_Numerica_Total HASTA c_asignacion_expresion_Numerica_Total
           AVANCE c_asignacion_expresion_Numerica_Total LLAVEABIERTO c_lista_sentencias LLAVECERRADO
         ;

c_mientras ::= MIENTRAS PARENTESISABIERTO c_asignacion_expresion_Booleana_Total PARENTESISCERRADO
               HACER LLAVEABIERTO c_lista_sentencias LLAVECERRADO
             | HACER LLAVEABIERTO c_lista_sentencias LLAVECERRADO MIENTRAS
               PARENTESISABIERTO c_asignacion_expresion_Booleana_Total PARENTESISCERRADO
             ;

c_si ::= SI PARENTESISABIERTO c_asignacion_expresion_Booleana_Total PARENTESISCERRADO LLAVEABIERTO c_lista_sentencias LLAVECERRADO c_sino
       ;

c_sino ::= SINO c_si
         | SINO LLAVEABIERTO c_lista_sentencias LLAVECERRADO c_sino
         |
         ;

c_revisar ::= REVISAR PARENTESISABIERTO VAR:v PARENTESISCERRADO LLAVEABIERTO c_revisar_casos LLAVECERRADO
                       ;

c_revisar_casos ::= CASO c_expresion_numerica DOSPUNTOS c_lista_sentencias SALIR
                  | DEFECTO DOSPUNTOS c_lista_sentencias SALIR
                  ;

c_lista_sentencias ::= c_asignacion c_lista_sentencias
                     | c_declaracion c_lista_sentencias
                     | c_estructuras c_lista_sentencias
                     | c_expresion_llamado_metodo c_lista_sentencias
                     | c_funciones_reservadas c_lista_sentencias
                     |
                     ;

/*------------------------------Declaracion Basica ------------------------------*/
c_declaracion ::= c_tipo VAR:v                              {:System.out.println("Declaracion " + v);:}
                ;

/*------------------------------Primitivas de tipo de datos------------------------------*/

c_tipo ::= CAD
         | NUM
         | BOOL
         | VAR:tipo_no_primitivo  //Una clase
         ;

/*-------------------------Sintaxis de las variables y operaciones con variables------------------------*/

c_variable_o_llamadoMetodo ::= c_expresion_variable     {:System.out.println("Variable de expresion");:}
                             | c_llamadoMetodo          {:System.out.println("Llamado a metodo en expresion");:}
                             ;

c_llamadoMetodo ::= c_expresion_llamado_metodo
                  | PARENTESISABIERTO c_llamadoMetodo PARENTESISCERRADO
                  ;

c_expresion_variable ::= VAR:v
                       | PARENTESISABIERTO c_expresion_variable PARENTESISCERRADO
                       ;
/*
c_expresion_variable_concatena ::= c_variable_o_llamadoMetodo SUMA c_expresion_variable_concatena

                                 //| c_variable_o_llamadoMetodo SUMA c_variable_o_llamadoMetodo
                                 | c_expresion_variable SUMA c_variable_o_llamadoMetodo
                                 | c_llamadoMetodo SUMA c_variable_o_llamadoMetodo

                                 | PARENTESISABIERTO c_expresion_variable_concatena PARENTESISCERRADO
                                 ;
*/

c_expresion_variable_igual ::= c_expresion_numerica IGUAL c_expresion_numerica
                             | c_expresion_booleana  IGUAL c_expresion_booleana
                             | c_expresion_booleana  IGUAL c_variable_o_llamadoMetodo
                             | c_variable_o_llamadoMetodo  IGUAL c_asignacion_booleana

                             | c_variable_o_llamadoMetodo IGUAL c_expresion_numerica
                             | c_expresion_numerica IGUAL c_variable_o_llamadoMetodo
                             | c_variable_o_llamadoMetodo IGUAL c_variable_o_llamadoMetodo

                             ;

c_expresion_variable_distinto ::=c_expresion_numerica DISTINTO c_expresion_numerica
                              |  c_expresion_booleana  DISTINTO c_expresion_booleana
                              | c_expresion_booleana  DISTINTO c_variable_o_llamadoMetodo
                              | c_variable_o_llamadoMetodo  DISTINTO c_asignacion_booleana
                              |  c_variable_o_llamadoMetodo DISTINTO c_expresion_numerica
                               | c_expresion_numerica DISTINTO c_variable_o_llamadoMetodo
                               | c_variable_o_llamadoMetodo DISTINTO c_variable_o_llamadoMetodo

                               ;

c_expresion_variable_mayorque ::= c_asignacion_expresion_Numerica_Total MAYORQUE c_asignacion_expresion_Numerica_Total
                                ;


c_expresion_variable_mayoroigual ::= c_asignacion_expresion_Numerica_Total MAYOROIGUAL c_asignacion_expresion_Numerica_Total
                                   ;

c_expresion_variable_menorque ::= c_asignacion_expresion_Numerica_Total MENORQUE c_asignacion_expresion_Numerica_Total
                                ;


c_expresion_variable_menoroigual ::= c_asignacion_expresion_Numerica_Total MENOROIGUAL c_asignacion_expresion_Numerica_Total
                                   ;

c_expresion_variable_comparacion ::= c_expresion_variable_igual
                                   | c_expresion_variable_distinto
                                   | c_expresion_variable_mayorque
                                   | c_expresion_variable_mayoroigual
                                   | c_expresion_variable_menorque
                                   | c_expresion_variable_menoroigual
                                   ;

/*------------------------------Declaracion de las asignaciones------------------------------*/

c_asignacion ::=    c_tipo VAR:v c_asignacion_prima             {:System.out.println("Definición sobre variable " + v);:}    //num pi = 3.14
                |   VAR:v c_asignacion_prima                    {:System.out.println("Asignación sobre variable " + v);:}
               ;

/*c_asignacion ::= c_asignacion_numerica              //num pi = 3.14
               | c_asignacion_cadena                //cad mensaje = "Me llamo viernes"
               | c_asignacion_booleana              //bool mentiroso = (true == false) == true
               ;
*/
/*------------------------------Sintaxis asignacion de tipo numericas------------------------------*/

c_asignacion_prima ::=  ASIGNACION c_expresion_numerica        //Asignacion numerica
                    |   ASIGNACION c_expresion_cadena
                    |   ASIGNACION c_expresion_booleana
                    |   ASIGNACION c_variable_o_llamadoMetodo
                    ;
/*c_asignacion_numerica ::= NUM VAR:v ASIGNACION c_asignacion_expresion_Numerica_Total
                        ;*/


c_asignacion_expresion_Numerica_Total ::= c_expresion_numerica //Corresponde a todas aquellas menos las que tienen solo variables
                                        | c_variable_o_llamadoMetodo
                                        ;


c_expresion_numerica  ::= c_expresion_numerica SUMA c_expresion_numerica            {:System.out.println("c_expresion_numerica SUMA c_expresion_numerica");:}
                        | c_expresion_numerica RESTA c_expresion_numerica           {:System.out.println("c_expresion_numerica RESTA c_expresion_numerica");:}
                        | c_expresion_numerica MULTIPLICACION c_expresion_numerica  {:System.out.println("c_expresion_numerica MULTIPLICACION c_expresion_numerica");:}
                        | c_expresion_numerica DIVISION c_expresion_numerica        {:System.out.println("c_expresion_numerica DIVISION c_expresion_numerica");:}
                        | RESTA c_expresion_numerica %prec NEGATIVO
                        | RESTA c_variable_o_llamadoMetodo %prec NEGATIVO

                        //Una variable + otra cosa

                        | c_variable_o_llamadoMetodo SUMA c_expresion_numerica
                        | c_expresion_numerica SUMA c_variable_o_llamadoMetodo

                        | c_variable_o_llamadoMetodo RESTA c_expresion_numerica
                        | c_expresion_numerica RESTA c_variable_o_llamadoMetodo

                        | c_variable_o_llamadoMetodo MULTIPLICACION c_expresion_numerica
                        | c_expresion_numerica MULTIPLICACION c_variable_o_llamadoMetodo

                        | c_variable_o_llamadoMetodo DIVISION c_expresion_numerica
                        | c_expresion_numerica DIVISION c_variable_o_llamadoMetodo

                        //Dos variables

                        | c_variable_o_llamadoMetodo SUMA c_variable_o_llamadoMetodo    //Esta operación contempla la concatenación de cadenas y la suma de literales numéricos.
                        | c_variable_o_llamadoMetodo RESTA c_variable_o_llamadoMetodo
                        | c_variable_o_llamadoMetodo MULTIPLICACION c_variable_o_llamadoMetodo
                        | c_variable_o_llamadoMetodo DIVISION c_variable_o_llamadoMetodo

                        //Terminos
                        | NUMERO:v                                                  //{:System.out.println("Numero " + v);:}
                        | PARENTESISABIERTO c_expresion_numerica PARENTESISCERRADO
                        ;

c_asignacion_expresion_Cadena_total ::= c_expresion_cadena  //Cuando al menos una no es una variable
                                      //| c_expresion_variable_concatena //Concatenacion (Al menos dos) de puras variables o llamado a metodos
                                      //| c_variable_o_llamadoMetodo
                                      ;

/*------------------------------Sintaxis de tipo cadena tipo numericas------------------------------*/

/*c_asignacion_cadena ::= CAD VAR:v ASIGNACION c_asignacion_expresion_Cadena_total
                      ;*/

c_expresion_cadena ::= c_expresion_cadena SUMA c_expresion_cadena
                     //Una variable + otra cosa
                     | c_variable_o_llamadoMetodo SUMA c_expresion_cadena
                     | c_expresion_cadena SUMA c_variable_o_llamadoMetodo
                     | CADENA:v                                             {:System.out.println("Cadena " + v);:}
                     //|c_nombre_metodo
                     | PARENTESISABIERTO c_expresion_cadena PARENTESISCERRADO
                     ;

/*------------------------------ Sintaxis de tipo cadena tipo booleana------------------------------*/

c_asignacion_expresion_Booleana_Total ::= c_expresion_booleana //Corresponde a todas las operaciones excpeto cuando todas son variables
                                        | c_variable_o_llamadoMetodo
                                        ;

/*c_asignacion_booleana ::= BOOL VAR:V ASIGNACION c_asignacion_expresion_Booleana_Total
                        ;
*/

c_expresion_booleana::= c_expresion_booleana  Y c_expresion_booleana
                      | c_expresion_booleana O c_expresion_booleana
                      | DISTINTO c_expresion_booleana %prec NEGACION
                      | DISTINTO c_variable_o_llamadoMetodo %prec NEGACION

                      //Una variables o más + otra cosa

                      | c_variable_o_llamadoMetodo Y c_expresion_booleana
                      | c_expresion_booleana Y c_variable_o_llamadoMetodo

                      | c_variable_o_llamadoMetodo O c_expresion_booleana
                      | c_expresion_booleana O c_variable_o_llamadoMetodo

                      //Dos variables o más + otra cosa

                      | c_variable_o_llamadoMetodo Y c_variable_o_llamadoMetodo
                      | c_variable_o_llamadoMetodo O c_variable_o_llamadoMetodo

                      | c_expresion_variable_comparacion
                      | VERDADERO                               //{:System.out.println("VERDADERO");:}
                      | FALSO                                   //{:System.out.println("FALSO");:}
                      | PARENTESISABIERTO c_expresion_booleana PARENTESISCERRADO
                      ;


/*------------------------------ Sintaxis de otras funciones reservadas ------------------------------*/

c_imprimir ::= IMPRIMIR c_expresion_cadena
             | IMPRIMIR c_variable_o_llamadoMetodo
             | IMPRIMIR NUMERO:n
             ;

c_leer ::= LEER VAR:v
         ;

c_devolver ::= DEVOLVER c_variable_o_llamadoMetodo
             | DEVOLVER c_expresion_numerica
             | DEVOLVER c_expresion_cadena
             | DEVOLVER c_expresion_booleana
             ;

c_funciones_reservadas ::= c_imprimir
                         | c_leer
                         | c_devolver
                         ;


/*
   lista_expresiones ::= expresion lista_expresiones      //{: System.out.println(e);:}//{: System.out.println(sym.terminalNames[e.sym]);:}
                  | expresion             //{: System.out.println(e);:}//{: System.out.println(sym.terminalNames[e.sym]);:}
                  ;

   expresion  ::= Y                 {: System.out.println("Y");:}
                | O                 {: System.out.println("O");:}
                | SI                {: System.out.println("SI");:}
                | SINO              {: System.out.println("SINO");:}
                | DEVOLVER          {: System.out.println("DEVOLVER");:}
                | REC               {: System.out.println("REC");:}
                //| CAD               {: System.out.println("CAD");:}
                //| BOOL              {: System.out.println("BOOL");:}

                | IMPRIMIR          {: System.out.println("IMPRIMIR");:}
                | LEER              {: System.out.println("LEER");:}
                | FIN               {: System.out.println("FIN");:}
                | VERDADERO         {: System.out.println("VERDADERO");:}
                | FALSO             {: System.out.println("FALSO");:}
                | IMPORTAR          {: System.out.println("IMPORTAR");:}
                | INTENTAR          {: System.out.println("INTENTAR");:}
                | ATRAPAR           {: System.out.println("ATRAPAR");:}
                | LANZAR            {: System.out.println("LANZAR");:}
                | CONSTANTE         {: System.out.println("CONSTANTE");:}
                | REVISAR           {: System.out.println("REVISAR");:}
                | CASO              {: System.out.println("CASO");:}
                | COMO              {: System.out.println("COMO");:}
                | DEFECTO           {: System.out.println("DEFECTO");:}
                //| NUM               {: System.out.println("NUM");:}
                | MENORQUE          {: System.out.println("MENORQUE");:}
                | MAYORQUE          {: System.out.println("MAYORQUE");:}
                | MENOROIGUAL       {: System.out.println("MENOROIGUAL");:}
                | MAYOROIGUAL       {: System.out.println("MAYOROIGUAL");:}
                | DISTINTO          {: System.out.println("DISTINTO");:}
                | SUMA              {: System.out.println("SUMA");:}
                | RESTA             {: System.out.println("RESTA");:}
                | MULTIPLICACION    {: System.out.println("MUTIPLICACION");:}
                | DIVISION          {: System.out.println("DIVISION");:}
                | ASIGNACION        {: System.out.println("ASIGNACION");:}
                | IGUAL             {: System.out.println("IGUAL");:}
                | CORCHETEABIERTO   {: System.out.println("CORCHETEABIERTO");:}
                | CORCHETECERRADO   {: System.out.println("CORCHETECERRADO");:}
                | PARENTESISABIERTO {: System.out.println("PARENTESISABIERTO");:}
                | PARENTESISCERRADO {: System.out.println("PARENTESISCERRADO");:}
                | DOSPUNTOS         {: System.out.println("DOSPUNTOS");:}
                | NUMERO:e          {: System.out.println("NUMERO " + e);:}
                //| VAR:e             {: System.out.println("VAR " + e);:}
                | DELIMITADOR:e     {: System.out.println("DELIMITADOR " + e);:}
                | CADENA:e          {: System.out.println("CADENA" + e);:}
                ;
*/