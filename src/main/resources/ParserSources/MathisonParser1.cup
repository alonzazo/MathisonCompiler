 
   
/* ---------------Seccion de declaraciones preliminares--------------------*/
package SyntacticalAnalizer;

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.io.FileReader;
import LexicalAnalizer.Lexer;
import java.util.Scanner;
   
/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */
parser code {:
    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
        //--------------------------------------------------------INICIO DE INTERVENCIÓN
            //Intervención para no tomar como entrada los parámetros del programa
            System.out.println("Escriba la dirección del archivo que desea analizar:");
            Scanner scan = new Scanner(System.in);
            args = scan.nextLine().split(" ");
            //--------------------------------------------------------FIN DE INTERVENCIÓN

            if (args.length == 0) {
              System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
            }
            else {
              int firstFilePos = 0;
              String encodingName = "UTF-8";
              if (args[0].equals("--encoding")) {
                firstFilePos = 2;
                encodingName = args[1];
                try {
                  java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid?
                } catch (Exception e) {
                  System.out.println("Invalid encoding '" + encodingName + "'");
                  return;
                }
              }
              for (int i = firstFilePos; i < args.length; i++) {
                Lexer lexer = null;
                try {

                  //String path = Lexer.class.getResource(args[i]).getPath();
                  //java.io.FileInputStream stream = new java.io.FileInputStream(path);

                  //Se utiliza getResource para como root la carpeta Resources como Root
                    java.io.Reader reader = new java.io.InputStreamReader(Parser.class.getResourceAsStream("../" + args[i]), encodingName);
                    lexer = new Lexer(reader);
                                        //--------------------------------------------------------Aplicacion de PARSER
                                      Parser asin = new Parser(lexer);
                                        Object result = asin.parse().value;
                }
                catch (java.io.FileNotFoundException e) {
                  System.out.println("File not found : \""+args[i]+"\"" + e.getMessage());
                }
                catch (java.io.IOException e) {
                  System.out.println("IO error scanning file \""+args[i]+"\"");
                  System.out.println(e);
                }
                catch (Exception e) {
                  System.out.println("Unexpected exception:");
                  e.printStackTrace();
                }
              }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};
   
/* ------------Declaracion de simbolos terminales y no terminales---------- */
   
/* Terminales (tokens obtenidos por el analizador lexico).  

   Terminales que no tienen un valor son listados primero, los terminales que
   tienen un valor como los enteros son listados en la segunda o demas lineas. */

//PALABRAS RESERVADAS
terminal    Y, O, PARA, DESDE, HASTA, AVANCE, MIENTRAS, HACER, SI;
terminal    SINO, DEVOLVER, PROC, CLASE, REC, CAD, BOOL, PUBLICO;
terminal    PRIVADO, IMPRIMIR, LEER, FIN, VERDADERO, FALSO, IMPORTAR;
terminal    INTENTAR, ATRAPAR, LANZAR, CONSTANTE, REVISAR, CASO;
terminal    COMO, DEFECTO, CON, TERMINAR, EXCEPTO, MOSTRAR, EJECUTAR, NUM;
terminal    EN, CONTINUAR, FINALMENTE, NEGACION, DNUM, INUM;

//COMPARACION
terminal    MEI, MAI, II, MENORQUE, MAYORQUE, MENOROIGUAL, MAYOROIGUAL, DISTINTO;

//ARITMETICA
terminal    SUMA, RESTA, MULTIPLICACION, DIVISION, MOD, POTENCIA, ASIGNACION, IGUAL, NEGATIVO;

//DELIMITADOR
terminal    CORCHETEABIERTO,CORCHETECERRADO,LLAVEABIERTO,LLAVECERRADO,PARENTESISABIERTO,PARENTESISCERRADO, DOSPUNTOS, COMA;

terminal SALIR;

//CON VALOR ASOCIADO
terminal    Double NUMERO;
terminal    String VAR;
terminal    String DELIMITADOR;
terminal    String CADENA;

/* No terminales usados en la seccion gramatical. 

   Primero se lista los no terminales que tienen un valor Object y despues
   se lista los no terminales que tienen un entero. Un Object se refiere a que
   no tienen tipo, pudiendo ser entero o String.
*/

non terminal    programa, lista_clases, clase, cuerpo_clase, sentencia, lista_sentencias;
non terminal    lista_metodos, metodo, lista_expresiones, expresion, lista_parametros, expresion_booleana, variable_arreglo;
non terminal    ciclo_para, ciclo_mientras, condicion, condicion_si, sino;
non terminal    visibilidad, tipo_dato, tipo_metodo;
non terminal    C_Expresion_booleana, C_Expresion_numerica;

/* -------------Seccion de predencia y asociacion de los terminales----------- */
   
//PRECEDENCIAS
precedence nonassoc DISTINTO, IGUAL;
precedence nonassoc DNUM, INUM;
precedence nonassoc MAYORQUE, MENORQUE, MAYOROIGUAL, MENOROIGUAL;
precedence left Y, O;
precedence left NEGACION;

/* ------------------------- Seccion de la gramatica ------------------------- */



////--------------------------------------------------------Estructura general
//Un programa será un conjunto de clases y métodos
//. Sí, debido a que se enseñará a niños, se permite
//tener métodos sueltos. Además, tener un main (co
//ntrolador estático) dentro de un objeto nunca tu
//vo sentido.




C_Expresion_booleana ::= C_Expresion_booleana Y C_Expresion_booleana
                       | C_Expresion_booleana O C_Expresion_booleana
                       | C_Expresion_booleana IGUAL C_Expresion_booleana
                       | C_Expresion_booleana DISTINTO C_Expresion_booleana
                       | C_Expresion_numerica DISTINTO C_Expresion_numerica %prec DNUM
                       | C_Expresion_numerica MENORQUE C_Expresion_numerica
                       | C_Expresion_numerica MAYORQUE C_Expresion_numerica
                       | C_Expresion_numerica IGUAL C_Expresion_numerica %prec INUM
                       | C_Expresion_numerica MENOROIGUAL C_Expresion_numerica
                       | C_Expresion_numerica MAYOROIGUAL C_Expresion_numerica
                       | DISTINTO C_Expresion_booleana %prec NEGACION
                       | PARENTESISABIERTO C_Expresion_booleana PARENTESISCERRADO
                       | VERDADERO
                       | FALSO
                       | VAR:b
                       //| VAR PARENTESISABIERTO PARENTESISCERRADO
                       ;

C_Expresion_numerica ::= NUMERO:n
                       ;


 /*  lista_sentencias ::= lista_expresiones
                        | C_Expresion_booleana
                        ;
                        */



   /*sentencia ::= ciclo_para
                 | ciclo_mientras
                 | condicion_si
                 | condicion_revisar
                 | asignacion
                 |
                 ;*/
/*
   ciclo_para ::= PARA VAR:v DESDE expresion HASTA expresion_booleana AVANCE NUMERO:n LLAVEABIERTO lista_sentencias LLAVECERRADO;

   ciclo_mientras ::= MIENTRAS PARENTESISABIERTO expresion_booleana PARENTESISCERRADO HACER LLAVEABIERTO lista_sentencias LLAVECERRADO
                    | HACER LLAVEABIERTO lista_sentencias LLAVECERRADO MIENTRAS PARENTESISABIERTO expresion PARENTESISCERRADO DELIMITADOR
                    ;

   condicion_si ::= SI PARENTESISABIERTO expresion_booleana PARENTESISCERRADO LLAVEABIERTO lista_sentencias LLAVECERRADO sino
                  ;

   sino ::= SINO LLAVEABIERTO lista_sentencias LLAVECERRADO
         ;

   condicion_revisar ::= REVISAR PARENTESISABIERTO expresion_numerica PARENTESISCERRADO LLAVEABIERTO revisar0 LLAVECERRADO
                       ;

   revisar0 ::= CASO expresion_numerica: lista_sentencias SALIR
               | DEFECTO: lista_sentencias SALIR
               ;*/

/*
   asignacion ::= NUM asignacion
                | CAD asignacion
                | BOOL asignacion
                ;


   num ::= NUMERO VAR:v num0
         ;

   num0 ::= expresion_numerica;



   cad ::= CADENA VAR:v cad0
         ;

   cad0 ::= expresion_cadena;



   boo ::= BOOL VAR:v boo0
         ;

   boo0 ::= expresion_booleana;
*/


/*
    lista_expresiones ::= expresion lista_expresiones      //{: System.out.println(e);:}//{: System.out.println(sym.terminalNames[e.sym]);:}
                  | expresion             //{: System.out.println(e);:}//{: System.out.println(sym.terminalNames[e.sym]);:}
                  ;

    expresion ::= Y                 {: System.out.println("Y");:}
                | O                 {: System.out.println("O");:}
                | SI                {: System.out.println("SI");:}
                | SINO              {: System.out.println("SINO");:}
                | DEVOLVER          {: System.out.println("DEVOLVER");:}
                | REC               {: System.out.println("REC");:}
                //| CAD               {: System.out.println("CAD");:}
                //| BOOL              {: System.out.println("BOOL");:}

                | IMPRIMIR          {: System.out.println("IMPRIMIR");:}
                | LEER              {: System.out.println("LEER");:}
                | FIN               {: System.out.println("FIN");:}
                | VERDADERO         {: System.out.println("VERDADERO");:}
                | FALSO             {: System.out.println("FALSO");:}
                | IMPORTAR          {: System.out.println("IMPORTAR");:}
                | INTENTAR          {: System.out.println("INTENTAR");:}
                | ATRAPAR           {: System.out.println("ATRAPAR");:}
                | LANZAR            {: System.out.println("LANZAR");:}
                | CONSTANTE         {: System.out.println("CONSTANTE");:}
                | REVISAR           {: System.out.println("REVISAR");:}
                | CASO              {: System.out.println("CASO");:}
                | COMO              {: System.out.println("COMO");:}
                | DEFECTO           {: System.out.println("DEFECTO");:}
                | CON               {: System.out.println("CON");:}
                | TERMINAR          {: System.out.println("TERMINAR");:}
                | EXCEPTO           {: System.out.println("EXCEPTO");:}
                | MOSTRAR           {: System.out.println("MOSTRAR");:}
                | EJECUTAR          {: System.out.println("EJECUTAR");:}
                //| NUM               {: System.out.println("NUM");:}
                | EN                {: System.out.println("EN");:}
                | CONTINUAR         {: System.out.println("CONTINUAR");:}
                | FINALMENTE        {: System.out.println("FINALMENTE");:}
                | MEI               {: System.out.println("MEI");:}
                | MAI               {: System.out.println("MAI");:}
                | II                {: System.out.println("II");:}
                | MENORQUE          {: System.out.println("MENORQUE");:}
                | MAYORQUE          {: System.out.println("MAYORQUE");:}
                | MENOROIGUAL       {: System.out.println("MENOROIGUAL");:}
                | MAYOROIGUAL       {: System.out.println("MAYOROIGUAL");:}
                | DISTINTO          {: System.out.println("DISTINTO");:}
                | SUMA              {: System.out.println("SUMA");:}
                | RESTA             {: System.out.println("RESTA");:}
                | MULTIPLICACION    {: System.out.println("MUTIPLICACION");:}
                | DIVISION          {: System.out.println("DIVISION");:}
                | MOD               {: System.out.println("MOD");:}
                | POTENCIA          {: System.out.println("POTENCIA");:}
                | ASIGNACION        {: System.out.println("ASIGNACION");:}
                | IGUAL             {: System.out.println("IGUAL");:}
                | CORCHETEABIERTO   {: System.out.println("CORCHETEABIERTO");:}
                | CORCHETECERRADO   {: System.out.println("CORCHETECERRADO");:}
                | PARENTESISABIERTO {: System.out.println("PARENTESISABIERTO");:}
                | PARENTESISCERRADO {: System.out.println("PARENTESISCERRADO");:}
                | DOSPUNTOS         {: System.out.println("DOSPUNTOS");:}
                | NUMERO:e          {: System.out.println("NUMERO " + e);:}
                //| VAR:e             {: System.out.println("VAR " + e);:}
                | DELIMITADOR:e     {: System.out.println("DELIMITADOR " + e);:}
                | CADENA:e          {: System.out.println("CADENA" + e);:}
                ;
*/