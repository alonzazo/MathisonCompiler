 
   
/* ---------------Seccion de declaraciones preliminares--------------------*/
package SyntacticalAnalizer;

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.io.FileReader;
import LexicalAnalizer.Lexer;
import java.util.Scanner;
   
/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */
parser code {:
    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
        //--------------------------------------------------------INICIO DE INTERVENCIÓN
            //Intervención para no tomar como entrada los parámetros del programa
            System.out.println("Escriba la dirección del archivo que desea analizar:");
            Scanner scan = new Scanner(System.in);
            args = scan.nextLine().split(" ");
            //--------------------------------------------------------FIN DE INTERVENCIÓN

            if (args.length == 0) {
              System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
            }
            else {
              int firstFilePos = 0;
              String encodingName = "UTF-8";
              if (args[0].equals("--encoding")) {
                firstFilePos = 2;
                encodingName = args[1];
                try {
                  java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid?
                } catch (Exception e) {
                  System.out.println("Invalid encoding '" + encodingName + "'");
                  return;
                }
              }
              for (int i = firstFilePos; i < args.length; i++) {
                Lexer lexer = null;
                try {

                  //String path = Lexer.class.getResource(args[i]).getPath();
                  //java.io.FileInputStream stream = new java.io.FileInputStream(path);

                  //Se utiliza getResource para como root la carpeta Resources como Root
                    java.io.Reader reader = new java.io.InputStreamReader(Parser.class.getResourceAsStream("../" + args[i]), encodingName);
                    lexer = new Lexer(reader);
                                        //--------------------------------------------------------Aplicacion de PARSER
                                      Parser asin = new Parser(lexer);
                                        Object result = asin.parse().value;
                }
                catch (java.io.FileNotFoundException e) {
                  System.out.println("File not found : \""+args[i]+"\"" + e.getMessage());
                }
                catch (java.io.IOException e) {
                  System.out.println("IO error scanning file \""+args[i]+"\"");
                  System.out.println(e);
                }
                catch (Exception e) {
                  System.out.println("Unexpected exception:");
                  e.printStackTrace();
                }
              }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};
   
/* ------------Declaracion de simbolos terminales y no terminales---------- */
   
/* Terminales (tokens obtenidos por el analizador lexico).  

   Terminales que no tienen un valor son listados primero, los terminales que
   tienen un valor como los enteros son listados en la segunda o demas lineas. */

//PALABRAS RESERVADAS
terminal    Y, O, PARA, DESDE, HASTA, AVANCE, MIENTRAS, HACER, SI;
terminal    SINO, DEVOLVER, PROC, CLASE, REC, CAD, BOOL, PUBLICO;
terminal    PRIVADO, IMPRIMIR, LEER, FIN, VERDADERO, FALSO, IMPORTAR;
terminal    INTENTAR, ATRAPAR, LANZAR, CONSTANTE, REVISAR, CASO;
terminal    COMO, DEFECTO, CON, TERMINAR, EXCEPTO, MOSTRAR, EJECUTAR, NUM;
terminal    EN, CONTINUAR, FINALMENTE;

//COMPARACION
terminal    MEI, MAI, II, MENORQUE, MAYORQUE, MENOROIGUAL,MAYOROIGUAL,DISTINTO;

//ARITMETICA
terminal    SUMA, RESTA, MULTIPLICACION, DIVISION, MOD, POTENCIA, IGUAL;

//DELIMITADOR
terminal    CORCHETEABIERTO,CORCHETECERRADO,LLAVEABIERTO,LLAVECERRADO,PARENTESISABIERTO,PARENTESISCERRADO, DOSPUNTOS, COMA;

terminal SALIR;

//CON VALOR ASOCIADO
terminal    Double NUMERO;
terminal    String VAR;
terminal    String DELIMITADOR;
terminal    String CADENA;

/* No terminales usados en la seccion gramatical. 

   Primero se lista los no terminales que tienen un valor Object y despues
   se lista los no terminales que tienen un entero. Un Object se refiere a que
   no tienen tipo, pudiendo ser entero o String. */
//non terminal Object     expr_list, expr_part;
//non terminal Integer    expr, factor, termino;

non terminal    programa, lista_clases, clase, cuerpo_clase, lista_sentencias;
non terminal    lista_metodos, metodo, lista_expresiones, expresion, lista_parametros, variable_arreglo;
non terminal    ciclo_para, ciclo_mientras, condicion_si;
non terminal    condicion_revisar, revisar0, sino, num, num0, cad, cad0, boo, boo0, declaracion;
non terminal    visibilidad, tipo_dato, tipo_metodo;
non terminal    expresion_numerica, expresion_cadena, expresion_booleana;

/* -------------Seccion de predencia y asociacion de los terminales----------- */
   
/*
  Precedencia de los no terminales, no sirve con simbolos terminales.
  Por eso no la usamos. Además indica si se asocia a izquierda o derecha.
*/
  /*precedence left OP_SUMA, OP_RESTA;
  precedence left OP_MULT;*/


/* ------------------------- Seccion de la gramatica ------------------------- */



////--------------------------------------------------------Estructura general
//Un programa será un conjunto de clases y métodos
//. Sí, debido a que se enseñará a niños, se permite
//tener métodos sueltos. Además, tener un main (co
//ntrolador estático) dentro de un objeto nunca tu
//vo sentido.

   programa ::= clase programa
                | metodo programa
                | clase
                | metodo
                ;
/*
   lista_clases ::= clase lista_clases
                    | clase
                    ;
*/
   clase ::= visibilidad CLASE VAR:v LLAVEABIERTO cuerpo_clase LLAVECERRADO {: System.out.println("CLASE " + v);:}
             ;

   cuerpo_clase ::= expresion cuerpo_clase
                    | metodo cuerpo_clase
                    //| tipo_dato VAR:v cuerpo_clase
                    |
                    ;

   metodo ::= visibilidad tipo_metodo VAR:v PARENTESISABIERTO lista_parametros PARENTESISCERRADO LLAVEABIERTO lista_sentencias LLAVECERRADO     {: System.out.println("METODO " + v);:}
            | visibilidad tipo_metodo VAR:v PARENTESISABIERTO PARENTESISCERRADO LLAVEABIERTO lista_sentencias LLAVECERRADO                      {: System.out.println("METODO " + v);:}
            ;

    visibilidad ::= PUBLICO
                    | PRIVADO
                    |
                    ;

   lista_parametros ::= tipo_dato variable_arreglo COMA lista_parametros
                        | tipo_dato variable_arreglo
                        ;

   variable_arreglo ::= VAR:v
                        | VAR:v CORCHETEABIERTO CORCHETECERRADO
                        ;

   tipo_dato ::= CAD
               | NUM
               | BOOL
               | VAR:tipo_no_primitivo           //Una clase
               ;

   tipo_metodo ::= PROC
                | tipo_dato
                ;

//TODO: Especificar más
//   lista_sentencias ::= lista_expresiones
//                        ;

   lista_sentencias ::= ciclo_mientras lista_sentencias
                        | ciclo_para lista_sentencias
                        | condicion_si lista_sentencias
                        | condicion_revisar lista_sentencias
                        | declaracion lista_sentencias
                        |
                        ;


   ciclo_para ::= PARA VAR:v DESDE expresion HASTA expresion AVANCE NUMERO:n LLAVEABIERTO lista_sentencias LLAVECERRADO;

   ciclo_mientras ::= MIENTRAS PARENTESISABIERTO expresion PARENTESISCERRADO HACER LLAVEABIERTO lista_sentencias LLAVECERRADO
                    | HACER LLAVEABIERTO lista_sentencias LLAVECERRADO MIENTRAS PARENTESISABIERTO expresion PARENTESISCERRADO DELIMITADOR
                    ;

   condicion_si ::= SI PARENTESISABIERTO expresion PARENTESISCERRADO LLAVEABIERTO lista_sentencias LLAVECERRADO sino
                    ;

   sino ::= SINO LLAVEABIERTO lista_sentencias LLAVECERRADO sino
           |
           ;

   condicion_revisar ::= REVISAR PARENTESISABIERTO expresion PARENTESISCERRADO LLAVEABIERTO revisar0 LLAVECERRADO
                         ;

   revisar0 ::= CASO expresion DOSPUNTOS lista_sentencias SALIR
                | DEFECTO DOSPUNTOS lista_sentencias SALIR
                ;

   declaracion ::= num
                 | cad
                 | boo
                 ;

   num ::= NUM VAR:v num0
           ;

   num0 ::= IGUAL NUMERO:n
            |
            ;

   cad ::= CAD VAR:v cad0
           ;

   cad0 ::= IGUAL CADENA:c
            |
            ;

   boo ::= BOOL VAR:v boo0
           ;

   boo0 ::= IGUAL VERDADERO
            | IGUAL FALSO
            |
            ;


    /*lista_expresiones ::= expresion lista_expresiones
                  | tipo_dato lista_expresiones
                  |
                  ;*/

    expresion ::= Y                 {: System.out.println("Y");:}
                | O                 {: System.out.println("O");:}
                | SI                {: System.out.println("SI");:}
                | SINO              {: System.out.println("SINO");:}
                | DEVOLVER          {: System.out.println("DEVOLVER");:}
                | REC               {: System.out.println("REC");:}
                | IMPRIMIR          {: System.out.println("IMPRIMIR");:}
                | LEER              {: System.out.println("LEER");:}
                | FIN               {: System.out.println("FIN");:}
                | VERDADERO         {: System.out.println("VERDADERO");:}
                | FALSO             {: System.out.println("FALSO");:}
                | IMPORTAR          {: System.out.println("IMPORTAR");:}
                | INTENTAR          {: System.out.println("INTENTAR");:}
                | ATRAPAR           {: System.out.println("ATRAPAR");:}
                | LANZAR            {: System.out.println("LANZAR");:}
                | CONSTANTE         {: System.out.println("CONSTANTE");:}
                | REVISAR           {: System.out.println("REVISAR");:}
                | CASO              {: System.out.println("CASO");:}
                | COMO              {: System.out.println("COMO");:}
                | DEFECTO           {: System.out.println("DEFECTO");:}
                | CON               {: System.out.println("CON");:}
                | TERMINAR          {: System.out.println("TERMINAR");:}
                | EXCEPTO           {: System.out.println("EXCEPTO");:}
                | MOSTRAR           {: System.out.println("MOSTRAR");:}
                | EJECUTAR          {: System.out.println("EJECUTAR");:}
                | EN                {: System.out.println("EN");:}
                | CONTINUAR         {: System.out.println("CONTINUAR");:}
                | FINALMENTE        {: System.out.println("FINALMENTE");:}
                | MEI               {: System.out.println("MEI");:}
                | MAI               {: System.out.println("MAI");:}
                | II                {: System.out.println("II");:}
                | MENORQUE          {: System.out.println("MENORQUE");:}
                | MAYORQUE          {: System.out.println("MAYORQUE");:}
                | MENOROIGUAL       {: System.out.println("MENOROIGUAL");:}
                | MAYOROIGUAL       {: System.out.println("MAYOROIGUAL");:}
                | DISTINTO          {: System.out.println("DISTINTO");:}
                | SUMA              {: System.out.println("SUMA");:}
                | RESTA             {: System.out.println("RESTA");:}
                | MULTIPLICACION    {: System.out.println("MUTIPLICACION");:}
                | DIVISION          {: System.out.println("DIVISION");:}
                | MOD               {: System.out.println("MOD");:}
                | POTENCIA          {: System.out.println("POTENCIA");:}
                | IGUAL             {: System.out.println("IGUAL");:}
                | CORCHETEABIERTO   {: System.out.println("CORCHETEABIERTO");:}
                | CORCHETECERRADO   {: System.out.println("CORCHETECERRADO");:}
                | PARENTESISABIERTO {: System.out.println("PARENTESISABIERTO");:}
                | PARENTESISCERRADO {: System.out.println("PARENTESISCERRADO");:}
                | DOSPUNTOS         {: System.out.println("DOSPUNTOS");:}
                | SALIR             {: System.out.println("SALIR");:}
                | NUMERO:e          {: System.out.println("NUMERO " + e);:}
                | DELIMITADOR:e     {: System.out.println("DELIMITADOR " + e);:}
                | CADENA:e          {: System.out.println("CADENA" + e);:}
                ;
    /*
    expr_list ::= expr_list expr_part
                  |
                  expr_part
                  ;
    */
/* 'expr_part' se compone de una expr seguida de SEMI, o de una asign seguida de SEMI.
   asign:a esta estableciendo que a representa al objeto asociado a asign               {: System.out.println();:}
   | entre {: :}
   se coloca el sodigo en java para las acciones a tomar al cumplirse una produccion.
*/
/*
   expr_part ::= expr:e
                  {:
                    System.out.println(" = " + e); 
                  :} 
                  SEMI
                 ;
*/
/* 'expr' puede ser una expresion que inicia por numero entero op_suma expr,
  de esa forma se realiza una suma. Tambien puede ser un numero entero, con esto
  se devuelve el valor del entero. En RESULT se almacena el valor de las acciones,
  y se pasa al siguiente nivel de la gramatica.
*/              

/*   expr      ::=  expr:e OP_SUMA factor:f
                  {:
                    RESULT = new Integer(e.intValue() + f.intValue());
                  :}
                  |
                  expr:e OP_RESTA factor:f
                  {:
                    RESULT = new Integer(e.intValue() - f.intValue());
                  :}
                  |
                  factor:n
                  {:
                    RESULT = n; 
                  :}
                  ;
*/
/*factor        ::=  factor:f OP_MULT termino:e
                  {:
                    RESULT = new Integer(f.intValue() * e.intValue());
                  :}
                  |
                  termino:t
                  {:
                    RESULT = t;
                  :}
                  ;
*/
/*termino       ::=  PARENIZQ expr:e PARENDER
                  {:
                    RESULT = e;
                  :}
                  |
                  ENTERO:e
                  {:
                    RESULT = e;
                  :}
                  ;
*/